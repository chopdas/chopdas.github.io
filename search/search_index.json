{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"tags/","text":"","title":"Tags index"},{"location":"developer/git/","text":"Git Setup brew install git git --version # test ssh ssh -T git@github.com Basics origin -A default remote pointer to your repo on github master - Default branch origin/master - a remote tracking branch on local. Its hidden and is supposed to stay in sync with master on remote origin . Working directory -> Staging -> Head. add updates Staging from working directory. reset overrides Staging with last commit on Head. You undo an add with a reset . checkout overwrites working directory with a copy from staging. You undo an edit with checkout . .Gitignore # ~/.gitignore_global can have .gitignore entries $ cat .gitignore *. [ oa ] *~ # ignore all .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in any directory named build build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory and any of its subdirectories doc/**/*.pdf Working with Local Repo # create local repo mkdir <dir> cd <dir> git init # ... make some changes # status git status -s # short version git status # shows which files changed # add git add . # or git add -A # or git add -i # interactive # commit git commit -m 'some comment' # Combine add and commit git commit -a # implicitly add files already existing in the last commit Working with Remote Remote must exist before hand on Github. # clone a remote repo git clone <your.remote.git> <your.output.directory> # later if you need to sync local from remote git checkout main git fetch main git reset --hard origin/main # resets to HEAD of remote Connect a local repo to a remote repo: Scenario: You have an empty repo on Github, and you never cloned it. But on local you have a repo that you wish to connect to this empty repo. cd local_repo git remote add origin https://your.remote.git # link local to remote # or the below two achieve the same result git push -u origin main # first time link to remote and push to remote # git push --set-upstream origin main (not needed) Scenario: Fork someone's repo into your repo. You fork original repo to your repo You clone your repo to local. A default remote \"origin\" is created You want to add another remote to your local - lets call is upstream git remote add upstream https://original.repo.git Scenario: Create a remote branch and then use it locally # first create the remote branch named new-feature git checkout -b new-feature from-branch Scenario: Create a local branch and then push to remote # from-branch is optional. If not provided, git assumes current branch git checkout -b new-feature from-branch git branch -vv # won't show a tracking branch for new-feature # -u requires first time only git push -u origin new-feature # or.. git push -u origin HEAD git branch -vv # now shows a tracking branch for new_branch Scenario: You have a local folder dev which is not yet tracked against an existing remote branch cd dev git checkout --track origin/dev # or git branch -u origin/dev Misc commands # show remote servers configured on local git remote # by default it would show origin git remote -v git remote -vv # also include tracking branches on local git remote show <remote> # inspecting a remote # rename a remote git remote rename <old_name> <new_name> # remove a remote git remote remove <remote_to_be_removed> # use alias on git config git config --global alias.pushd \"push -u origin HEAD\" git pushd # use alias on bash alias gp = 'git push -u origin HEAD' gp # fetch and pull git fetch <remote_repo_name> # fetch and pull from remote into staging git pull # fetches and merges into working directory push works only if you cloned from a server to which you have write access and nobody has pushed in the meantime. Since remote is a moving branch, its possible that the push to include your local changes on remote may fail. Read #Checkout for more details. Here is how you address it: # Refresh the tracking branch. This is a remote tracking branch on local git fetch origin master # Integrate our changes with remote changes git rebase origin/master # The above two commands can be combined into one command git pull --rebase origin master # Finally attempt the push to remote again git push origin master Diff Command git diff # diff between Working directory and Staging git diff --cached # diff between Staging and HEAD git diff --staged # what's in Staging which will go to Head on next commit. This will not show all changes, only what is staged. # diff between some-branch and Working directory git diff <source_branch> <target_branch> git diff <some-branch> git diff HEAD # diff between two commits git diff first-commit last-commit Log Command By default, git log will only show commit history of the branch you have checked out. git log # too long git log -p -2 # shows last 2 commit details git log --since = 2 .weeks # list of commits in last two weeks # you can specify \"2008-01-15\", \"2 years 1 day 3 minutes ago\" git log --stat git log --pretty = oneline # compressed log view git log --oneline --decorate # shows where the branch pointers are pointing git log --pretty = format: \"%h %s\" --graph git log --oneline --decorate --graph --all git log --pretty = format # shows format help git log --pretty = format: \"%h - %an, %ar : %s\" git log --author = bob # commits by certain author git log --graph --oneline --decorate --all # decorated git log --name-status # which files have changed git log --since = 2 .weeks # --before, --after, --until git log --since = \"2 years 1 day 3 minutes ago\" # commits but not merged git log --pretty = \"%h - %s\" --author = 'Junio C Hamano' --since = \"2008-10-01\" --before = \"2008-11-01\" --no-merges -- t Checkout Command When dealing with a branch (say, master ) copied from a remote repository (say, origin ), there are three branches one must consider: The copy of master in the local repository The copy of master in the remote repository The local branch origin/master that records the last known position of the remote branch. Branch 3 tracks (tracking branch) the remote branch, not because it is itself a remote branch, its a local copy of the remote branch. The fetch command copies branch (2) to (3). git fetch origin master The checkout command copies branch [3] to [1]. git checkout master The push command copies branch (1) to (2), and incidentally updates (3) to match with (2). git push origin master Copy files from Head or Staging to the Working Directory, and to optionally switch branches. If the commit name is provided, the files are copied from commit to staging and wd. If commit name is not provided, the files are copied from staging to wd. Reset Command Moves the current branch to another position, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory. # default to HEAD and copies to staging, doesn't touch wd git reset # default to HEAD and copies only the mentioned files into staging, doesn't touch the wd git reset -- files # default to HEAD and copies to staging and wd git reset --head # HEAD~3 means N-3 commit. git reset HEAD~3 # copies history into staging only git reset HEAD~3 --hard # copies history into staging and wd git reset HEAD~3 --soft # simply moves the HEAD, doesn't copy to staging or wd Remove Files To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The git rm command does that, and also removes the file from your working directory so you don\u2019t see it as an untracked file the next time around. rm <file> # removes untracked files or files in WD, but not in S git rm <file> # removes from staging and working directory git rm --cached FILENAME # remove from staging, retain in working directory git commit -f # file is gone git rm log/ \\* .log # removes all files with .log extension git rm \\* ~ # removes all files ending in ~ Moving Files Git does not explicitly track file movement. If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file. However, Git is pretty smart about figuring that out after the fact. git mv file_from file_to # above is equivalent to following mv file_from file_to git rm file_from git add file_to Undo Things You committed early If you commit and then realize that you forgot to stage the changes in a file you wanted to add to this commit, you can: git commit -m 'Initial commit' # some file(s) forgotten. git add <forgotten_files> git commit --amend Unstage a staged file Let\u2019s say you\u2019ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both. How can you unstage one of the two? # file-a and file-b added to Staging git add * # unstage file-b git reset HEAD file-b # file-a is committed git commit -m # stage file-b git add file-b # commit file-b as a separate commit git commit -m Unmodify a modified file You realize that you don\u2019t want to keep your changes to the file-b ? How can you revert it back to what it looked like when you last committed git checkout -- file-b Undo commits permanently git commit ... # mistake(s) # The last three commits HEAD, HEAD-1, HEAD-2 are bad and you don't want to commit them again. git reset --hard HEAD~3 # T Undo a commit and redo git commit ... # mistake git reset --soft HEAD^ # make the edits git commit -a -c ORIG_HEAD Squashing commits # you are in <my-feature> git fetch origin git reset --soft origin/master # Moves HEAD to last commit of Remote git commit git push origin feature/<my-feature> -f # fix the error Tagging # list git tag git tag -l \"v1.8.5*\" # shows only tags with v1.8.5.* # create tag git tag -a v1.4 -m \"tag comment\" git tag # lightweigh tag, only stores checksum git tag v1.4-lw git tag git show v1.4-lw # tag a previous commit git tag -a v1.4 <some-prefix-of-commit-checksum> git tag -a v1.4 9fceb02 # push tag git push <remotename> <tagname> git push origin v1.4 # a generic git push will not push tag # delete tag git tag -d v1.4-lw # delete from local git push origin --delete v1.4 # delete from remote # checkout tag git checkout v1.4 # just for exploration and discarding git checkout -b version2 v1.4 Branching # creates the 'master' branch in the 'origin' repo that will be created on local git init # create a new branch (two commands) git branch new_branch_name # create git checkout new_branch_name # switch to it # create a branch (combined into single command) git checkout -b new_branch_name # create and switch git branch -vv # check tracking branches on local # example: simple flow # feature branch git checkout main # or git checkout main git fetch main git reset --hard origin/main # resets to HEAD of remote git checkout -b feature-branch # new feature branch vim index.html git commit -a -m \"create new footer\" # hotfix git checkout main git checkout -b hotfix # new hotfix branch vim index.html git commit -a -m \"fix email address\" git checkout main git merge hotfix # merge hotfix branch into main git branch -d hotfix # continue on feature branch git checkout feature-branch vim index.html git commit -a -m \"finish the new footer\" git checkout main git merge feature-branch # no merge conflict # if merge conflict, update index.html on main git add index.html git commit -m \"Final commit\" git branch -d feature-branch ##### Merge A into B git checkout B git fetch A git merge A # or git checkout B git pull A # does the fetch and merge # example: create a branch from main and push the branch to remote git pull origin main # Make sure local repo matches with remote git checkout -b <new-branch-name> # create branch and switch to it git push origin <new-branch-name> # another feature example git checkout -b feature-branch main git status git add <some-files> git commit git push -u origin my-feature # more changes git push # merge after PR git checkout main git pull git pull origin feature-branch git push # management # if you don't see all remote branches on local then run: git remote update git branch # list of current branches git branch -all git branch -a git branch -v # last commit on each branch git branch --merged # list of branches merged into the branch you're on. git branch --no-merged # list of branches you haven't yet merged in. git branch --no-merged master # list of branches not merged into the master git branch -av git branch -avv # which remote branches are linked to your local branch git remote -v # what remote branches exist # rename branch git branch --move old_branch_name new_branch_name # rename branch on local git push <remotename> <localbranchname>:<remotebranchname> git push --set-upstream origin new_branch_name # add new branch on remote git push origin --delete old_branch_name # delete old branch on remote # delete branch git branch -d my-branch # local git push <remotename> --delete <branchname> # remote # create a branch and push to remote git checkout -b my-branch # create branch and switch to it git push -u origin my-branch # push to remote # make changes, git add, git commit -m etc... # push the branch to remote for others to see git push <remotename> <branchname>:<branchname> # first time git push -u origin my-branch <can be master> # remote branches git ls-remote <remote> # list of remote branches git remote show <remote> # synchronize local from remote, will only change S, not WD git fetch <remote> git fetch origin # synchronize local from remote, change S and WD git pull # same as git fetch git merge # push branch to remote git push <remote> <local_branch> git push origin my_branch # someone else git fetch origin # will get origin/my_branch on local git checkout -b copy_of_my_branch origin/my_branch # now has a local branch # delete remote branch git push origin --delete mybranch # drop all changes in local git fetch origin # fetch latest git reset --hard origin/master # switch local master to it # replace some local changes, not everything git checkout --<filename> # copies last commit to both Staging and WD git checkout HEAD -- files # switches Working directory and Staging to last commit in HEAD git checkout HEAD # pushing local dev branch to master git push origin dev:master # update local with newest commit git pull # this does fetch and merge #merge another branch to your branch git merge <branch> # pulling a different branch to local git pull origin master:dev # rebasing - integrate changes from one branch into another # use merge or rebase which provides cleaner history Rebase There are two main ways to integrate changes from one branch into another: the merge and the rebase . The rebase offers a cleaner history, while the merge will offer full transparency. # experiment has C4 made on C2 # master has C3 made on C2 # C2 is the common ancestor git checkout experiment git rebase master # Add experiment to master on C3 # above two commands can be replaced with git rebase master experiment # merge git checkout master # new changes are on existing commit C3 git merge experiment # master + experiment are now on C4 Squash Commits Take some smaller commits and combine them into larger ones. Only do this on commits that have not been pushed to remote repo. Example: Rebase using the last 4 commits from where the HEAD is with HEAD-4 . # assume you have 4 commits on local. git rebase -i HEAD 4 # Rebase using last 4 commits from where HEAD User enters pick on first and squash on the next to combine all 4 commits into the first commit in the list. And we can enter a new commit message. Forking Entities: original repo your repo (fork of original) High-level flow: Fork the original repo and create your repo Clone your repo to your local system Add a Git remote to point to the original repo Create a feature branch in your report to place your changes Make changes to the new branch Keep your fork in sync Commit the changes to the branch Push the branch to your repo Open a pull request from the new branch to the original repo Clean up after your pull request is merged into the original rep # after forking # clone your repo to local system git clone https://your.repo.git # Add a remote called \"upstream\" pointing to original repo # Git has already added a remote \"origin\" to the clone on your local system # and this allows you to push changes back to your report on github git remote add upstream https://original.repo.git # Know that above is useful only if you can directly push from local to original repo such as git push upstream. Most likely original repo will not allow these writes. # work in a branch git checkout -b <new branch name> # assume name is \"new-feature\" # do some changes git add ... git commit ... git rebase ... # squash your commits git push origin new-feature # adds the branch to your report # keep your fork in sync git pull upstream master # pull into local from original repo git push origin master # push changes to your repo # now open a PR to original repo # original repo author accepts your changes and merges them into the main repo # update your repo with the latest from original repo git pull upstream master # delete your branch git branch -d new-feature git push origin master # push the deletion of the feature branch on your repo git push --delete origin new-feature Merging Confirm the receiving branch. # ensure HEAD is pointing to correct merge receiving branch git status git checkout <receiving> # i.e. git checkout master Make sure the receiving and the from (merging) branch have the latest commits git fetch git pull Merge now git merge <from-branch> Example of a fast-forward merge: git checkout -b new-feature master git add <files> git commit -m \"some comment\" git checkout master git merge new-feature # or git merge --no-ff new-feature git branch -d new-feature Example of a three-way merge: git checkout -b new-feature master # edit some files in new-feature git add <files> git commit -m \"some comment\" git checkout master # edit some files in master git add <files> git commit -m \"some comment\" # Merge in the new-feature branch git merge new-feature git branch -d new-feature Git Config git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com git config color.ui true git config format.pretty oneline git help config Pull Request To create a PR, you must have the changes committed to the branch. https://yangsu.github.io/pull-request-tutorial/ https://hackernoon.com/how-to-git-pr-from-the-command-line-a5b204a57ab1 File status File status: untracked , unmodified , modified , staged . untracked is a new file not in previous commit snapshot. untracked gets tracked only after add. add: moves file from untracked to staged edit: moves file from unmodified to modified add: moves file from modified to staged commit: moves file from staged to unmodified remove: moves file from unmodified to untracked Standard practice Two main branches: origin , and develop Multiple supporting branches: features , release-* , and hotfix-* # create feature branch from develop git checkout -b myfeature develop # feature is now stable and ready to move forward git checkout develop git merge --no-ff myfeature # push develop git push origin develop # pushes branch develop to remote origin git push origin dev:master # optionally pushes local branch to remote's master branch # create release branch on develop git checkout -b release-1.2 develop # release is now stable git checkout master git merge --no-ff release-1.2 git tag -a 1 .2 # the changes done in release need to be available to develop git checkout develop git merge --no-ff release-1.2 # delete release 1.2 git branch -d release-1.2 # delete on local git push origin --delete release-1.2 # delete on remote # create hotfix on master git checkout -b hotfix-1.2.1 master # do some work on hotfix git commit -a -m \"some hot fix into 1.2.1\" git checkout master git merge --no-ff hotfix-1.2.1 git tag -a 1 .2.1 git tag 1 .2.1 1b2e1d63ff # first 10 of the commit id # changes done in hotfix need to be available to develop git checkout develop git merge --no-ff hotfix-1.2.1 # delete local branch of hotfix git branch -d hotfix-1.2.1 # delete remote branch of hotfix git push origin --delete hotfix-1.2.1 Bash alias grbi - git rebase -i master git rebase -i --autosquash gcane - git commit -amend --no-edit grbc - git rebase --continue push - git push origin `git rev-parse --abbrev-ref HEAD` gll - git log --oneline --decorate gcf - git commit --fixup <commit> # ~/.gitignore_global can have .gitignore entries Reference http://marklodato.github.io/visual-git-guide/index-en.html https://hackernoon.com/git-push-and-pull-tips-and-tricks-7f9163539f02 https://ohshitgit.com/ https://git-scm.com/book/en/v2 Git Push","title":"Git"},{"location":"developer/git/#git","text":"","title":"Git"},{"location":"developer/git/#setup","text":"brew install git git --version # test ssh ssh -T git@github.com","title":"Setup"},{"location":"developer/git/#basics","text":"origin -A default remote pointer to your repo on github master - Default branch origin/master - a remote tracking branch on local. Its hidden and is supposed to stay in sync with master on remote origin . Working directory -> Staging -> Head. add updates Staging from working directory. reset overrides Staging with last commit on Head. You undo an add with a reset . checkout overwrites working directory with a copy from staging. You undo an edit with checkout .","title":"Basics"},{"location":"developer/git/#gitignore","text":"# ~/.gitignore_global can have .gitignore entries $ cat .gitignore *. [ oa ] *~ # ignore all .a files *.a # but do track lib.a, even though you're ignoring .a files above !lib.a # only ignore the TODO file in the current directory, not subdir/TODO /TODO # ignore all files in any directory named build build/ # ignore doc/notes.txt, but not doc/server/arch.txt doc/*.txt # ignore all .pdf files in the doc/ directory and any of its subdirectories doc/**/*.pdf","title":".Gitignore"},{"location":"developer/git/#working-with-local-repo","text":"# create local repo mkdir <dir> cd <dir> git init # ... make some changes # status git status -s # short version git status # shows which files changed # add git add . # or git add -A # or git add -i # interactive # commit git commit -m 'some comment' # Combine add and commit git commit -a # implicitly add files already existing in the last commit","title":"Working with Local Repo"},{"location":"developer/git/#working-with-remote","text":"Remote must exist before hand on Github. # clone a remote repo git clone <your.remote.git> <your.output.directory> # later if you need to sync local from remote git checkout main git fetch main git reset --hard origin/main # resets to HEAD of remote Connect a local repo to a remote repo: Scenario: You have an empty repo on Github, and you never cloned it. But on local you have a repo that you wish to connect to this empty repo. cd local_repo git remote add origin https://your.remote.git # link local to remote # or the below two achieve the same result git push -u origin main # first time link to remote and push to remote # git push --set-upstream origin main (not needed) Scenario: Fork someone's repo into your repo. You fork original repo to your repo You clone your repo to local. A default remote \"origin\" is created You want to add another remote to your local - lets call is upstream git remote add upstream https://original.repo.git Scenario: Create a remote branch and then use it locally # first create the remote branch named new-feature git checkout -b new-feature from-branch Scenario: Create a local branch and then push to remote # from-branch is optional. If not provided, git assumes current branch git checkout -b new-feature from-branch git branch -vv # won't show a tracking branch for new-feature # -u requires first time only git push -u origin new-feature # or.. git push -u origin HEAD git branch -vv # now shows a tracking branch for new_branch Scenario: You have a local folder dev which is not yet tracked against an existing remote branch cd dev git checkout --track origin/dev # or git branch -u origin/dev Misc commands # show remote servers configured on local git remote # by default it would show origin git remote -v git remote -vv # also include tracking branches on local git remote show <remote> # inspecting a remote # rename a remote git remote rename <old_name> <new_name> # remove a remote git remote remove <remote_to_be_removed> # use alias on git config git config --global alias.pushd \"push -u origin HEAD\" git pushd # use alias on bash alias gp = 'git push -u origin HEAD' gp # fetch and pull git fetch <remote_repo_name> # fetch and pull from remote into staging git pull # fetches and merges into working directory push works only if you cloned from a server to which you have write access and nobody has pushed in the meantime. Since remote is a moving branch, its possible that the push to include your local changes on remote may fail. Read #Checkout for more details. Here is how you address it: # Refresh the tracking branch. This is a remote tracking branch on local git fetch origin master # Integrate our changes with remote changes git rebase origin/master # The above two commands can be combined into one command git pull --rebase origin master # Finally attempt the push to remote again git push origin master","title":"Working with Remote"},{"location":"developer/git/#diff-command","text":"git diff # diff between Working directory and Staging git diff --cached # diff between Staging and HEAD git diff --staged # what's in Staging which will go to Head on next commit. This will not show all changes, only what is staged. # diff between some-branch and Working directory git diff <source_branch> <target_branch> git diff <some-branch> git diff HEAD # diff between two commits git diff first-commit last-commit","title":"Diff Command"},{"location":"developer/git/#log-command","text":"By default, git log will only show commit history of the branch you have checked out. git log # too long git log -p -2 # shows last 2 commit details git log --since = 2 .weeks # list of commits in last two weeks # you can specify \"2008-01-15\", \"2 years 1 day 3 minutes ago\" git log --stat git log --pretty = oneline # compressed log view git log --oneline --decorate # shows where the branch pointers are pointing git log --pretty = format: \"%h %s\" --graph git log --oneline --decorate --graph --all git log --pretty = format # shows format help git log --pretty = format: \"%h - %an, %ar : %s\" git log --author = bob # commits by certain author git log --graph --oneline --decorate --all # decorated git log --name-status # which files have changed git log --since = 2 .weeks # --before, --after, --until git log --since = \"2 years 1 day 3 minutes ago\" # commits but not merged git log --pretty = \"%h - %s\" --author = 'Junio C Hamano' --since = \"2008-10-01\" --before = \"2008-11-01\" --no-merges -- t","title":"Log Command"},{"location":"developer/git/#checkout-command","text":"When dealing with a branch (say, master ) copied from a remote repository (say, origin ), there are three branches one must consider: The copy of master in the local repository The copy of master in the remote repository The local branch origin/master that records the last known position of the remote branch. Branch 3 tracks (tracking branch) the remote branch, not because it is itself a remote branch, its a local copy of the remote branch. The fetch command copies branch (2) to (3). git fetch origin master The checkout command copies branch [3] to [1]. git checkout master The push command copies branch (1) to (2), and incidentally updates (3) to match with (2). git push origin master Copy files from Head or Staging to the Working Directory, and to optionally switch branches. If the commit name is provided, the files are copied from commit to staging and wd. If commit name is not provided, the files are copied from staging to wd.","title":"Checkout Command"},{"location":"developer/git/#reset-command","text":"Moves the current branch to another position, and optionally updates the stage and the working directory. It also is used to copy files from the history to the stage without touching the working directory. # default to HEAD and copies to staging, doesn't touch wd git reset # default to HEAD and copies only the mentioned files into staging, doesn't touch the wd git reset -- files # default to HEAD and copies to staging and wd git reset --head # HEAD~3 means N-3 commit. git reset HEAD~3 # copies history into staging only git reset HEAD~3 --hard # copies history into staging and wd git reset HEAD~3 --soft # simply moves the HEAD, doesn't copy to staging or wd","title":"Reset Command"},{"location":"developer/git/#remove-files","text":"To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit. The git rm command does that, and also removes the file from your working directory so you don\u2019t see it as an untracked file the next time around. rm <file> # removes untracked files or files in WD, but not in S git rm <file> # removes from staging and working directory git rm --cached FILENAME # remove from staging, retain in working directory git commit -f # file is gone git rm log/ \\* .log # removes all files with .log extension git rm \\* ~ # removes all files ending in ~","title":"Remove Files"},{"location":"developer/git/#moving-files","text":"Git does not explicitly track file movement. If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file. However, Git is pretty smart about figuring that out after the fact. git mv file_from file_to # above is equivalent to following mv file_from file_to git rm file_from git add file_to","title":"Moving Files"},{"location":"developer/git/#undo-things","text":"","title":"Undo Things"},{"location":"developer/git/#you-committed-early","text":"If you commit and then realize that you forgot to stage the changes in a file you wanted to add to this commit, you can: git commit -m 'Initial commit' # some file(s) forgotten. git add <forgotten_files> git commit --amend","title":"You committed early"},{"location":"developer/git/#unstage-a-staged-file","text":"Let\u2019s say you\u2019ve changed two files and want to commit them as two separate changes, but you accidentally type git add * and stage them both. How can you unstage one of the two? # file-a and file-b added to Staging git add * # unstage file-b git reset HEAD file-b # file-a is committed git commit -m # stage file-b git add file-b # commit file-b as a separate commit git commit -m","title":"Unstage a staged file"},{"location":"developer/git/#unmodify-a-modified-file","text":"You realize that you don\u2019t want to keep your changes to the file-b ? How can you revert it back to what it looked like when you last committed git checkout -- file-b","title":"Unmodify a modified file"},{"location":"developer/git/#undo-commits-permanently","text":"git commit ... # mistake(s) # The last three commits HEAD, HEAD-1, HEAD-2 are bad and you don't want to commit them again. git reset --hard HEAD~3 # T","title":"Undo commits permanently"},{"location":"developer/git/#undo-a-commit-and-redo","text":"git commit ... # mistake git reset --soft HEAD^ # make the edits git commit -a -c ORIG_HEAD","title":"Undo a commit and redo"},{"location":"developer/git/#squashing-commits","text":"# you are in <my-feature> git fetch origin git reset --soft origin/master # Moves HEAD to last commit of Remote git commit git push origin feature/<my-feature> -f # fix the error","title":"Squashing commits"},{"location":"developer/git/#tagging","text":"# list git tag git tag -l \"v1.8.5*\" # shows only tags with v1.8.5.* # create tag git tag -a v1.4 -m \"tag comment\" git tag # lightweigh tag, only stores checksum git tag v1.4-lw git tag git show v1.4-lw # tag a previous commit git tag -a v1.4 <some-prefix-of-commit-checksum> git tag -a v1.4 9fceb02 # push tag git push <remotename> <tagname> git push origin v1.4 # a generic git push will not push tag # delete tag git tag -d v1.4-lw # delete from local git push origin --delete v1.4 # delete from remote # checkout tag git checkout v1.4 # just for exploration and discarding git checkout -b version2 v1.4","title":"Tagging"},{"location":"developer/git/#branching","text":"# creates the 'master' branch in the 'origin' repo that will be created on local git init # create a new branch (two commands) git branch new_branch_name # create git checkout new_branch_name # switch to it # create a branch (combined into single command) git checkout -b new_branch_name # create and switch git branch -vv # check tracking branches on local # example: simple flow # feature branch git checkout main # or git checkout main git fetch main git reset --hard origin/main # resets to HEAD of remote git checkout -b feature-branch # new feature branch vim index.html git commit -a -m \"create new footer\" # hotfix git checkout main git checkout -b hotfix # new hotfix branch vim index.html git commit -a -m \"fix email address\" git checkout main git merge hotfix # merge hotfix branch into main git branch -d hotfix # continue on feature branch git checkout feature-branch vim index.html git commit -a -m \"finish the new footer\" git checkout main git merge feature-branch # no merge conflict # if merge conflict, update index.html on main git add index.html git commit -m \"Final commit\" git branch -d feature-branch ##### Merge A into B git checkout B git fetch A git merge A # or git checkout B git pull A # does the fetch and merge # example: create a branch from main and push the branch to remote git pull origin main # Make sure local repo matches with remote git checkout -b <new-branch-name> # create branch and switch to it git push origin <new-branch-name> # another feature example git checkout -b feature-branch main git status git add <some-files> git commit git push -u origin my-feature # more changes git push # merge after PR git checkout main git pull git pull origin feature-branch git push # management # if you don't see all remote branches on local then run: git remote update git branch # list of current branches git branch -all git branch -a git branch -v # last commit on each branch git branch --merged # list of branches merged into the branch you're on. git branch --no-merged # list of branches you haven't yet merged in. git branch --no-merged master # list of branches not merged into the master git branch -av git branch -avv # which remote branches are linked to your local branch git remote -v # what remote branches exist # rename branch git branch --move old_branch_name new_branch_name # rename branch on local git push <remotename> <localbranchname>:<remotebranchname> git push --set-upstream origin new_branch_name # add new branch on remote git push origin --delete old_branch_name # delete old branch on remote # delete branch git branch -d my-branch # local git push <remotename> --delete <branchname> # remote # create a branch and push to remote git checkout -b my-branch # create branch and switch to it git push -u origin my-branch # push to remote # make changes, git add, git commit -m etc... # push the branch to remote for others to see git push <remotename> <branchname>:<branchname> # first time git push -u origin my-branch <can be master> # remote branches git ls-remote <remote> # list of remote branches git remote show <remote> # synchronize local from remote, will only change S, not WD git fetch <remote> git fetch origin # synchronize local from remote, change S and WD git pull # same as git fetch git merge # push branch to remote git push <remote> <local_branch> git push origin my_branch # someone else git fetch origin # will get origin/my_branch on local git checkout -b copy_of_my_branch origin/my_branch # now has a local branch # delete remote branch git push origin --delete mybranch # drop all changes in local git fetch origin # fetch latest git reset --hard origin/master # switch local master to it # replace some local changes, not everything git checkout --<filename> # copies last commit to both Staging and WD git checkout HEAD -- files # switches Working directory and Staging to last commit in HEAD git checkout HEAD # pushing local dev branch to master git push origin dev:master # update local with newest commit git pull # this does fetch and merge #merge another branch to your branch git merge <branch> # pulling a different branch to local git pull origin master:dev # rebasing - integrate changes from one branch into another # use merge or rebase which provides cleaner history","title":"Branching"},{"location":"developer/git/#rebase","text":"There are two main ways to integrate changes from one branch into another: the merge and the rebase . The rebase offers a cleaner history, while the merge will offer full transparency. # experiment has C4 made on C2 # master has C3 made on C2 # C2 is the common ancestor git checkout experiment git rebase master # Add experiment to master on C3 # above two commands can be replaced with git rebase master experiment # merge git checkout master # new changes are on existing commit C3 git merge experiment # master + experiment are now on C4","title":"Rebase"},{"location":"developer/git/#squash-commits","text":"Take some smaller commits and combine them into larger ones. Only do this on commits that have not been pushed to remote repo. Example: Rebase using the last 4 commits from where the HEAD is with HEAD-4 . # assume you have 4 commits on local. git rebase -i HEAD 4 # Rebase using last 4 commits from where HEAD User enters pick on first and squash on the next to combine all 4 commits into the first commit in the list. And we can enter a new commit message.","title":"Squash Commits"},{"location":"developer/git/#forking","text":"Entities: original repo your repo (fork of original) High-level flow: Fork the original repo and create your repo Clone your repo to your local system Add a Git remote to point to the original repo Create a feature branch in your report to place your changes Make changes to the new branch Keep your fork in sync Commit the changes to the branch Push the branch to your repo Open a pull request from the new branch to the original repo Clean up after your pull request is merged into the original rep # after forking # clone your repo to local system git clone https://your.repo.git # Add a remote called \"upstream\" pointing to original repo # Git has already added a remote \"origin\" to the clone on your local system # and this allows you to push changes back to your report on github git remote add upstream https://original.repo.git # Know that above is useful only if you can directly push from local to original repo such as git push upstream. Most likely original repo will not allow these writes. # work in a branch git checkout -b <new branch name> # assume name is \"new-feature\" # do some changes git add ... git commit ... git rebase ... # squash your commits git push origin new-feature # adds the branch to your report # keep your fork in sync git pull upstream master # pull into local from original repo git push origin master # push changes to your repo # now open a PR to original repo # original repo author accepts your changes and merges them into the main repo # update your repo with the latest from original repo git pull upstream master # delete your branch git branch -d new-feature git push origin master # push the deletion of the feature branch on your repo git push --delete origin new-feature","title":"Forking"},{"location":"developer/git/#merging","text":"Confirm the receiving branch. # ensure HEAD is pointing to correct merge receiving branch git status git checkout <receiving> # i.e. git checkout master Make sure the receiving and the from (merging) branch have the latest commits git fetch git pull Merge now git merge <from-branch> Example of a fast-forward merge: git checkout -b new-feature master git add <files> git commit -m \"some comment\" git checkout master git merge new-feature # or git merge --no-ff new-feature git branch -d new-feature Example of a three-way merge: git checkout -b new-feature master # edit some files in new-feature git add <files> git commit -m \"some comment\" git checkout master # edit some files in master git add <files> git commit -m \"some comment\" # Merge in the new-feature branch git merge new-feature git branch -d new-feature","title":"Merging"},{"location":"developer/git/#git-config","text":"git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com git config color.ui true git config format.pretty oneline git help config","title":"Git Config"},{"location":"developer/git/#pull-request","text":"To create a PR, you must have the changes committed to the branch. https://yangsu.github.io/pull-request-tutorial/ https://hackernoon.com/how-to-git-pr-from-the-command-line-a5b204a57ab1","title":"Pull Request"},{"location":"developer/git/#file-status","text":"File status: untracked , unmodified , modified , staged . untracked is a new file not in previous commit snapshot. untracked gets tracked only after add. add: moves file from untracked to staged edit: moves file from unmodified to modified add: moves file from modified to staged commit: moves file from staged to unmodified remove: moves file from unmodified to untracked","title":"File status"},{"location":"developer/git/#standard-practice","text":"Two main branches: origin , and develop Multiple supporting branches: features , release-* , and hotfix-* # create feature branch from develop git checkout -b myfeature develop # feature is now stable and ready to move forward git checkout develop git merge --no-ff myfeature # push develop git push origin develop # pushes branch develop to remote origin git push origin dev:master # optionally pushes local branch to remote's master branch # create release branch on develop git checkout -b release-1.2 develop # release is now stable git checkout master git merge --no-ff release-1.2 git tag -a 1 .2 # the changes done in release need to be available to develop git checkout develop git merge --no-ff release-1.2 # delete release 1.2 git branch -d release-1.2 # delete on local git push origin --delete release-1.2 # delete on remote # create hotfix on master git checkout -b hotfix-1.2.1 master # do some work on hotfix git commit -a -m \"some hot fix into 1.2.1\" git checkout master git merge --no-ff hotfix-1.2.1 git tag -a 1 .2.1 git tag 1 .2.1 1b2e1d63ff # first 10 of the commit id # changes done in hotfix need to be available to develop git checkout develop git merge --no-ff hotfix-1.2.1 # delete local branch of hotfix git branch -d hotfix-1.2.1 # delete remote branch of hotfix git push origin --delete hotfix-1.2.1","title":"Standard practice"},{"location":"developer/git/#bash-alias","text":"grbi - git rebase -i master git rebase -i --autosquash gcane - git commit -amend --no-edit grbc - git rebase --continue push - git push origin `git rev-parse --abbrev-ref HEAD` gll - git log --oneline --decorate gcf - git commit --fixup <commit> # ~/.gitignore_global can have .gitignore entries","title":"Bash alias"},{"location":"developer/git/#reference","text":"http://marklodato.github.io/visual-git-guide/index-en.html https://hackernoon.com/git-push-and-pull-tips-and-tricks-7f9163539f02 https://ohshitgit.com/ https://git-scm.com/book/en/v2 Git Push","title":"Reference"},{"location":"developer/gradle/","text":"Gradle Install #install java brew install adoptopenjdk11 java -v #install gradle brew install gradle gradle -v # view deprecated versions gradle help --scan # upgrade gradle wrapper --gradle-version 7 .1.1 Java Application https://docs.gradle.org/7.1.1/samples/sample_building_java_applications.html # create gradle project mkdir demo cd demo gradle init # test ./gradlew check # run ./gradlew run # bundle ./gradlew build # build scan ./gradlew build --scan # find tasks gradle tasks #learn more of tasks gradle help --task <taskname> # run a task gradle <taskname> # view structure of multi-project build gradle -q projects Java Custom Task as CLI plugins { java } repositories { mavenCentral () } java { sourceCompatibility = org . gradle . api . JavaVersion . VERSION_1_8 targetCompatibility = org . gradle . api . JavaVersion . VERSION_1_8 } dependencies { implementation ( \"io.vertx:vertx-core:3.8.0\" ) implementation ( \"ch.qos.logback:logback-classic:1.2.3\" ) testImplementation ( \"junit:junit:4.13\" ) } tasks . create < JavaExec > ( \"run\" ) { main = project . properties . getOrDefault ( \"mainClass\" , \"chapter2.hello.Deployer\" ) as String classpath = sourceSets [ \"main\" ] . runtimeClasspath systemProperties [ \"vertx.logger-delegate-factory-class-name\" ] = \"io.vertx.core.logging.SLF4JLogDelegateFactory\" } ./gradlew run -PmainClass = chapter2.hello.HelloVerticle Reference https://docs.gradle.org/7.1.1/samples/index.html https://spring.io/guides/gs/gradle/ https://gradle-initializr.cleverapps.io/ https://github.com/gradle/kotlin-dsl-samples","title":"Gradle"},{"location":"developer/gradle/#gradle","text":"","title":"Gradle"},{"location":"developer/gradle/#install","text":"#install java brew install adoptopenjdk11 java -v #install gradle brew install gradle gradle -v # view deprecated versions gradle help --scan # upgrade gradle wrapper --gradle-version 7 .1.1","title":"Install"},{"location":"developer/gradle/#java-application","text":"https://docs.gradle.org/7.1.1/samples/sample_building_java_applications.html # create gradle project mkdir demo cd demo gradle init # test ./gradlew check # run ./gradlew run # bundle ./gradlew build # build scan ./gradlew build --scan # find tasks gradle tasks #learn more of tasks gradle help --task <taskname> # run a task gradle <taskname> # view structure of multi-project build gradle -q projects","title":"Java Application"},{"location":"developer/gradle/#java-custom-task-as-cli","text":"plugins { java } repositories { mavenCentral () } java { sourceCompatibility = org . gradle . api . JavaVersion . VERSION_1_8 targetCompatibility = org . gradle . api . JavaVersion . VERSION_1_8 } dependencies { implementation ( \"io.vertx:vertx-core:3.8.0\" ) implementation ( \"ch.qos.logback:logback-classic:1.2.3\" ) testImplementation ( \"junit:junit:4.13\" ) } tasks . create < JavaExec > ( \"run\" ) { main = project . properties . getOrDefault ( \"mainClass\" , \"chapter2.hello.Deployer\" ) as String classpath = sourceSets [ \"main\" ] . runtimeClasspath systemProperties [ \"vertx.logger-delegate-factory-class-name\" ] = \"io.vertx.core.logging.SLF4JLogDelegateFactory\" } ./gradlew run -PmainClass = chapter2.hello.HelloVerticle","title":"Java Custom Task as CLI"},{"location":"developer/gradle/#reference","text":"https://docs.gradle.org/7.1.1/samples/index.html https://spring.io/guides/gs/gradle/ https://gradle-initializr.cleverapps.io/ https://github.com/gradle/kotlin-dsl-samples","title":"Reference"},{"location":"developer/maven/","text":"Maven Generating project # oh-my-zsh mvnag mvn archetype:generate -B -DarchetypeGroupId = org.apache.maven.archetypes -DarchetypeArtifactId = maven-archetype-quickstart -DarchetypeVersion = 1 .1 -DgroupId = org.deliwala -DartifactId = sample-project -DVersion = 0 .1-SNAPSHOT # or shorter mvn archetype:generate -B -DgroupId = org.deliwala -DartifactId = sample-project -Dversion = 0 .0.1 -DarchetypeArtifactId = maven-archetype-quickstart # quiet mode mvn -q clean package # verbose mode mvn -X clean package Compiler option mvn compile <plugin> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> </configuration> </plugin> Skipping test Using surefire plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.19.1 </version> <configuration> <skipTests> true </skipTests> </configuration> </plugin> <!-- or --> <properties> <maven.test.skip> true </maven.test.skip> </properties> $ mvn -q clean package -DskipTests $ mvn -q clean package -Dmaven.test.skip = true Generating fat-jar as executable Three approaches explained: $ mvn clean package $ java -jar <outputfolder>/some-fat.jar With maven assembly plugin, all dependencies are inside the jar file. The drawback is the plugin does not support renaming packages (shade plugin fixes that). <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-assembly-plugin </artifactId> <configuration> <archive> <manifest> <mainClass> some.package.Class </mainClass> </manifest> </archive> <descriptorRefs> <descriptorRef> jar-with-dependencies </descriptorRef> </descriptorRefs> </configuration> <executions> <execution> <id> make-assembly </id> <phase> package </phase> <goals> <goal> single </goal> </goals> </execution> </executions> </plugin> With shade plugin, package in an uber-jar to include all dependencies and optionally shade i.e. renaming the packages of some dependencies. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> </execution> <configuration> <shadedArtifactAttached> true </shadedArtifactAttached> <!-- default is <project-name>-<version>-shaded.jar --> <finalName> user-${artifactId}-${version} </finalName> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <mainClass> some.package.Class </mainClass> <build-Number> 123 </buildNumber> </transformer> </transformers> <filters> <filter> <artifact> *:* </artifact> <excludes> <exclude> META-INF/*.SF </exclude> <exclude> META-INF/*.DSA </exclude> <exclude> META-INF/*.RSA </exclude> </excludes> </filter> </filters> </configuration> </executions> </plugin> Use a two step process with the maven dependency plugin to create jar by copying all dependencies into /libs folder and then using the maven jar plugin to create executable and classpath-aware jar with the link to the dependencies from the maven dependency plugin. These approach does not create a fat jar, instead the executable jar will only run if the /libs folder will be accessible for a jar. <packaging> jar </packaging> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <version> ... </version> <executions> <execution> <id> copy-dependencies </id> <phase> prepare-package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/libs </outputDirectory> <excludeArtfiacts> junit </excludeArtfiacts> <overWriteIfNew> true </overWriteIfNew> </configuration> configuration> </execution> </executions> </plugin> then use the maven jar plugin <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> ... </version> <configuration> <archive> <manifest> <addDefaultImplementationEntries> true </addDefaultImplementationEntries> <addDefaultSpecificationEntries> true </addDefaultSpecificationEntries> <addClasspath> true </addClasspath> <classpathPrefix> libs/ </classpathPrefix> <mainClass> some.package.App </mainClass> </manifest> </archive> </configuration> </plugin> Executing program in mvn exec:java Class provided in command line <!-- exec:java -D<args> --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <!-- no configuration, class injected from command line --> </plugin> Class provided in pom mvn exec:exec <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <configuration> <mainClass> org.some.package.MainClass </mainClass> </configuration> </plugin> exec:java@App1 Wire multiple main classes mvn exec:java@App1 mvn exec:java@App2 <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> App1 </id> <configuration> <mainClass> org.some.package.MainClass1 </mainClass> </configuration> </execution> <execution> <id> App2 </id> <configuration> <mainClass> org.some.package.MainClass2 </mainClass> </configuration> </execution> </executions> </plugin> Alternatively mvn exec:exec@run-app <!-- or 3. using exec:java or exec:exec@run-app --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> run-app </id> <goals> <goal> exec </goal> </goals> <configuration> <executable> java </executable> <arguments> <argument> -jar </argument> <argument> target/${project.artifactId}-${project.version}-fat.jar </argument> </arguments> </configuration> </execution> </executions> </plugin> exec:exec <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <configuration> <executable> java </executable> <arguments> <argument> -classpath </argument> <classpath /> <argument> ${mainClass} </argument> <argument> ${port} </argument> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> ${args} </argument> </arguments> </configuration> </plugin> <properties> <mainClass> some.package.Class </mainClass> <port> 8080 </port> <args> ... </args> </properties> exec:exec@App <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> App1 </id> <configuration> <executable> java </executable> <arguments> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> -classpath </argument> <classpath /> <argument> org.some.package.App1 </argument> <argument> ${args} </argument> </arguments> </configuration> </execution> <execution> <id> App2 </id> <configuration> <executable> java </executable> <arguments> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> -classpath </argument> <classpath /> <argument> org.some.package.App2 </argument> <argument> ${args} </argument> </arguments> </configuration> </execution> </executions> </plugin> Examples # some examples run the program in the same jvm that loaded mvn. # Example 1 $ mvn exec:java -Dexec.mainClass = \"org.some.package.MainClass\" -Dexec.args = \"arg1 arg2\" # Example 2 $ mvn exec:java -Dexec.args = \"arg1 arg2\" $ mvn exec:java@App1 $ mvn exec:java@App2 # Example 3 $ mvn exec:java -Dexec.args = \"arg1 arg2\" $ mvn exec:exec@run-app $ mvn exec:exec $ mvn exec:exec@App1 Using profile $ mvn -P<some-profile-name> <profiles> <profile> <id> some-profile-name </id> <build> <plugins> <plugin> ... </plugin> </plugins> </build> <properties> ... </properties> </profile> </profiles> Using Vertx embedded Vertx is embedded inside the program rather than used via verticle. <properties> <!-- the main class --> <exec.mainClass> io.vertx.example.HelloWorldEmbedded </exec.mainClass> </properties> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> <configuration> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <manifestEntries> <Main-Class> ${exec.mainClass} </Main-Class> </manifestEntries> </transformer> <transformer implementation= \"org.apache.maven.plugins.shade.resource.AppendingTransformer\" > <resource> META-INF/services/io.vertx.core.spi.VerticleFactory </resource> </transformer> </transformers> <artifactSet> </artifactSet> <outputFile> ${project.build.directory}/${project.artifactId}-${project.version}-fat.jar </outputFile> </configuration> </execution> </executions> </plugin> Using Vertx verticle <properties> <!-- the main verticle class name --> <main.verticle> io.vertx.example.HelloWorldVerticle </main.verticle> </properties> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> <configuration> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <manifestEntries> <Main-Class> io.vertx.core.Launcher </Main-Class> <Main-Verticle> ${main.verticle} </Main-Verticle> </manifestEntries> </transformer> <transformer implementation= \"org.apache.maven.plugins.shade.resource.AppendingTransformer\" > <resource> META-INF/services/io.vertx.core.spi.VerticleFactory </resource> </transformer> </transformers> <artifactSet> </artifactSet> <outputFile> ${project.build.directory}/${project.artifactId}-${project.version}-fat.jar </outputFile> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.4.0 </version> <executions> <execution> <id> run </id> <goals> <goal> java </goal> </goals> <configuration> <mainClass> io.vertx.core.Launcher </mainClass> <arguments> <argument> run </argument> <argument> ${main.verticle} </argument> </arguments> </configuration> </execution> <execution> <id> run-app </id> <goals> <goal> exec </goal> </goals> <configuration> <executable> java </executable> <arguments> <argument> -jar </argument> <argument> target/${project.artifactId}-${project.version}-fat.jar </argument> </arguments> </configuration> </execution> </executions> </plugin> Using Vertx maven service factory May not be recommended, as code depends on maven service factory. # running the verticle # pom for my-verticle has minimal settings $ vertx run maven:io.vertx:maven-service-factory-verticle:3.8.1::my-verticle # running the API to deploy the verticle $ vertx run io.vertx.examples.MyDeployingVerticle -cp target/maven-service-factory-api-3.8.1.jar <!-- for the API project --> <dependency> <groupId> io.vertx </groupId> <artifactId> vertx-maven-service-factory </artifactId> <version> ${project.version} </version> <classifier> shaded </classifier> </dependency> Plugins Overview https://www.baeldung.com/maven maven-resource-plugin Copy resources to an output folder. It allows us to keep main and test resources separate in the project, and only use the main resources for the deployment purposes. https://www.baeldung.com/maven-resources-plugin <configuration> <outputDirectory> output-resources </outputDirectory> <resources> <resource> <directory> input-resources </directory> <excludes> <exclude> *.png </exclude> </excludes> <filtering> true </filtering> <!-- helps replace parameters in files --> </resource> </resources> </configuration> # copies all files except *.png from /input-resources to /output-resources mvn resources:resources # resources goal is bound to process-resource phase mvn process-resources Replace property placeholders with values <properties> <resources.name>Baeldung</resources.name> </properties> Welcome to ${resources.name}! maven-checkstyle-plugin Two pre-defined checkstyles: https://github.com/checkstyle/checkstyle/tree/master/src/main/resources https://www.baeldung.com/checkstyle-java <reporting> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> ... </version> <configuration> <configLocation> checkstyle.xml </configLocation> <logViolationsToConsole> true </logViolationsToConsole> <skip> false </skip> </configuration> <executions> <execution> <goals> <goal> check </goal> <!-- run in verify phase of build --> </goals> </execution> </executions> </plugin> </plugins> </reporting> # runs checkstyle automatically mvn clean install # doesn't need the execution xml block in pom mvn checkstyle:check maven-compiler-plugin Plugin has two goals: compile and testCompile <configuration> <source> 1.8 </source> <target> 1.8 </target> <!-- pass to javac --> <compilerArgs> <arg> -Xlint:unchecked </arg> </compilerArgs> </configuration> <!-- or --> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> mvn compile mvn test-compile maven-dependency-plugin Provides goals to work with dependencies like copying, unpacking, analyzing, resolving and many more. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> copy-dependencies </id> <phase> prepare-package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/libs </outputDirectory> </configuration> </execution> </executions> </plugin> We specify the goal copy-dependencies , which tells Maven to copy dependencies into the specified outputDirectory , in this case /libs . https://crunchify.com/how-to-create-build-java-project-including-all-dependencies-using-maven-maven-resources-maven-dependency-maven-jar-plugin-tutorial/ https://www.baeldung.com/maven-dependency-latest-version <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <version> 3.1.1 </version> <executions> <execution> <id> dependency-analyze </id> <phase> package </phase> <goals> <goal> analyze </goal> </goals> <configuration> <failOnWarning> true </failOnWarning> <ignoreNonCompile> true </ignoreNonCompile> <ignoredDependencies> true </ignoredDependencies> <outputXML> true </outputXML> <ignoredUnusedDeclaredDependencies> <ignoredUnusedDeclaredDependency> commons-io:commons-io:jar:* </ignoredUnusedDeclaredDependency> </ignoredUnusedDeclaredDependencies> <ignoredUsedUndeclaredDependencies> <ignoredUsedUndeclaredDependency> org.apache.httpcomponents:httpcore:jar:* </ignoredUsedUndeclaredDependency> </ignoredUsedUndeclaredDependencies> </configuration> </execution> <execution> <phase> validate </phase> <goals> <goal> copy </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/endorsed </outputDirectory> <silent> true </silent> <artifactItems> <artifactItem> <groupId> javax </groupId> <artifactId> javaee-endorsed-api </artifactId> <version> 6.0 </version> <type> jar </type> </artifactItem> </artifactItems> </configuration> </execution> </executions> </plugin> mvn dependency:help mvn dependency:help -Ddetail = true -Dgoal = analyze mvn help:describe -Dplugin = \"org.apache.maven.plugins:maven-dependency-plugin\" mvn help:describe -Dplugin = \"org.apache.maven.plugins:maven-dependency-plugin\" -Ddetail = true -Dgoal = analyze mvn dependency:analyze mvn dependency:resolve mvn dependency:tree mvn dependency:purge-local-repository maven-jar-plugin This plugin provides the capability to build and sign jars. It compiles the java files under src/main/java and /src/main/resources/ and it doesn't include the dependencies JAR files . <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <configuration> <archive> <manifest> <addClasspath> true </addClasspath> <classpathPrefix> libs/ </classpathPrefix> <mainClass> com.some.main.Class </mainClass> </manifest> </archive> </configuration> </plugin> In the manifest configuration we add a classpath, with all dependencies (* libs/ ), and provide the information about the fully qualified named of the main class. The advantages and disadvantages of this approach are: pros \u2013 transparent process cons \u2013 manual, dependencies are outside of the final jar , so the executable jar will only run if the libs folder will be accessible and visible to the jar maven-assembly-plugin The assembly plugin allows to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single, runnable package. Plugin extracts dependency jars into raw classes, and group it together. It can also be build an executable jar by specifying the main class. It works best in project with less dependencies only. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-assembly-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> single </goal> </goals> <configuration> <archive> <manifest> <mainClass> com.baeldung.executable.ExecutableMavenJar </mainClass> </manifest> </archive> <descriptorRefs> <descriptorRef> jar-with-dependencies </descriptorRef> </descriptorRefs> </configuration> </execution> </executions> </plugin> We need to provide the information about the main class and the plugin will automatically copy all required dependencies into a jar file. In the descriptorRefs part , we provided the name, that will be added to the project name. Output in our example will be named as whatever-with-dependencies.jar. pros \u2013 dependencies inside the jar file cons \u2013 basic control of packaging your artifact, for example, there is no class relocation support maven-shade-plugin When to use maven jar, assembly, and shade plugin It packages all dependencies into one uber-jar. It can also build an executable jar by specifying the main class. This plugin is useful as it merges content of specific files instead of overwriting them by Relocating Classes . This is needed when there are resource files that have the same name across the jars and the plugin tries to package all the resource files. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <goals> <goal> shade </goal> </goals> <configuration> <shadedArtifactAttached> true </shadedArtifactAttached> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <mainClass> com.baeldung.executable.ExecutableMavenJar </mainClass> </transformer> </transformers> <createDependencyReducedPom> false </createDependencyReducedPom> </configuration> </execution> </executions> </plugin> There are three main parts of this configuration: First, marks all dependencies to be packaged into the jar . Second, the transformer implementation ; we used the standard one in our example. Finally, specify the main class of our application. The output file will be named whatever-0.1.0-SNAPSHOT-shaded.jar . pros \u2013 dependencies inside the jar file, advanced control of packaging, with shading and class relocation cons \u2013 complex configuration If the uber JAR is used as a dependency of some other project, directly including classes from the artifact's dependencies in the uber JAR can cause class loading conflicts due to duplicate classes on the class path. To address this issue, one can relocate the classes which get included in the shaded artifact in order to create a private copy of their bytecode: <!-- a vesion that specifies excludes --> <configuration> <relocations> <relocation> <pattern> org.codehaus.plexus.util </pattern> <shadedPattern> org.shaded.plexus.util </shadedPattern> <excludes> <exclude> org.codehaus.plexus.util.xml.Xpp3Dom </exclude> <exclude> org.codehaus.plexus.util.xml.pull.* </exclude> </excludes> </relocation> </relocations> </configuration> <!-- a narrower version that specifies includes --> <relocation> <pattern> org.codehaus.plexus.util </pattern> <shadedPattern> org.shaded.plexus.util </shadedPattern> <includes> <include> org.codehaud.plexus.util.io.* </include> </includes> </relocation> The above instructs the plugin to move classes of the package org.codehaus.plexus.util and its subpackages into the package org.shaded.plexus.util by moving the corresponding JAR file entries and rewritting the affected bytecode. The class Xpp3Dom and some others will remain in their original package. maven-install-plugin (local repo) We\u2019ll add the artifact in source control and install it locally before the build process needs it. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-install-plugin </artifactId> <version> 2.5.1 </version> <configuration> <groupId> org.somegroup </groupId> <artifactId> someartifact </artifactId> <version> 1.0 </version> <packaging> jar </packaging> <file> ${basedir}/dependencies/someartifact-1.0.jar </file> <!-- if pom is not required --> <generatePom> true </generatePom> <!-- or if pom is provided --> <generatePom> false </generatePom> <pomFile> ${basedir}/dependencies/someartifact-1.0.pom </pomFile> <!-- done --> </configuration> <executions> <execution> <id> install-jar-lib </id> <goals> <goal> install-file </goal> </goals> <phase> validate </phase> </execution> </executions> </plugin> The Artifact is defined in the element. Next part defines the packaging of the artifact as jar . Next, we provide the location of the actual jar file to be installed \u2013 this can be an absolute file path or relative, using the properties available in Maven . In this case, the ${basedir} property represents the root of the project, namely the location where the pom.xml file exists. This means that the someartifact-1.0.jar file needs to be placed in a /dependencies/ directory under the root. Finally, there are several other optional details that can be configured as well. To execute, run the following two commands. mvn validate mvn clean install The setting depends on whether we need to supply a pom.xml file for the artifact or not - which depends on the runtime dependencies of the artifact itself. If the artifact has runtime dependencies on other jars, those jars will need to be present on the classpath at runtime as well. With a simple artifact that should not be a problem, as it will likely have no dependencies at runtime. If the artifact is complex and if dependencies are not already in the classpath, they must be added. One way to do that is by defining these new dependencies manually in the pom file of the project. A better solution is to provide a custom pom.xml file along with the installed artifact: This will allow Maven to resolve all dependencies of the artifact defined in this custom pom.xml , without having to define them manually in the main pom file of the project. maven-deploy-plugin (nexus repo) Deprecated, use nexus-staging-maven-plugin instead. Deploy the artifacts of a project to Nexus . <distributionManagement> <snapshotRepository> <id> nexus-snapshots </id> <url> http://localhost:8081/nexus/content/repositories/snapshots </url> </snapshotRepository> </distributionManagement> <plugin> <artifactId> maven-deploy-plugin </artifactId> <version> 2.8.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> </plugin> nexus-staging-maven-plugin The maven-deploy-plugin is a viable option to handle the task of deploying to artifacts of a project to Nexus, but it was not built to take full advantage of Nexus and Sonatype built a Nexus specific plugin \u2013 the nexus-staging-maven-plugin . So we first need to disable the default deploy plugin. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-deploy-plugin </artifactId> <version> ${maven-deploy-plugin.version} </version> <configuration> <skip> true </skip> </configuration> </plugin> <plugin> <groupId> org.sonatype.plugins </groupId> <artifactId> nexus-staging-maven-plugin </artifactId> <version> 1.5.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> <configuration> <serverId> nexus </serverId> <nexusUrl> http://localhost:8081/nexus/ </nexusUrl> <skipStaging> true </skipStaging> </configuration> </plugin> Since we do not need staging functionality of -SNAPSHOT artifacts to Nexus, we disable using the element. By default, the deploy goal includes the staging workflow, which is recommended for release builds. mvn clean deploy -Dmaven.test.skip = true maven-release-plugin https://www.baeldung.com/maven-release-nexus Plugin tags the code in the source control and hence requires the SCM section. Read more: https://javarevisited.blogspot.com/2016/10/difference-between-mvn-install-release-and-deploy-in-Maven.html#ixzz6OcYjDpgI We'll configure the Release Process with Maven \u2013 both in the pom of the project as well as in a Jenkins job. The Release process will interact with the Source Control of the project \u2013 this means we first need to define the element in our pom.xml : <!-- define the repo --> <distributionManagement> <repository> <id> nexus-releases </id> <url> http://localhost:8081/nexus/content/repositories/releases </url> </repository> </distributionManagement> <!-- define the source control --> <scm> <connection> scm:git:https://github.com/user/project.git </connection> <url> http://github.com/user/project </url> <developerConnection> scm:git:https://github.com/user/project.git </developerConnection> </scm> <!-- or using git protocol --> <scm> <connection> scm:git:git@github.com:user/project.git </connection> <url> scm:git:git@github.com:user/project.git </url> <developerConnection> scm:git:git@github.com:user/project.git </developerConnection> </scm> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-release-plugin </artifactId> <version> 2.4.2 </version> <configuration> <tagNameFormat> v@{project.version} </tagNameFormat> <autoVersionSubmodules> true </autoVersionSubmodules> <releaseProfiles> releases </releaseProfiles> </configuration> </plugin> <profiles> <profile> <id> releases </id> <build> <plugins> <plugin> <groupId> org.sonatype.plugins </groupId> <artifactId> nexus-staging-maven-plugin </artifactId> <version> 1.5.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> <configuration> <serverId> nexus-releases </serverId> <nexusUrl> http://localhost:8081/nexus/ </nexusUrl> <skipStaging> true </skipStaging> </configuration> </plugin> </plugins> </build> </profile> </profiles> The releaseProfiles configuration will force a Maven's releases profile to become active during the Release process. mvn release:prepare -DdryRun = true mvn release:clean mvn release ; prepare mvn release:perform mvn release:rollback mvn release:prepare currently POM contains 0.1-SNAPSHOT . performs checks, no dependencies should be SNAPSHOT . update the version in the pom to a major version and remove the SNAPSHOT . POM will now have 0.1 . run tests, commit and push the changes create a tag from the non-SNAPSHOT versioned code. Update the pom and increase the major version and add back the SNAPSHOT . The POM will now have 0.2-SNAPSHOT . commit and push the changes. mvn release:prepare checkout the release tag - the pom here container 0.1 . build and deploy released code Release using Jenkins Jenkins can perform the release process in one of two ways \u2013 it can either use it's own release plugins, or it can simply run perform the release with a standard maven job running the correct release steps. We\u201dll define two parameters: releaseVersion=0.1 and developmentVersion=0.2-SNAPSHOT . Release:Clean release:prepare release:perform -DreleaseVersion = ${ releaseVersion } -DdevelopmentVersion = ${ developmentVersion } maven-surefile-plugin We can run the tests of a project using the *surefire* plugin. By default, this plugin generates XML reports in the directory target/surefire-reports . <plugin> <artifactId> maven-surefire-plugin </artifactId> <version> 2.21.0 </version> <configuration> <excludes> <exclude> DataTest.java </exclude> </excludes> <includes> <include> DataCheck.java </include> </includes> </configuration> </plugin> maven-failsafe-plugin The failsafe plugin is used for integration tests of a project. It has two goals: integration-test \u2013 run integration tests; this goal is bound to the integration-test phase by default verify \u2013 verify that the integration tests passed; this goal is bound to the verify phase by default A test failure in the *integration-test* phase doesn't fail the build, allowing the phase *post-integration-test* to execute, where clean-up operations are performed. Failed tests, if any, are only reported during the verify phase, after the integration test environment has been torn down properly. <plugin> <artifactId> maven-failsafe-plugin </artifactId> <version> 2.21.0 </version> <executions> <execution> <goals> <goal> integration-test </goal> <goal> verify </goal> </goals> <configuration> ... </configuration> </execution> </executions> </plugin> maven-clean-plugin The clean plugin is already included in the super POM and cleans the files and directories generated during the previous build. By default, the plugin removes the target directory. <plugin> <artifactId> maven-clean-plugin </artifactId> <version> 3.0.0 </version> <configuration> <skip> false </skip> <!-- to skip use true --> <filesets> <fileset> <directory> output-resources </directory> </fileset> </filesets> </configuration> <executions> <execution> <id> auto-clean </id> <phase> initialize </phase> <goals> <goal> clean </goal> </goals> </execution> </executions> </plugin> maven-verifier-plugin Verifies the existence or non-existence of files and directories, optionally checking file content against a regular expression. The verifier plugin is triggered only if it's explicitly added to the pom.xml : <plugin> <artifactId> maven-verifier-plugin </artifactId> <version> 1.1 </version> <configuration> <verificationFile> input-resources/verifications.xml </verificationFile> </configuration> <executions> <execution> <goals> <goal> verify </goal> </goals> </execution> </executions> </plugin> The default location of the verification file is src/test/verifier/verifications.xml . <verifications xmlns= \"http://maven.apache.org/verifications/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/verifications/1.0.0 http://maven.apache.org/xsd/verifications-1.0.0.xsd\" > <files> <file> <location> input-resources/baeldung.txt </location> <contains> Welcome </contains> </file> </files> </verifications> maven-site-plugin The plugin is already included in the super POM, and has two phases bound to goals of the site plugin by default: site \u2013 generate a site for a single project; the generated site only shows information about the artifacts specified in the POM deploy \u2013 deploy the generated site to the URL specified in the distributionManagement element of the POM In addition to site and deploy , the site plugin has several other goals to customize the content of the generated files and to control the deployment process. mvn site:site # or mvn site maven-pmd-plugin Plugin is a static code analyzer, and the report is generated using the maven-site-plugin. <reporting> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-pmd-plugin </artifactId> <version> 3.11.0 </version> </plugin> </plugins> </reporting> findbugs-maven-plugin Another static code analyzer, available on IDE as well. <reporting> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> findbugs-maven-plugin </artifactId> <version> 3.0.4 </version> </plugin> </plugins> </reporting> <!-- fail under some condition --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> findbugs-maven-plugin </artifactId> <version> 3.0.4 </version> <configuration> <effort> Max </effort> <!-- or custom --> <onlyAnalyze> org.baeldung.web.controller.* </onlyAnalyze> <omitVisitors> FindNullDeref </omitVisitors> <visitors> FindReturnRef </visitors> </configuration> <executions> <execution> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> mvn verify cobertura-maven-plugin For code coverage. jacoco recommended over cobertura. <reporting> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> cobertura-maven-plugin </artifactId> <version> 2.7 </version> </plugin> </plugins> </reporting> <!-- include or exclude certain classes --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> cobertura-maven-plugin </artifactId> <version> 2.7 </version> <configuration> <instrumentation> <ignores> <ignore> com/some/needed/package/* </ignore> </ignores> <excludes> <exclude> com/some/ignore/package/* </exclude> </excludes> </instrumentation> </configuration> </plugin> <!-- tolerance setting --> <configuration> <check> <haltOnFailure> true </haltOnFailure> <branchRate> 75 </branchRate> <lineRate> 85 </lineRate> <totalBranchRate> 75 </totalBranchRate> <totalLineRate> 85 </totalLineRate> <packageLineRate> 75 </packageLineRate> <packageBranchRate> 85 </packageBranchRate> <regexes> <regex> <pattern> com.some.needed.package.* </pattern> <branchRate> 60 </branchRate> <lineRate> 50 </lineRate> </regex> </regexes> </check> </configuration> jacoco-maven-plugin For code coverage <plugin> <groupId> org.jacoco </groupId> <artifactId> jacoco-maven-plugin </artifactId> <version> 0.7.7.201606060606 </version> <executions> <execution> <goals> <goal> prepare-agent </goal> </goals> </execution> <execution> <id> report </id> <phase> prepare-package </phase> <goals> <goal> report </goal> </goals> </execution> </executions> </plugin> <!-- tolerance --> <execution> <id> jacoco-check </id> <goals> <goal> check </goal> </goals> <configuration> <rules> <rule> <element> PACKAGE </element> <limits> <limit> <counter> LINE </counter> <value> COVEREDRATIO </value> <minimum> 0.50 </minimum> </limit> </limits> </rule> </rules> </configuration> </execution> mvn clean verify maven-project-info-reports-plugin Generate reports information about the project. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-project-info-reports-plugin </artifactId> <version> 3.0.0 </version> <reportSets> <reportSet> <reports> <report> dependencies </report> <report> project-team </report> <report> license </report> </reports> </reportSet> </reportSets> </plugin> versions-maven-plugin <build> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> versions-maven-plugin </artifactId> <version> 2.7 </version> <configuration> <excludes> <exclude> org.apache.commons:commons-collections4 </exclude> </excludes> </configuration> </plugin> </plugins> </build> mvn versions:display-dependency-updates hibernate-ehcache Second-level cache. https://www.baeldung.com/hibernate-second-level-cache Provider net.sf.ehcache <dependency> <groupId> org.hibernate </groupId> <artifactId> hibernate-ehcache </artifactId> <version> 5.2.2.Final </version> </dependency> Pending hibernate-annotations org.jasypt - http://www.jasypt.org/ openpojo - https://github.com/OpenPojo/openpojo commons-codec org.ehcache google-http-client - https://github.com/googleapis/google-http-java-client Mockito-core - https://www.baeldung.com/mockito-core-vs-mockito-all mockito-junit-jupiter jaxb2-maven-plugin jaxws-maven-plugin build-helper-maven-plugin Swagger-maven-plugin gson json-simple swagger-annotations org.apache.commons::commons-math3 joda-time::joda-time org.json::json jackson-core jackson-databind netty-all resteasy-jackson-provider resteasy-jettison-provider resteasy-jaxb-provider resteasy-jaxrs resteasy-spring Reference https://maven.apache.org/index.html https://mincong-h.github.io/series/maven-plugins/ https://www.baeldung.com/executable-jar-with-maven https://github.com/vert-x3/vertx-stack https://reactiverse.io/vertx-maven-plugin/ https://github.com/reactiverse/vertx-maven-plugin https://github.com/vert-x3/vertx-examples","title":"Maven"},{"location":"developer/maven/#maven","text":"","title":"Maven"},{"location":"developer/maven/#generating-project","text":"# oh-my-zsh mvnag mvn archetype:generate -B -DarchetypeGroupId = org.apache.maven.archetypes -DarchetypeArtifactId = maven-archetype-quickstart -DarchetypeVersion = 1 .1 -DgroupId = org.deliwala -DartifactId = sample-project -DVersion = 0 .1-SNAPSHOT # or shorter mvn archetype:generate -B -DgroupId = org.deliwala -DartifactId = sample-project -Dversion = 0 .0.1 -DarchetypeArtifactId = maven-archetype-quickstart # quiet mode mvn -q clean package # verbose mode mvn -X clean package","title":"Generating project"},{"location":"developer/maven/#compiler-option","text":"mvn compile <plugin> <artifactId> maven-compiler-plugin </artifactId> <version> 3.1 </version> <configuration> <source> 1.8 </source> <target> 1.8 </target> </configuration> </plugin>","title":"Compiler option"},{"location":"developer/maven/#skipping-test","text":"Using surefire plugin: <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-surefire-plugin </artifactId> <version> 2.19.1 </version> <configuration> <skipTests> true </skipTests> </configuration> </plugin> <!-- or --> <properties> <maven.test.skip> true </maven.test.skip> </properties> $ mvn -q clean package -DskipTests $ mvn -q clean package -Dmaven.test.skip = true","title":"Skipping test"},{"location":"developer/maven/#generating-fat-jar-as-executable","text":"Three approaches explained: $ mvn clean package $ java -jar <outputfolder>/some-fat.jar With maven assembly plugin, all dependencies are inside the jar file. The drawback is the plugin does not support renaming packages (shade plugin fixes that). <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-assembly-plugin </artifactId> <configuration> <archive> <manifest> <mainClass> some.package.Class </mainClass> </manifest> </archive> <descriptorRefs> <descriptorRef> jar-with-dependencies </descriptorRef> </descriptorRefs> </configuration> <executions> <execution> <id> make-assembly </id> <phase> package </phase> <goals> <goal> single </goal> </goals> </execution> </executions> </plugin> With shade plugin, package in an uber-jar to include all dependencies and optionally shade i.e. renaming the packages of some dependencies. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> </execution> <configuration> <shadedArtifactAttached> true </shadedArtifactAttached> <!-- default is <project-name>-<version>-shaded.jar --> <finalName> user-${artifactId}-${version} </finalName> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <mainClass> some.package.Class </mainClass> <build-Number> 123 </buildNumber> </transformer> </transformers> <filters> <filter> <artifact> *:* </artifact> <excludes> <exclude> META-INF/*.SF </exclude> <exclude> META-INF/*.DSA </exclude> <exclude> META-INF/*.RSA </exclude> </excludes> </filter> </filters> </configuration> </executions> </plugin> Use a two step process with the maven dependency plugin to create jar by copying all dependencies into /libs folder and then using the maven jar plugin to create executable and classpath-aware jar with the link to the dependencies from the maven dependency plugin. These approach does not create a fat jar, instead the executable jar will only run if the /libs folder will be accessible for a jar. <packaging> jar </packaging> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <version> ... </version> <executions> <execution> <id> copy-dependencies </id> <phase> prepare-package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/libs </outputDirectory> <excludeArtfiacts> junit </excludeArtfiacts> <overWriteIfNew> true </overWriteIfNew> </configuration> configuration> </execution> </executions> </plugin> then use the maven jar plugin <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <version> ... </version> <configuration> <archive> <manifest> <addDefaultImplementationEntries> true </addDefaultImplementationEntries> <addDefaultSpecificationEntries> true </addDefaultSpecificationEntries> <addClasspath> true </addClasspath> <classpathPrefix> libs/ </classpathPrefix> <mainClass> some.package.App </mainClass> </manifest> </archive> </configuration> </plugin>","title":"Generating fat-jar as executable"},{"location":"developer/maven/#executing-program-in-mvn","text":"","title":"Executing program in mvn"},{"location":"developer/maven/#execjava","text":"Class provided in command line <!-- exec:java -D<args> --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <!-- no configuration, class injected from command line --> </plugin> Class provided in pom mvn exec:exec <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <configuration> <mainClass> org.some.package.MainClass </mainClass> </configuration> </plugin>","title":"exec:java"},{"location":"developer/maven/#execjavaapp1","text":"Wire multiple main classes mvn exec:java@App1 mvn exec:java@App2 <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> App1 </id> <configuration> <mainClass> org.some.package.MainClass1 </mainClass> </configuration> </execution> <execution> <id> App2 </id> <configuration> <mainClass> org.some.package.MainClass2 </mainClass> </configuration> </execution> </executions> </plugin> Alternatively mvn exec:exec@run-app <!-- or 3. using exec:java or exec:exec@run-app --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> run-app </id> <goals> <goal> exec </goal> </goals> <configuration> <executable> java </executable> <arguments> <argument> -jar </argument> <argument> target/${project.artifactId}-${project.version}-fat.jar </argument> </arguments> </configuration> </execution> </executions> </plugin>","title":"exec:java@App1"},{"location":"developer/maven/#execexec","text":"<plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <configuration> <executable> java </executable> <arguments> <argument> -classpath </argument> <classpath /> <argument> ${mainClass} </argument> <argument> ${port} </argument> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> ${args} </argument> </arguments> </configuration> </plugin> <properties> <mainClass> some.package.Class </mainClass> <port> 8080 </port> <args> ... </args> </properties>","title":"exec:exec"},{"location":"developer/maven/#execexecapp","text":"<plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> ? </version> <executions> <execution> <id> App1 </id> <configuration> <executable> java </executable> <arguments> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> -classpath </argument> <classpath /> <argument> org.some.package.App1 </argument> <argument> ${args} </argument> </arguments> </configuration> </execution> <execution> <id> App2 </id> <configuration> <executable> java </executable> <arguments> <argument> -Xms512m </argument> <argument> -Xmx512m </argument> <argument> -XX:NewRatio=3 </argument> <argument> -XX:+PrintGCTimeStamps </argument> <argument> -XX:+PrintGCDetails </argument> <argument> -Xloggc:gc.log </argument> <argument> -classpath </argument> <classpath /> <argument> org.some.package.App2 </argument> <argument> ${args} </argument> </arguments> </configuration> </execution> </executions> </plugin>","title":"exec:exec@App"},{"location":"developer/maven/#examples","text":"# some examples run the program in the same jvm that loaded mvn. # Example 1 $ mvn exec:java -Dexec.mainClass = \"org.some.package.MainClass\" -Dexec.args = \"arg1 arg2\" # Example 2 $ mvn exec:java -Dexec.args = \"arg1 arg2\" $ mvn exec:java@App1 $ mvn exec:java@App2 # Example 3 $ mvn exec:java -Dexec.args = \"arg1 arg2\" $ mvn exec:exec@run-app $ mvn exec:exec $ mvn exec:exec@App1","title":"Examples"},{"location":"developer/maven/#using-profile","text":"$ mvn -P<some-profile-name> <profiles> <profile> <id> some-profile-name </id> <build> <plugins> <plugin> ... </plugin> </plugins> </build> <properties> ... </properties> </profile> </profiles>","title":"Using profile"},{"location":"developer/maven/#using-vertx-embedded","text":"Vertx is embedded inside the program rather than used via verticle. <properties> <!-- the main class --> <exec.mainClass> io.vertx.example.HelloWorldEmbedded </exec.mainClass> </properties> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> <configuration> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <manifestEntries> <Main-Class> ${exec.mainClass} </Main-Class> </manifestEntries> </transformer> <transformer implementation= \"org.apache.maven.plugins.shade.resource.AppendingTransformer\" > <resource> META-INF/services/io.vertx.core.spi.VerticleFactory </resource> </transformer> </transformers> <artifactSet> </artifactSet> <outputFile> ${project.build.directory}/${project.artifactId}-${project.version}-fat.jar </outputFile> </configuration> </execution> </executions> </plugin>","title":"Using Vertx embedded"},{"location":"developer/maven/#using-vertx-verticle","text":"<properties> <!-- the main verticle class name --> <main.verticle> io.vertx.example.HelloWorldVerticle </main.verticle> </properties> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> shade </goal> </goals> <configuration> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <manifestEntries> <Main-Class> io.vertx.core.Launcher </Main-Class> <Main-Verticle> ${main.verticle} </Main-Verticle> </manifestEntries> </transformer> <transformer implementation= \"org.apache.maven.plugins.shade.resource.AppendingTransformer\" > <resource> META-INF/services/io.vertx.core.spi.VerticleFactory </resource> </transformer> </transformers> <artifactSet> </artifactSet> <outputFile> ${project.build.directory}/${project.artifactId}-${project.version}-fat.jar </outputFile> </configuration> </execution> </executions> </plugin> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> exec-maven-plugin </artifactId> <version> 1.4.0 </version> <executions> <execution> <id> run </id> <goals> <goal> java </goal> </goals> <configuration> <mainClass> io.vertx.core.Launcher </mainClass> <arguments> <argument> run </argument> <argument> ${main.verticle} </argument> </arguments> </configuration> </execution> <execution> <id> run-app </id> <goals> <goal> exec </goal> </goals> <configuration> <executable> java </executable> <arguments> <argument> -jar </argument> <argument> target/${project.artifactId}-${project.version}-fat.jar </argument> </arguments> </configuration> </execution> </executions> </plugin>","title":"Using Vertx verticle"},{"location":"developer/maven/#using-vertx-maven-service-factory","text":"May not be recommended, as code depends on maven service factory. # running the verticle # pom for my-verticle has minimal settings $ vertx run maven:io.vertx:maven-service-factory-verticle:3.8.1::my-verticle # running the API to deploy the verticle $ vertx run io.vertx.examples.MyDeployingVerticle -cp target/maven-service-factory-api-3.8.1.jar <!-- for the API project --> <dependency> <groupId> io.vertx </groupId> <artifactId> vertx-maven-service-factory </artifactId> <version> ${project.version} </version> <classifier> shaded </classifier> </dependency>","title":"Using Vertx maven service factory"},{"location":"developer/maven/#plugins","text":"","title":"Plugins"},{"location":"developer/maven/#overview","text":"https://www.baeldung.com/maven","title":"Overview"},{"location":"developer/maven/#maven-resource-plugin","text":"Copy resources to an output folder. It allows us to keep main and test resources separate in the project, and only use the main resources for the deployment purposes. https://www.baeldung.com/maven-resources-plugin <configuration> <outputDirectory> output-resources </outputDirectory> <resources> <resource> <directory> input-resources </directory> <excludes> <exclude> *.png </exclude> </excludes> <filtering> true </filtering> <!-- helps replace parameters in files --> </resource> </resources> </configuration> # copies all files except *.png from /input-resources to /output-resources mvn resources:resources # resources goal is bound to process-resource phase mvn process-resources Replace property placeholders with values <properties> <resources.name>Baeldung</resources.name> </properties> Welcome to ${resources.name}!","title":"maven-resource-plugin"},{"location":"developer/maven/#maven-checkstyle-plugin","text":"Two pre-defined checkstyles: https://github.com/checkstyle/checkstyle/tree/master/src/main/resources https://www.baeldung.com/checkstyle-java <reporting> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-checkstyle-plugin </artifactId> <version> ... </version> <configuration> <configLocation> checkstyle.xml </configLocation> <logViolationsToConsole> true </logViolationsToConsole> <skip> false </skip> </configuration> <executions> <execution> <goals> <goal> check </goal> <!-- run in verify phase of build --> </goals> </execution> </executions> </plugin> </plugins> </reporting> # runs checkstyle automatically mvn clean install # doesn't need the execution xml block in pom mvn checkstyle:check","title":"maven-checkstyle-plugin"},{"location":"developer/maven/#maven-compiler-plugin","text":"Plugin has two goals: compile and testCompile <configuration> <source> 1.8 </source> <target> 1.8 </target> <!-- pass to javac --> <compilerArgs> <arg> -Xlint:unchecked </arg> </compilerArgs> </configuration> <!-- or --> <properties> <maven.compiler.source> 1.8 </maven.compiler.source> <maven.compiler.target> 1.8 </maven.compiler.target> </properties> mvn compile mvn test-compile","title":"maven-compiler-plugin"},{"location":"developer/maven/#maven-dependency-plugin","text":"Provides goals to work with dependencies like copying, unpacking, analyzing, resolving and many more. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <executions> <execution> <id> copy-dependencies </id> <phase> prepare-package </phase> <goals> <goal> copy-dependencies </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/libs </outputDirectory> </configuration> </execution> </executions> </plugin> We specify the goal copy-dependencies , which tells Maven to copy dependencies into the specified outputDirectory , in this case /libs . https://crunchify.com/how-to-create-build-java-project-including-all-dependencies-using-maven-maven-resources-maven-dependency-maven-jar-plugin-tutorial/ https://www.baeldung.com/maven-dependency-latest-version <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-dependency-plugin </artifactId> <version> 3.1.1 </version> <executions> <execution> <id> dependency-analyze </id> <phase> package </phase> <goals> <goal> analyze </goal> </goals> <configuration> <failOnWarning> true </failOnWarning> <ignoreNonCompile> true </ignoreNonCompile> <ignoredDependencies> true </ignoredDependencies> <outputXML> true </outputXML> <ignoredUnusedDeclaredDependencies> <ignoredUnusedDeclaredDependency> commons-io:commons-io:jar:* </ignoredUnusedDeclaredDependency> </ignoredUnusedDeclaredDependencies> <ignoredUsedUndeclaredDependencies> <ignoredUsedUndeclaredDependency> org.apache.httpcomponents:httpcore:jar:* </ignoredUsedUndeclaredDependency> </ignoredUsedUndeclaredDependencies> </configuration> </execution> <execution> <phase> validate </phase> <goals> <goal> copy </goal> </goals> <configuration> <outputDirectory> ${project.build.directory}/endorsed </outputDirectory> <silent> true </silent> <artifactItems> <artifactItem> <groupId> javax </groupId> <artifactId> javaee-endorsed-api </artifactId> <version> 6.0 </version> <type> jar </type> </artifactItem> </artifactItems> </configuration> </execution> </executions> </plugin> mvn dependency:help mvn dependency:help -Ddetail = true -Dgoal = analyze mvn help:describe -Dplugin = \"org.apache.maven.plugins:maven-dependency-plugin\" mvn help:describe -Dplugin = \"org.apache.maven.plugins:maven-dependency-plugin\" -Ddetail = true -Dgoal = analyze mvn dependency:analyze mvn dependency:resolve mvn dependency:tree mvn dependency:purge-local-repository","title":"maven-dependency-plugin"},{"location":"developer/maven/#maven-jar-plugin","text":"This plugin provides the capability to build and sign jars. It compiles the java files under src/main/java and /src/main/resources/ and it doesn't include the dependencies JAR files . <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-jar-plugin </artifactId> <configuration> <archive> <manifest> <addClasspath> true </addClasspath> <classpathPrefix> libs/ </classpathPrefix> <mainClass> com.some.main.Class </mainClass> </manifest> </archive> </configuration> </plugin> In the manifest configuration we add a classpath, with all dependencies (* libs/ ), and provide the information about the fully qualified named of the main class. The advantages and disadvantages of this approach are: pros \u2013 transparent process cons \u2013 manual, dependencies are outside of the final jar , so the executable jar will only run if the libs folder will be accessible and visible to the jar","title":"maven-jar-plugin"},{"location":"developer/maven/#maven-assembly-plugin","text":"The assembly plugin allows to aggregate the project output along with its dependencies, modules, site documentation, and other files into a single, runnable package. Plugin extracts dependency jars into raw classes, and group it together. It can also be build an executable jar by specifying the main class. It works best in project with less dependencies only. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-assembly-plugin </artifactId> <executions> <execution> <phase> package </phase> <goals> <goal> single </goal> </goals> <configuration> <archive> <manifest> <mainClass> com.baeldung.executable.ExecutableMavenJar </mainClass> </manifest> </archive> <descriptorRefs> <descriptorRef> jar-with-dependencies </descriptorRef> </descriptorRefs> </configuration> </execution> </executions> </plugin> We need to provide the information about the main class and the plugin will automatically copy all required dependencies into a jar file. In the descriptorRefs part , we provided the name, that will be added to the project name. Output in our example will be named as whatever-with-dependencies.jar. pros \u2013 dependencies inside the jar file cons \u2013 basic control of packaging your artifact, for example, there is no class relocation support","title":"maven-assembly-plugin"},{"location":"developer/maven/#maven-shade-plugin","text":"When to use maven jar, assembly, and shade plugin It packages all dependencies into one uber-jar. It can also build an executable jar by specifying the main class. This plugin is useful as it merges content of specific files instead of overwriting them by Relocating Classes . This is needed when there are resource files that have the same name across the jars and the plugin tries to package all the resource files. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-shade-plugin </artifactId> <executions> <execution> <goals> <goal> shade </goal> </goals> <configuration> <shadedArtifactAttached> true </shadedArtifactAttached> <transformers> <transformer implementation= \"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\" > <mainClass> com.baeldung.executable.ExecutableMavenJar </mainClass> </transformer> </transformers> <createDependencyReducedPom> false </createDependencyReducedPom> </configuration> </execution> </executions> </plugin> There are three main parts of this configuration: First, marks all dependencies to be packaged into the jar . Second, the transformer implementation ; we used the standard one in our example. Finally, specify the main class of our application. The output file will be named whatever-0.1.0-SNAPSHOT-shaded.jar . pros \u2013 dependencies inside the jar file, advanced control of packaging, with shading and class relocation cons \u2013 complex configuration If the uber JAR is used as a dependency of some other project, directly including classes from the artifact's dependencies in the uber JAR can cause class loading conflicts due to duplicate classes on the class path. To address this issue, one can relocate the classes which get included in the shaded artifact in order to create a private copy of their bytecode: <!-- a vesion that specifies excludes --> <configuration> <relocations> <relocation> <pattern> org.codehaus.plexus.util </pattern> <shadedPattern> org.shaded.plexus.util </shadedPattern> <excludes> <exclude> org.codehaus.plexus.util.xml.Xpp3Dom </exclude> <exclude> org.codehaus.plexus.util.xml.pull.* </exclude> </excludes> </relocation> </relocations> </configuration> <!-- a narrower version that specifies includes --> <relocation> <pattern> org.codehaus.plexus.util </pattern> <shadedPattern> org.shaded.plexus.util </shadedPattern> <includes> <include> org.codehaud.plexus.util.io.* </include> </includes> </relocation> The above instructs the plugin to move classes of the package org.codehaus.plexus.util and its subpackages into the package org.shaded.plexus.util by moving the corresponding JAR file entries and rewritting the affected bytecode. The class Xpp3Dom and some others will remain in their original package.","title":"maven-shade-plugin"},{"location":"developer/maven/#maven-install-plugin-local-repo","text":"We\u2019ll add the artifact in source control and install it locally before the build process needs it. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-install-plugin </artifactId> <version> 2.5.1 </version> <configuration> <groupId> org.somegroup </groupId> <artifactId> someartifact </artifactId> <version> 1.0 </version> <packaging> jar </packaging> <file> ${basedir}/dependencies/someartifact-1.0.jar </file> <!-- if pom is not required --> <generatePom> true </generatePom> <!-- or if pom is provided --> <generatePom> false </generatePom> <pomFile> ${basedir}/dependencies/someartifact-1.0.pom </pomFile> <!-- done --> </configuration> <executions> <execution> <id> install-jar-lib </id> <goals> <goal> install-file </goal> </goals> <phase> validate </phase> </execution> </executions> </plugin> The Artifact is defined in the element. Next part defines the packaging of the artifact as jar . Next, we provide the location of the actual jar file to be installed \u2013 this can be an absolute file path or relative, using the properties available in Maven . In this case, the ${basedir} property represents the root of the project, namely the location where the pom.xml file exists. This means that the someartifact-1.0.jar file needs to be placed in a /dependencies/ directory under the root. Finally, there are several other optional details that can be configured as well. To execute, run the following two commands. mvn validate mvn clean install The setting depends on whether we need to supply a pom.xml file for the artifact or not - which depends on the runtime dependencies of the artifact itself. If the artifact has runtime dependencies on other jars, those jars will need to be present on the classpath at runtime as well. With a simple artifact that should not be a problem, as it will likely have no dependencies at runtime. If the artifact is complex and if dependencies are not already in the classpath, they must be added. One way to do that is by defining these new dependencies manually in the pom file of the project. A better solution is to provide a custom pom.xml file along with the installed artifact: This will allow Maven to resolve all dependencies of the artifact defined in this custom pom.xml , without having to define them manually in the main pom file of the project.","title":"maven-install-plugin (local repo)"},{"location":"developer/maven/#maven-deploy-plugin-nexus-repo","text":"Deprecated, use nexus-staging-maven-plugin instead. Deploy the artifacts of a project to Nexus . <distributionManagement> <snapshotRepository> <id> nexus-snapshots </id> <url> http://localhost:8081/nexus/content/repositories/snapshots </url> </snapshotRepository> </distributionManagement> <plugin> <artifactId> maven-deploy-plugin </artifactId> <version> 2.8.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> </plugin>","title":"maven-deploy-plugin (nexus repo)"},{"location":"developer/maven/#nexus-staging-maven-plugin","text":"The maven-deploy-plugin is a viable option to handle the task of deploying to artifacts of a project to Nexus, but it was not built to take full advantage of Nexus and Sonatype built a Nexus specific plugin \u2013 the nexus-staging-maven-plugin . So we first need to disable the default deploy plugin. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-deploy-plugin </artifactId> <version> ${maven-deploy-plugin.version} </version> <configuration> <skip> true </skip> </configuration> </plugin> <plugin> <groupId> org.sonatype.plugins </groupId> <artifactId> nexus-staging-maven-plugin </artifactId> <version> 1.5.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> <configuration> <serverId> nexus </serverId> <nexusUrl> http://localhost:8081/nexus/ </nexusUrl> <skipStaging> true </skipStaging> </configuration> </plugin> Since we do not need staging functionality of -SNAPSHOT artifacts to Nexus, we disable using the element. By default, the deploy goal includes the staging workflow, which is recommended for release builds. mvn clean deploy -Dmaven.test.skip = true","title":"nexus-staging-maven-plugin"},{"location":"developer/maven/#maven-release-plugin","text":"https://www.baeldung.com/maven-release-nexus Plugin tags the code in the source control and hence requires the SCM section. Read more: https://javarevisited.blogspot.com/2016/10/difference-between-mvn-install-release-and-deploy-in-Maven.html#ixzz6OcYjDpgI We'll configure the Release Process with Maven \u2013 both in the pom of the project as well as in a Jenkins job. The Release process will interact with the Source Control of the project \u2013 this means we first need to define the element in our pom.xml : <!-- define the repo --> <distributionManagement> <repository> <id> nexus-releases </id> <url> http://localhost:8081/nexus/content/repositories/releases </url> </repository> </distributionManagement> <!-- define the source control --> <scm> <connection> scm:git:https://github.com/user/project.git </connection> <url> http://github.com/user/project </url> <developerConnection> scm:git:https://github.com/user/project.git </developerConnection> </scm> <!-- or using git protocol --> <scm> <connection> scm:git:git@github.com:user/project.git </connection> <url> scm:git:git@github.com:user/project.git </url> <developerConnection> scm:git:git@github.com:user/project.git </developerConnection> </scm> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-release-plugin </artifactId> <version> 2.4.2 </version> <configuration> <tagNameFormat> v@{project.version} </tagNameFormat> <autoVersionSubmodules> true </autoVersionSubmodules> <releaseProfiles> releases </releaseProfiles> </configuration> </plugin> <profiles> <profile> <id> releases </id> <build> <plugins> <plugin> <groupId> org.sonatype.plugins </groupId> <artifactId> nexus-staging-maven-plugin </artifactId> <version> 1.5.1 </version> <executions> <execution> <id> default-deploy </id> <phase> deploy </phase> <goals> <goal> deploy </goal> </goals> </execution> </executions> <configuration> <serverId> nexus-releases </serverId> <nexusUrl> http://localhost:8081/nexus/ </nexusUrl> <skipStaging> true </skipStaging> </configuration> </plugin> </plugins> </build> </profile> </profiles> The releaseProfiles configuration will force a Maven's releases profile to become active during the Release process. mvn release:prepare -DdryRun = true mvn release:clean mvn release ; prepare mvn release:perform mvn release:rollback mvn release:prepare currently POM contains 0.1-SNAPSHOT . performs checks, no dependencies should be SNAPSHOT . update the version in the pom to a major version and remove the SNAPSHOT . POM will now have 0.1 . run tests, commit and push the changes create a tag from the non-SNAPSHOT versioned code. Update the pom and increase the major version and add back the SNAPSHOT . The POM will now have 0.2-SNAPSHOT . commit and push the changes. mvn release:prepare checkout the release tag - the pom here container 0.1 . build and deploy released code","title":"maven-release-plugin"},{"location":"developer/maven/#release-using-jenkins","text":"Jenkins can perform the release process in one of two ways \u2013 it can either use it's own release plugins, or it can simply run perform the release with a standard maven job running the correct release steps. We\u201dll define two parameters: releaseVersion=0.1 and developmentVersion=0.2-SNAPSHOT . Release:Clean release:prepare release:perform -DreleaseVersion = ${ releaseVersion } -DdevelopmentVersion = ${ developmentVersion }","title":"Release using Jenkins"},{"location":"developer/maven/#maven-surefile-plugin","text":"We can run the tests of a project using the *surefire* plugin. By default, this plugin generates XML reports in the directory target/surefire-reports . <plugin> <artifactId> maven-surefire-plugin </artifactId> <version> 2.21.0 </version> <configuration> <excludes> <exclude> DataTest.java </exclude> </excludes> <includes> <include> DataCheck.java </include> </includes> </configuration> </plugin>","title":"maven-surefile-plugin"},{"location":"developer/maven/#maven-failsafe-plugin","text":"The failsafe plugin is used for integration tests of a project. It has two goals: integration-test \u2013 run integration tests; this goal is bound to the integration-test phase by default verify \u2013 verify that the integration tests passed; this goal is bound to the verify phase by default A test failure in the *integration-test* phase doesn't fail the build, allowing the phase *post-integration-test* to execute, where clean-up operations are performed. Failed tests, if any, are only reported during the verify phase, after the integration test environment has been torn down properly. <plugin> <artifactId> maven-failsafe-plugin </artifactId> <version> 2.21.0 </version> <executions> <execution> <goals> <goal> integration-test </goal> <goal> verify </goal> </goals> <configuration> ... </configuration> </execution> </executions> </plugin>","title":"maven-failsafe-plugin"},{"location":"developer/maven/#maven-clean-plugin","text":"The clean plugin is already included in the super POM and cleans the files and directories generated during the previous build. By default, the plugin removes the target directory. <plugin> <artifactId> maven-clean-plugin </artifactId> <version> 3.0.0 </version> <configuration> <skip> false </skip> <!-- to skip use true --> <filesets> <fileset> <directory> output-resources </directory> </fileset> </filesets> </configuration> <executions> <execution> <id> auto-clean </id> <phase> initialize </phase> <goals> <goal> clean </goal> </goals> </execution> </executions> </plugin>","title":"maven-clean-plugin"},{"location":"developer/maven/#maven-verifier-plugin","text":"Verifies the existence or non-existence of files and directories, optionally checking file content against a regular expression. The verifier plugin is triggered only if it's explicitly added to the pom.xml : <plugin> <artifactId> maven-verifier-plugin </artifactId> <version> 1.1 </version> <configuration> <verificationFile> input-resources/verifications.xml </verificationFile> </configuration> <executions> <execution> <goals> <goal> verify </goal> </goals> </execution> </executions> </plugin> The default location of the verification file is src/test/verifier/verifications.xml . <verifications xmlns= \"http://maven.apache.org/verifications/1.0.0\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://maven.apache.org/verifications/1.0.0 http://maven.apache.org/xsd/verifications-1.0.0.xsd\" > <files> <file> <location> input-resources/baeldung.txt </location> <contains> Welcome </contains> </file> </files> </verifications>","title":"maven-verifier-plugin"},{"location":"developer/maven/#maven-site-plugin","text":"The plugin is already included in the super POM, and has two phases bound to goals of the site plugin by default: site \u2013 generate a site for a single project; the generated site only shows information about the artifacts specified in the POM deploy \u2013 deploy the generated site to the URL specified in the distributionManagement element of the POM In addition to site and deploy , the site plugin has several other goals to customize the content of the generated files and to control the deployment process. mvn site:site # or mvn site","title":"maven-site-plugin"},{"location":"developer/maven/#maven-pmd-plugin","text":"Plugin is a static code analyzer, and the report is generated using the maven-site-plugin. <reporting> <plugins> <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-pmd-plugin </artifactId> <version> 3.11.0 </version> </plugin> </plugins> </reporting>","title":"maven-pmd-plugin"},{"location":"developer/maven/#findbugs-maven-plugin","text":"Another static code analyzer, available on IDE as well. <reporting> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> findbugs-maven-plugin </artifactId> <version> 3.0.4 </version> </plugin> </plugins> </reporting> <!-- fail under some condition --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> findbugs-maven-plugin </artifactId> <version> 3.0.4 </version> <configuration> <effort> Max </effort> <!-- or custom --> <onlyAnalyze> org.baeldung.web.controller.* </onlyAnalyze> <omitVisitors> FindNullDeref </omitVisitors> <visitors> FindReturnRef </visitors> </configuration> <executions> <execution> <goals> <goal> check </goal> </goals> </execution> </executions> </plugin> mvn verify","title":"findbugs-maven-plugin"},{"location":"developer/maven/#cobertura-maven-plugin","text":"For code coverage. jacoco recommended over cobertura. <reporting> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> cobertura-maven-plugin </artifactId> <version> 2.7 </version> </plugin> </plugins> </reporting> <!-- include or exclude certain classes --> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> cobertura-maven-plugin </artifactId> <version> 2.7 </version> <configuration> <instrumentation> <ignores> <ignore> com/some/needed/package/* </ignore> </ignores> <excludes> <exclude> com/some/ignore/package/* </exclude> </excludes> </instrumentation> </configuration> </plugin> <!-- tolerance setting --> <configuration> <check> <haltOnFailure> true </haltOnFailure> <branchRate> 75 </branchRate> <lineRate> 85 </lineRate> <totalBranchRate> 75 </totalBranchRate> <totalLineRate> 85 </totalLineRate> <packageLineRate> 75 </packageLineRate> <packageBranchRate> 85 </packageBranchRate> <regexes> <regex> <pattern> com.some.needed.package.* </pattern> <branchRate> 60 </branchRate> <lineRate> 50 </lineRate> </regex> </regexes> </check> </configuration>","title":"cobertura-maven-plugin"},{"location":"developer/maven/#jacoco-maven-plugin","text":"For code coverage <plugin> <groupId> org.jacoco </groupId> <artifactId> jacoco-maven-plugin </artifactId> <version> 0.7.7.201606060606 </version> <executions> <execution> <goals> <goal> prepare-agent </goal> </goals> </execution> <execution> <id> report </id> <phase> prepare-package </phase> <goals> <goal> report </goal> </goals> </execution> </executions> </plugin> <!-- tolerance --> <execution> <id> jacoco-check </id> <goals> <goal> check </goal> </goals> <configuration> <rules> <rule> <element> PACKAGE </element> <limits> <limit> <counter> LINE </counter> <value> COVEREDRATIO </value> <minimum> 0.50 </minimum> </limit> </limits> </rule> </rules> </configuration> </execution> mvn clean verify","title":"jacoco-maven-plugin"},{"location":"developer/maven/#maven-project-info-reports-plugin","text":"Generate reports information about the project. <plugin> <groupId> org.apache.maven.plugins </groupId> <artifactId> maven-project-info-reports-plugin </artifactId> <version> 3.0.0 </version> <reportSets> <reportSet> <reports> <report> dependencies </report> <report> project-team </report> <report> license </report> </reports> </reportSet> </reportSets> </plugin>","title":"maven-project-info-reports-plugin"},{"location":"developer/maven/#versions-maven-plugin","text":"<build> <plugins> <plugin> <groupId> org.codehaus.mojo </groupId> <artifactId> versions-maven-plugin </artifactId> <version> 2.7 </version> <configuration> <excludes> <exclude> org.apache.commons:commons-collections4 </exclude> </excludes> </configuration> </plugin> </plugins> </build> mvn versions:display-dependency-updates","title":"versions-maven-plugin"},{"location":"developer/maven/#hibernate-ehcache","text":"Second-level cache. https://www.baeldung.com/hibernate-second-level-cache Provider net.sf.ehcache <dependency> <groupId> org.hibernate </groupId> <artifactId> hibernate-ehcache </artifactId> <version> 5.2.2.Final </version> </dependency>","title":"hibernate-ehcache"},{"location":"developer/maven/#pending","text":"hibernate-annotations org.jasypt - http://www.jasypt.org/ openpojo - https://github.com/OpenPojo/openpojo commons-codec org.ehcache google-http-client - https://github.com/googleapis/google-http-java-client Mockito-core - https://www.baeldung.com/mockito-core-vs-mockito-all mockito-junit-jupiter jaxb2-maven-plugin jaxws-maven-plugin build-helper-maven-plugin Swagger-maven-plugin gson json-simple swagger-annotations org.apache.commons::commons-math3 joda-time::joda-time org.json::json jackson-core jackson-databind netty-all resteasy-jackson-provider resteasy-jettison-provider resteasy-jaxb-provider resteasy-jaxrs","title":"Pending"},{"location":"developer/maven/#resteasy-spring","text":"","title":"resteasy-spring"},{"location":"developer/maven/#reference","text":"https://maven.apache.org/index.html https://mincong-h.github.io/series/maven-plugins/ https://www.baeldung.com/executable-jar-with-maven https://github.com/vert-x3/vertx-stack https://reactiverse.io/vertx-maven-plugin/ https://github.com/reactiverse/vertx-maven-plugin https://github.com/vert-x3/vertx-examples","title":"Reference"},{"location":"developer/openssl/","text":"Open SSL Ways to present a certificate PEM - Privacy Enhanced Mail is a base-64 encoded format. Can include public certs, public keys, entire chain, and private keys May contain a CSR in PKCS10 format Can be put inside email body Has a BEGIN CERTIFICATE and END CERTIFICATE . DER is the parent of PEM and in a binary format. PKCS7 is used by Java and doesn't contain private key. PKCS12 is used by windows and can contain private key. Types and Transformations x509 v3 is RFC 5280 File Extensions: DER is binary and contains raw format using asn.1 encoding PEM is ascii and contains base64 encoding using begin / end CRT is extension for certificates and MS format. This may be encoded as DER or PEM. CER is synonym for CRT KEY is used for both public and private PKCS#8 keys and may be encoded as DER or PEM. PKCS#7 is a complex format design for transport of signed or encrypted data Defined RFC 2315. Usually .p7b and .p7c extension. Supported by java keytool. contains --BEGIN PKCS line contains only certs, chain certs doesn't contain private keys base64 encoded ascii file PKCS#12 - binary format to store and protect server key along with entire chain .pfx, .p12 stores server certs, any intermediate certs, private key in one encrypted file used to import into browser used to convert into jks using keytool PKCS#8 is a newer and recommended format for RSA keys Install OpenSSL # install brew update brew install openssl brew cask install keystore-explorer # upgrade mv /usr/bin/openssl /usr/bin/openssl_old brew unlink openssl brew link -force openssl ln -s /usr/local/Cellar/../openssl /usr/bin/openssl # validate openssl version -a which openssl # building wget http://www.openssl.org.source/openssl-.tar.gz ./config --prefix = /opt/openssl --openssldir = /opt/openssl enable-ec nistp_64_gcc_128 make depend make sudo make install # config openssl help cd /usr/lib/../openssl.conf // look inside misc # list of supported ciphers openssl ciphers -v 'ALL:COMPLEMENTOFALL' Test SSL Certificate of a URL openssl s_client -connect subject.com:443 -showcerts # check cert expiry date of ssl url openssl s_client -connect subject.com:443 2 >/dev/null | openssl x509 -noout -enddate # check if ssl or tls is accepted on a url openssl s_client -connect secureurl.com:443 -ssl2 openssl s_client -connect secureurl.com:443 \u2013ssl3 openssl s_client -connect secureurl.com:443 \u2013tls1 openssl s_client -connect secureurl.com:443 \u2013tls1_1 openssl s_client -connect secureurl.com:443 \u2013tls1_2 # verify if a particular cipher is accepted on url openssl s_client -cipher 'ECDHE-ECDSA-AES256-SHA' -connect secureurl:443 # verify if the cert and the key belong to each other. # checksum should match openssl x509 -noout -modulus -in server.crt | openssl md5 openssl rsa -noout -modulus -in server.key | openssl md5 Setup Root CA JamieLinux Guide DigitalOcean Guide mkdir root/ca cd root/ca mkdir csr certs crl newcerts private public chmod 700 private touch index.txt echo 1000 > serial // Configure file 'root/ca/openssl.cnf' [ ca ] # `man ca` default_ca = CA_default [ CA_default ] # Directory and file locations. dir = /root/ca certs = $dir /certs crl_dir = $dir /crl new_certs_dir = $dir /newcerts database = $dir /index.txt serial = $dir /serial RANDFILE = $dir /private/.rand # The root key and root certificate. private_key = $dir /private/ca.key.pem certificate = $dir /certs/ca.cert.pem # For certificate revocation lists. crlnumber = $dir /crlnumber crl = $dir /crl/ca.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_strict [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of `man ca`. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the `ca` man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the `req` tool (`man req`), are applied when creating certs or csr. default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca [ req_distinguished_name ] # See <https://en.wikipedia.org/wiki/Certificate_signing_request>. countryName = Country Name ( 2 letter code ) stateOrProvinceName = State or Province Name localityName = Locality Name 0 .organizationName = Organization Name organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = GB stateOrProvinceName_default = England localityName_default = 0 .organizationName_default = Alice Ltd #organizationalUnitName_default = #emailAddress_default = [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = client, email nsComment = \"OpenSSL Generated Client Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (`man x509v3_config`). authorityKeyIdentifier = keyid:always [ ocsp ] # Extension for OCSP signing certificates (`man ocsp`). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning // end of config file Generate Root CA Private Key openssl genrsa -aes256 -out private/ca.key.pem -passout pass:changeit 4096 # read-only for owner chmod 400 private/ca.key.pem # To verify enter the pass phrase openssl rsa -in private/ca.key.pem -check Generate Root CA Certificate # Specify a conf file to use with the -config option # otherwise openssl defaults to /etc/pki/tls/openssl.cnf # generate csr and sign it openssl req -config openssl.cnf -key private/ca.key.pem -new -x509 -days 7300 -sha256 -extensions v3_ca -out certs/ca.cert.pem -passin pass:changeit # read access to all chmod 444 certs/ca.cert.pem # alternative inline option -subj '/C=UA/O=myCompany/CN=myCompanyRootCA' # verify the cert openssl x509 -noout -text -in certs/ca.cert.pem # verify the cert dates openssl x509 -noout -dates -in certs/ca.cert.pem # verify the cert signing authority openssl x509 -noout -issuer -issuer_hash -in certs/ca.key.pem # verify the cert's hash openssl x509 -noout -text -in certs/ca.key.pem | grep 'Signature Algorithm' # verify signature openssl x509 -noout -in certs/ca.cert.pem -sha256 -fingerprint # verify the checksum of private key and cert match, vouching the cert is signed by private key openssl x509 -noout -modulus -in certs/ca.cert.pem | openssl md5 openssl rsa -noout -modulus -in private/ca.key.pem -passin pass:changeit | openssl md5 Generate Root CSR and sign it to generate Root CA Certificate # generate csr openssl req -config openssl.cnf \\ -key private/ca.key.pem -new -days 7300 -sha256 \\ -out csr/ca.csr.pem -passin pass:changeit # sign csr and generate certificate openssl req -config openssl.cnf \\ -in csr/ca.csr.pem -key private/ca.key.pem -x509 -sha256 \\ -extensions v3_ca -out certs/ca.cert2.pem -passin pass:changeit # every one has read access chmod 444 certs/ca.cert2.pem Extract Root CA Public Key # extract rootCA public key using private key openssl rsa -in private/ca.key.pem -pubout -out public/ca.public.key.pem # extract rootCA public key using certificate openssl x509 -pubkey -noout -in certs/ca.cert.pem > public/ca.public.key.pem Generate self-signed Certificate # generate self-signed certificate and key file with 4096 bit rsa # this will generate cert valid for one year openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout selfsigned.key -out selfsignedcert.pem # self-signed valid for 2 years openssl req -x509 -sha256 -nodes -days 730 -newkey rsa:4096 -keyout selfsigned.key -out selfsignedcert.pem # how do you know if a certificate is self-signed? # The issuer and subject attributes will be identical Intermediate CA # intermediate mkdir ca/intermediate cd intermediate mkdir certs crtl csr newcerts private public chmod 700 private touch index.txt echo 1000 > serial echo 1000 > crlnumber // Copy to ` ca/intermediate/openssl.cnf ` **. [ ca ] # `man ca` default_ca = CA_default [ CA_default ] # Directory and file locations. dir = /Users/manish/Documents/openssl/ca/intermediate certs = $dir /certs crl_dir = $dir /crl new_certs_dir = $dir /newcerts database = $dir /index.txt serial = $dir /serial RANDFILE = $dir /private/.rand # The root key and root certificate. private_key = $dir /private/intermediate.key.pem certificate = $dir /certs/intermediate.cert.pem # For certificate revocation lists. crlnumber = $dir /crlnumber crl = $dir /crl/intermediate.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-2. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_loose [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of `man ca`. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the `ca` man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the `req` tool (`man req`). default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca [ req_distinguished_name ] # See <https://en.wikipedia.org/wiki/Certificate_signing_request>. countryName = US stateOrProvinceName = Arizona localityName = Chandler 0 .organizationName = Deliwala Ltd organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = US stateOrProvinceName_default = Arizona localityName_default = Chandler 0 .organizationName_default = Deliwala Ltd organizationalUnitName_default = emailAddress_default = [ v3_ca ] # Extensions for a typical CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = client, email nsComment = \"OpenSSL Generated Client Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (`man x509v3_config`). authorityKeyIdentifier = keyid:always [ ocsp ] # Extension for OCSP signing certificates (`man ocsp`). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning Generate Intermediate CA An intermediate ca signs certs on behalf of the root ca. The root ca signs the intermediate cert, forming a chain of trust. # create the intermediate key openssl genrsa -aes256 \\ -out intermediate/private/intermediate.key.pem 4096 chmod 400 intermediate/private/intermediate.key.pem # create the intermediate certificate openssl req -config intermediate/openssl.cnf \\ -new -sha256 \\ -key intermediate/private/intermediate.key.pem \\ -out intermediate/csr/intermediate.csr.pem # sign the intermediate certificate, use the root ca conf # with appropriate extensions # make sure you say 'y' to sign the certificate. openssl ca -config openssl.cnf \\ -extensions v3_intermediate_ca -days 3650 -notext -md sha256 \\ -in intermediate/csr/intermediate.csr.pem \\ -out intermediate/certs/intermediate.cert.pem chmod 444 intermediate/certs/intermediate.cert.pem # verify the intermediate certificate openssl x509 -noout -text -in intermediate/certs/intermediate.cert.pem # verify the intermediate against the root openssl verify -CAfile certs/ca.cert.pem intermediate/certs/intermediate.cert.pem # create the certificate chain file cat intermediate/certs/intermediate.cert.pem certs/ca.cert.pem > intermediate/certs/ca-chain.cert.pem chmod 444 intermediate/certs/ca-chain.cert.pem Other Commands # view a certificate openssl x509 -in some.crt -noout -text # check hash value of a cert openssl x509 \u2013inform der \u2013in sslcert.der \u2013out sslcert.pem # remove passphrase from key openssl rsa -in certkey.key -out nopassphrase.key # generate csr and 2048-bit private rsa key openssl req -out some.csr -newkey rsa:2048 -nodes -keyout private.key # create intermediate CA private key openssl genrsa -out intermediateCA.key -aes256 -passout pass:changeit 4096 # create intermediate CA certificate request openssl req -new -key intermediateCA.key -out intermediateCA.csr -subj '/C=UA/O=MyCompany/CN=MyCompanyIntermediateCA' -passin pass:changeit # create v3 x509 extensions cat <<EOF >v3_ca.ext subjectKeyIdentifier=hash authorityKeyIdentifier=keyid:always,issuer:always basicConstraints=CA:true //this means that certificate can sign other certificates EOF # review text version of csr openssl x509 -intermediateCA.csr -noout -text # sign intermediate CA csr with root CA private key and add x509 v3 extensions openssl x509 -req -in intermediateCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -CAserial rootCA.srl -extfile v3_ca.ext -out intermediateCA.crt -days 365 -sha256 -passin pass:changeit # verify intermediate CA certificate openssl verify -CAfile rootCA.crt intermediateCA.crt # if required, generate csr from a certificate openssl x509 -x509toreq -in intermediateCA.crt -out intermediateCA-2.csr -signkey rootCA.key -passin pass:changeit # verify if a certificate was issued by a specific CA. openssl verify -verbose -CAfile cacert.pem server.crt server.crt: OK # generate server private key openssl genrsa -out server.key -aes256 -passout pass:changeit 4096 # generate csr openssl req -new -key server.key -out server.csr -subj '/C=UA/O=MyCompany/CN=example.com' -passin pass:changeit # sign csr using intermediate CA private key openssl x509 -req -in server.csr -CA intermediateCA.crt -CAkey intermediateCA.key -CAcreateserial -CAserial intermediateCA.srl -out server.crt -days 365 -sha256 -passin pass:changeit # decrypt server private key to allow webserver # to use it without prompting for password mv server.key server.key.secure openssl rsa -in server.key.secure -out server.key -passin pass:changeit Sign Server Certificate using Intermediate CA # create a private key openssl genrsa -aes256 -out intermediate/private/www.myhost.com.key.pem 2048 chmod 400 intermediate/private/www.myhost.com.key.pem # create a CSR openssl req -config intermediate/openssl.cnf -key intermediate/private/www.myhost.com.key.pem -new -sha256 -out intermediate/csr/www.myhost.com.csr.pem # sign the CSR openssl ca -config intermediate/openssl.cnf -extensions server_cert -day 375 -notext -md sha256 -in intermediate/csr/www.myhost.com.csr.pem -out intermediate/certs/www.myhost.com.cert.pem chmod 444 intermediate/certs/www.myhost.com.cert.pem # verify openssl x509 -noout -text -in intermediate/certs/www.myhost.com.cert.pem # verify against CA cert chain openssl verify -CAfile intermediate/certs/ca-chain.cert.pem intermediate/certs/www.myhost.com.cert.pem # text version of certificate openssl x509 -in rootCA.crt -text # view pem certificates openssl x509 -in cert.pem -text -noout openssl x509 -in cert.cer -text -noout openssl x509 -in cert.crt -text -noout # you may see error if you are using # pem command to view the certificate unable to load certificate 12626 :error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:647:Expecting: TRUSTED CERTIFICATE # view der certificates openssl x509 -in certificate.der -inform der -text -noout # convert der (.crt, .cer, .der) to pem openssl x509 -inform der -in cert.cer -out cert.pem # pem to der openssl x509 -in cert.crt -outform der -out cert.der openssl x509 -in cert.pem -outform der -out cert.der # pem to p7b openssl crl2pkcs7 -nocrl -certfile certificate.cer -out certificate.p7b -certfile CAcert.cer # pem to pfx openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CAcert.crt # pem to crt openssl x509 -outform der -in cert.pem -out cert.crt # der to pem openssl x509 -in cert.crt -inform der -outform pem -out cert.pem # p7b to pem openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer # p7b to pfx openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer openssl pkcs12 -export -in certificate.cer -inkey privateKey.key-out certificate.pfx -certfile CAcert.cer # pfx to pem openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes # command will put all certs and private key into a single file # you will need to copy each certificate and private key including the # begin/end statements to its individual text files and save them as .cer # convert cert and private key to pkcs#12 format openssl pkcs12 \u2013export \u2013out sslcert.pfx \u2013inkey key.pem \u2013in sslcert.pem # convert pkcs12 to pem openssl pkcs12 \u2013in cert.p12 \u2013out cert.pem openssl pkcs12 -in keystore.pfx -out keystore.pem -nodes # convert pkcs12 to pem - private key only add -nocerts as option to above # convert pkcs12 to pem - cert only add -nokeys as option to above # check contents of pkcs12 format cert openssl pkcs12 \u2013info \u2013nodes \u2013in cert.p12 # der to text openssl x509 -in cert.der -inform der -text -noout # pem to text openssl x509 -in cert.pem -inform dem -text -noout # pem to pkcs12 (.pfx, .p12) # convert pem cert and private key to pkcs12 format openssl pkcs12 -export -out cert.pfx -inkey privatekey.key -in cert.crt -certfile CACert.crt # combination - combine multiple x509 assets into a single file Client Certificate # generate client private key openssl genrsa -out client.key -aes256 -passout pass:changeit 4096 # generate client certificate request openssl req -new -key client.key -out client.csr -subj '/C=UA/O=My Company/CN=My Name/emailAddress=my_name@example.com' -passin pass:changeit # sign client certificate request with intermediate CA private key openssl x509 -req -in client.csr -CA intermediateCA.crt -CAkey intermediateCA.key -CAcreateserial -CAserial intermediateCA.srl -out client.crt -days 365 -sha256 -passin pass:changeit # create CA certificate chain file cat intermediateCA.crt rootCA.crt > CAchain.pem export client certificate to PKCS#12 file to be able to import it into the browser openssl pkcs12 -export -passout pass:changeit -in client.crt -inkey client.key -certfile CAchain.pem -out client.p12 -passin pass:changeit # verify server and client certs against # the cert chain and print their contents openssl verify -CAfile CAchain.pem server.crt openssl x509 -in server.crt -text openssl verify -CAfile CAchain.pen client.crt openssl x509 -in client.crt -test Digest # sha1 for a file openssl dgst -sha1 file.txt openssl dgst -out digest.txt file.txt # sha256 for a file openssl dgst -sha256 file.txt openssl dgst -sha256 file.txt -out digest.txt # dgst options # run with unknown command to get more details openssl dgst -help # -c for colons # -hex for hexdump # -binary # -sign: sign the digest with a private key # -verify: verify a signature using private key # sign the digest of file.txt using DSA or RSA private key openssl dgst -dss1 -sign dsakey.pem -out dsasign.bin file.txt openssl -sha1 -sign rsaprivate.pem out rsasign.bin file.txt # verify signature openssl dgst -dss1 -prverify dsakey.pem -signature dsasign.bin file.txt openssl -sha1 -verify rsapublic.pem -signature rsasign.bin file.txt Encrypt in DES3/CBC mode # encrypt in des3/cbc mode openssl enc -des3 -salt -in plaintext.doc -out ciphertext.bin openssl enc -des3-ede-ofb -d -in ciphertext.bin -out plaintext.doc -passin pass:changeit DSA Key Generation openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key -aes128 Self-signed Certificates, Generating Keystore and Truststore # use openssl to generate private key and certificate # import into keystore and truststore # generate server private key and verify it openssl genrsa -aes256 -out private/server.key.pem -passout pass:s123 4096 chmod 400 private/server.key.pem openssl rsa -in private/server.key.pem \u2013check # generate csr and sign it openssl req -key server.key.pem -new -x509 -days 30 -sha256 -out server.cert.pem -passin pass:s123 # verify the certificate openssl x509 -noout -text -in server.cert.pem # verify the dates in the certificate openssl x509 -noout -dates -in server.cert.pem # verify the cert signing authority openssl x509 -noout -issuer -issuer_hast -in server.cert.pem # verify the cert's hash openssl x509 -noout -text -in server.cert.pem | grep 'Signature Algorithm' # convert server cert from pem to pkcs12 openssl pkcs12 -export -name server-cert -in server.cert.pem -inkey server.key.pem -out server.keystore.p12 # convert pkcs12 keystore into a jks keystore keytool -importkeystore -destkeystore server.keystore.jks -srckeystore server.keystore.p12 -srcstoretype pkcs12 -alias server-cert # import server's certificate into server truststore keytool -import -alias server-cert -file server.cert.pem -keystore server.truststore.jks # import client's certificate into server's truststore keytool -import -alias client-cert -file client.cert.pem -keystore server.truststore.jks # check which certificates are in the keystore keytool -list -v -keystore server.keystore.jks -storepass sss123 //this shows fingerprint # check which certificates are in the truststore keytool -list -v -keystore server.truststore.jks -storepass sss123 # generate client side openssl genrsa -aes256 -out private/client.key.pem -passout pass:c123 4096 openssl req -key client.key.pem -new -x509 -days 30 -sha256 -out client.cert.pem -passin pass:c123 openssl pkcs12 -export -name client-.cert -in client.cert.pem -inkey client.key.pem -out client.keystore.p12 openssl pkcs12 -export -name server-cert -in client.cert.pem -inkey client.key.pem -out client.keystore.p12 keytool -importkeystore -destkeystore client.keystore.jks -srckeystore client.keystore.p12 -srcstoretype pkcs12 -alias client-cert keytool -import -alias client-cert -file client.cert.pem -keystore client.truststore.jks # import server cert into client truststore keytool -import -alias server-cert -file server.cert.pem -keystore client.truststore.jks keytool -list -v -keystore client.keystore.jks -storepass ccc123 keytool -list -v -keystore client.truststore.jks -storepass ccc123 keytool Guide keystore stores private keys and certs corresponding to public keys and truststore store third-party certificates rm \\* .jks 2 \\> /dev/null rm \\* .pem 2 \\> /dev/null # Generate private key for RootCA keytool -genkeypair -alias rootCA -dname cn = MyCompanyRootCA -validity 10000 -keyalg RSA -keysize 4096 -ext bc:c -keystore rootCA.jks -keypass changeit -storepass changeit # Generate private key for IntermediateCA keytool -genkeypair -alias intermediateCA -dname cn = MyCompanyIntermediateCA -validity 10000 -keyalg RSA -keysize 4096 -ext bc:c -keystore intermediateCA.jks -keypass changeit -storepass changeit # Generate root certificate keytool -exportcert -rfc -keystore rootCA.jks -alias rootCA -storepass changeit \\> rootCA.pem # Generate a certificate for intermediateCA and signed by rootCA, use pipeline between two commands keytool -keystore intermediateCA.jks -storepass changeit -certreq -alias intermediateCA | keytool -keystore rootCA.jks -storepass changeit -gencert -alias rootCA -ext bc = 0 -ext san = dns:intermediateCA -rfc \\> intermediateCA.pem # Import intermediateCA cert chain into intermediateCA.jks keytool -keystore intermediateCA.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore intermediateCA.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem # Generate private keys for server keytool -genkeypair -alias server -dname cn = server -validity 10000 -keyalg RSA -keysize 4096 -keystore my-keystore.jks -keypass changeit -storepass changeit # Generate a certificate for server signed by intermediateCA keytool -keystore my-keystore.jks -storepass changeit -certreq -alias server | keytool -keystore intermediateCA.jks -storepass changeit -gencert -alias intermediateCA -ext ku:c = dig,keyEnc -ext san = dns:localhost -ext eku = sa,ca -rfc \\> server.pem # Import server cert chain into my-keystore.jks keytool -keystore my-keystore.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore my-keystore.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem keytool -keystore my-keystore.jks -storepass changeit -importcert -alias server -file server.pem # Generate truststore.jks keytool -keystore my-truststore.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore my-truststore.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem keytool -keystore my-truststore.jks -storepass changeit -importcert -alias server -file server.pem ssh-gen Guide Guide # Creating an SSH Key Pair for User Authentication ssh-keygen # With different ciphers ssh-keygen -t rsa -b 4096 ssh-keygen -t dsa ssh-keygen -t ecdsa -b 521 ssh-keygen -t ed25519 ssh-keygen -f ~/tatu-key-ecdsa -t ecdsa -b 521 # Copy public key to server ssh-copy-id -i ~/.ssh/tatu-key-ecdsa user@host # Copy public key to clipboard pbcopy < ~/.ssh/id_rsa.pub","title":"OpenSSL"},{"location":"developer/openssl/#open-ssl","text":"","title":"Open SSL"},{"location":"developer/openssl/#ways-to-present-a-certificate","text":"PEM - Privacy Enhanced Mail is a base-64 encoded format. Can include public certs, public keys, entire chain, and private keys May contain a CSR in PKCS10 format Can be put inside email body Has a BEGIN CERTIFICATE and END CERTIFICATE . DER is the parent of PEM and in a binary format. PKCS7 is used by Java and doesn't contain private key. PKCS12 is used by windows and can contain private key.","title":"Ways to present a certificate"},{"location":"developer/openssl/#types-and-transformations","text":"x509 v3 is RFC 5280 File Extensions: DER is binary and contains raw format using asn.1 encoding PEM is ascii and contains base64 encoding using begin / end CRT is extension for certificates and MS format. This may be encoded as DER or PEM. CER is synonym for CRT KEY is used for both public and private PKCS#8 keys and may be encoded as DER or PEM. PKCS#7 is a complex format design for transport of signed or encrypted data Defined RFC 2315. Usually .p7b and .p7c extension. Supported by java keytool. contains --BEGIN PKCS line contains only certs, chain certs doesn't contain private keys base64 encoded ascii file PKCS#12 - binary format to store and protect server key along with entire chain .pfx, .p12 stores server certs, any intermediate certs, private key in one encrypted file used to import into browser used to convert into jks using keytool PKCS#8 is a newer and recommended format for RSA keys","title":"Types and Transformations"},{"location":"developer/openssl/#install-openssl","text":"# install brew update brew install openssl brew cask install keystore-explorer # upgrade mv /usr/bin/openssl /usr/bin/openssl_old brew unlink openssl brew link -force openssl ln -s /usr/local/Cellar/../openssl /usr/bin/openssl # validate openssl version -a which openssl # building wget http://www.openssl.org.source/openssl-.tar.gz ./config --prefix = /opt/openssl --openssldir = /opt/openssl enable-ec nistp_64_gcc_128 make depend make sudo make install # config openssl help cd /usr/lib/../openssl.conf // look inside misc # list of supported ciphers openssl ciphers -v 'ALL:COMPLEMENTOFALL'","title":"Install OpenSSL"},{"location":"developer/openssl/#test-ssl-certificate-of-a-url","text":"openssl s_client -connect subject.com:443 -showcerts # check cert expiry date of ssl url openssl s_client -connect subject.com:443 2 >/dev/null | openssl x509 -noout -enddate # check if ssl or tls is accepted on a url openssl s_client -connect secureurl.com:443 -ssl2 openssl s_client -connect secureurl.com:443 \u2013ssl3 openssl s_client -connect secureurl.com:443 \u2013tls1 openssl s_client -connect secureurl.com:443 \u2013tls1_1 openssl s_client -connect secureurl.com:443 \u2013tls1_2 # verify if a particular cipher is accepted on url openssl s_client -cipher 'ECDHE-ECDSA-AES256-SHA' -connect secureurl:443 # verify if the cert and the key belong to each other. # checksum should match openssl x509 -noout -modulus -in server.crt | openssl md5 openssl rsa -noout -modulus -in server.key | openssl md5","title":"Test SSL Certificate of a URL"},{"location":"developer/openssl/#setup-root-ca","text":"JamieLinux Guide DigitalOcean Guide mkdir root/ca cd root/ca mkdir csr certs crl newcerts private public chmod 700 private touch index.txt echo 1000 > serial // Configure file 'root/ca/openssl.cnf' [ ca ] # `man ca` default_ca = CA_default [ CA_default ] # Directory and file locations. dir = /root/ca certs = $dir /certs crl_dir = $dir /crl new_certs_dir = $dir /newcerts database = $dir /index.txt serial = $dir /serial RANDFILE = $dir /private/.rand # The root key and root certificate. private_key = $dir /private/ca.key.pem certificate = $dir /certs/ca.cert.pem # For certificate revocation lists. crlnumber = $dir /crlnumber crl = $dir /crl/ca.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_strict [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of `man ca`. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the `ca` man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the `req` tool (`man req`), are applied when creating certs or csr. default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca [ req_distinguished_name ] # See <https://en.wikipedia.org/wiki/Certificate_signing_request>. countryName = Country Name ( 2 letter code ) stateOrProvinceName = State or Province Name localityName = Locality Name 0 .organizationName = Organization Name organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = GB stateOrProvinceName_default = England localityName_default = 0 .organizationName_default = Alice Ltd #organizationalUnitName_default = #emailAddress_default = [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = client, email nsComment = \"OpenSSL Generated Client Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (`man x509v3_config`). authorityKeyIdentifier = keyid:always [ ocsp ] # Extension for OCSP signing certificates (`man ocsp`). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning // end of config file","title":"Setup Root CA"},{"location":"developer/openssl/#generate-root-ca-private-key","text":"openssl genrsa -aes256 -out private/ca.key.pem -passout pass:changeit 4096 # read-only for owner chmod 400 private/ca.key.pem # To verify enter the pass phrase openssl rsa -in private/ca.key.pem -check","title":"Generate Root CA Private Key"},{"location":"developer/openssl/#generate-root-ca-certificate","text":"# Specify a conf file to use with the -config option # otherwise openssl defaults to /etc/pki/tls/openssl.cnf # generate csr and sign it openssl req -config openssl.cnf -key private/ca.key.pem -new -x509 -days 7300 -sha256 -extensions v3_ca -out certs/ca.cert.pem -passin pass:changeit # read access to all chmod 444 certs/ca.cert.pem # alternative inline option -subj '/C=UA/O=myCompany/CN=myCompanyRootCA' # verify the cert openssl x509 -noout -text -in certs/ca.cert.pem # verify the cert dates openssl x509 -noout -dates -in certs/ca.cert.pem # verify the cert signing authority openssl x509 -noout -issuer -issuer_hash -in certs/ca.key.pem # verify the cert's hash openssl x509 -noout -text -in certs/ca.key.pem | grep 'Signature Algorithm' # verify signature openssl x509 -noout -in certs/ca.cert.pem -sha256 -fingerprint # verify the checksum of private key and cert match, vouching the cert is signed by private key openssl x509 -noout -modulus -in certs/ca.cert.pem | openssl md5 openssl rsa -noout -modulus -in private/ca.key.pem -passin pass:changeit | openssl md5","title":"Generate Root CA Certificate"},{"location":"developer/openssl/#generate-root-csr-and-sign-it-to-generate-root-ca-certificate","text":"# generate csr openssl req -config openssl.cnf \\ -key private/ca.key.pem -new -days 7300 -sha256 \\ -out csr/ca.csr.pem -passin pass:changeit # sign csr and generate certificate openssl req -config openssl.cnf \\ -in csr/ca.csr.pem -key private/ca.key.pem -x509 -sha256 \\ -extensions v3_ca -out certs/ca.cert2.pem -passin pass:changeit # every one has read access chmod 444 certs/ca.cert2.pem","title":"Generate Root CSR and sign it to generate Root CA Certificate"},{"location":"developer/openssl/#extract-root-ca-public-key","text":"# extract rootCA public key using private key openssl rsa -in private/ca.key.pem -pubout -out public/ca.public.key.pem # extract rootCA public key using certificate openssl x509 -pubkey -noout -in certs/ca.cert.pem > public/ca.public.key.pem","title":"Extract Root CA Public Key"},{"location":"developer/openssl/#generate-self-signed-certificate","text":"# generate self-signed certificate and key file with 4096 bit rsa # this will generate cert valid for one year openssl req -x509 -sha256 -nodes -newkey rsa:4096 -keyout selfsigned.key -out selfsignedcert.pem # self-signed valid for 2 years openssl req -x509 -sha256 -nodes -days 730 -newkey rsa:4096 -keyout selfsigned.key -out selfsignedcert.pem # how do you know if a certificate is self-signed? # The issuer and subject attributes will be identical","title":"Generate self-signed Certificate"},{"location":"developer/openssl/#intermediate-ca","text":"# intermediate mkdir ca/intermediate cd intermediate mkdir certs crtl csr newcerts private public chmod 700 private touch index.txt echo 1000 > serial echo 1000 > crlnumber // Copy to ` ca/intermediate/openssl.cnf ` **. [ ca ] # `man ca` default_ca = CA_default [ CA_default ] # Directory and file locations. dir = /Users/manish/Documents/openssl/ca/intermediate certs = $dir /certs crl_dir = $dir /crl new_certs_dir = $dir /newcerts database = $dir /index.txt serial = $dir /serial RANDFILE = $dir /private/.rand # The root key and root certificate. private_key = $dir /private/intermediate.key.pem certificate = $dir /certs/intermediate.cert.pem # For certificate revocation lists. crlnumber = $dir /crlnumber crl = $dir /crl/intermediate.crl.pem crl_extensions = crl_ext default_crl_days = 30 # SHA-2. default_md = sha256 name_opt = ca_default cert_opt = ca_default default_days = 375 preserve = no policy = policy_loose [ policy_strict ] # The root CA should only sign intermediate certificates that match. # See the POLICY FORMAT section of `man ca`. countryName = match stateOrProvinceName = match organizationName = match organizationalUnitName = optional commonName = supplied emailAddress = optional [ policy_loose ] # Allow the intermediate CA to sign a more diverse range of certificates. # See the POLICY FORMAT section of the `ca` man page. countryName = optional stateOrProvinceName = optional localityName = optional organizationName = optional organizationalUnitName = optional commonName = supplied emailAddress = optional [ req ] # Options for the `req` tool (`man req`). default_bits = 2048 distinguished_name = req_distinguished_name string_mask = utf8only # SHA-1 is deprecated, so use SHA-2 instead. default_md = sha256 # Extension to add when the -x509 option is used. x509_extensions = v3_ca [ req_distinguished_name ] # See <https://en.wikipedia.org/wiki/Certificate_signing_request>. countryName = US stateOrProvinceName = Arizona localityName = Chandler 0 .organizationName = Deliwala Ltd organizationalUnitName = Organizational Unit Name commonName = Common Name emailAddress = Email Address # Optionally, specify some defaults. countryName_default = US stateOrProvinceName_default = Arizona localityName_default = Chandler 0 .organizationName_default = Deliwala Ltd organizationalUnitName_default = emailAddress_default = [ v3_ca ] # Extensions for a typical CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ v3_intermediate_ca ] # Extensions for a typical intermediate CA (`man x509v3_config`). subjectKeyIdentifier = hash authorityKeyIdentifier = keyid:always,issuer basicConstraints = critical, CA:true, pathlen:0 keyUsage = critical, digitalSignature, cRLSign, keyCertSign [ usr_cert ] # Extensions for client certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = client, email nsComment = \"OpenSSL Generated Client Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment extendedKeyUsage = clientAuth, emailProtection [ server_cert ] # Extensions for server certificates (`man x509v3_config`). basicConstraints = CA:FALSE nsCertType = server nsComment = \"OpenSSL Generated Server Certificate\" subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer:always keyUsage = critical, digitalSignature, keyEncipherment extendedKeyUsage = serverAuth [ crl_ext ] # Extension for CRLs (`man x509v3_config`). authorityKeyIdentifier = keyid:always [ ocsp ] # Extension for OCSP signing certificates (`man ocsp`). basicConstraints = CA:FALSE subjectKeyIdentifier = hash authorityKeyIdentifier = keyid,issuer keyUsage = critical, digitalSignature extendedKeyUsage = critical, OCSPSigning","title":"Intermediate CA"},{"location":"developer/openssl/#generate-intermediate-ca","text":"An intermediate ca signs certs on behalf of the root ca. The root ca signs the intermediate cert, forming a chain of trust. # create the intermediate key openssl genrsa -aes256 \\ -out intermediate/private/intermediate.key.pem 4096 chmod 400 intermediate/private/intermediate.key.pem # create the intermediate certificate openssl req -config intermediate/openssl.cnf \\ -new -sha256 \\ -key intermediate/private/intermediate.key.pem \\ -out intermediate/csr/intermediate.csr.pem # sign the intermediate certificate, use the root ca conf # with appropriate extensions # make sure you say 'y' to sign the certificate. openssl ca -config openssl.cnf \\ -extensions v3_intermediate_ca -days 3650 -notext -md sha256 \\ -in intermediate/csr/intermediate.csr.pem \\ -out intermediate/certs/intermediate.cert.pem chmod 444 intermediate/certs/intermediate.cert.pem # verify the intermediate certificate openssl x509 -noout -text -in intermediate/certs/intermediate.cert.pem # verify the intermediate against the root openssl verify -CAfile certs/ca.cert.pem intermediate/certs/intermediate.cert.pem # create the certificate chain file cat intermediate/certs/intermediate.cert.pem certs/ca.cert.pem > intermediate/certs/ca-chain.cert.pem chmod 444 intermediate/certs/ca-chain.cert.pem","title":"Generate Intermediate CA"},{"location":"developer/openssl/#other-commands","text":"# view a certificate openssl x509 -in some.crt -noout -text # check hash value of a cert openssl x509 \u2013inform der \u2013in sslcert.der \u2013out sslcert.pem # remove passphrase from key openssl rsa -in certkey.key -out nopassphrase.key # generate csr and 2048-bit private rsa key openssl req -out some.csr -newkey rsa:2048 -nodes -keyout private.key # create intermediate CA private key openssl genrsa -out intermediateCA.key -aes256 -passout pass:changeit 4096 # create intermediate CA certificate request openssl req -new -key intermediateCA.key -out intermediateCA.csr -subj '/C=UA/O=MyCompany/CN=MyCompanyIntermediateCA' -passin pass:changeit # create v3 x509 extensions cat <<EOF >v3_ca.ext subjectKeyIdentifier=hash authorityKeyIdentifier=keyid:always,issuer:always basicConstraints=CA:true //this means that certificate can sign other certificates EOF # review text version of csr openssl x509 -intermediateCA.csr -noout -text # sign intermediate CA csr with root CA private key and add x509 v3 extensions openssl x509 -req -in intermediateCA.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -CAserial rootCA.srl -extfile v3_ca.ext -out intermediateCA.crt -days 365 -sha256 -passin pass:changeit # verify intermediate CA certificate openssl verify -CAfile rootCA.crt intermediateCA.crt # if required, generate csr from a certificate openssl x509 -x509toreq -in intermediateCA.crt -out intermediateCA-2.csr -signkey rootCA.key -passin pass:changeit # verify if a certificate was issued by a specific CA. openssl verify -verbose -CAfile cacert.pem server.crt server.crt: OK # generate server private key openssl genrsa -out server.key -aes256 -passout pass:changeit 4096 # generate csr openssl req -new -key server.key -out server.csr -subj '/C=UA/O=MyCompany/CN=example.com' -passin pass:changeit # sign csr using intermediate CA private key openssl x509 -req -in server.csr -CA intermediateCA.crt -CAkey intermediateCA.key -CAcreateserial -CAserial intermediateCA.srl -out server.crt -days 365 -sha256 -passin pass:changeit # decrypt server private key to allow webserver # to use it without prompting for password mv server.key server.key.secure openssl rsa -in server.key.secure -out server.key -passin pass:changeit","title":"Other Commands"},{"location":"developer/openssl/#sign-server-certificate-using-intermediate-ca","text":"# create a private key openssl genrsa -aes256 -out intermediate/private/www.myhost.com.key.pem 2048 chmod 400 intermediate/private/www.myhost.com.key.pem # create a CSR openssl req -config intermediate/openssl.cnf -key intermediate/private/www.myhost.com.key.pem -new -sha256 -out intermediate/csr/www.myhost.com.csr.pem # sign the CSR openssl ca -config intermediate/openssl.cnf -extensions server_cert -day 375 -notext -md sha256 -in intermediate/csr/www.myhost.com.csr.pem -out intermediate/certs/www.myhost.com.cert.pem chmod 444 intermediate/certs/www.myhost.com.cert.pem # verify openssl x509 -noout -text -in intermediate/certs/www.myhost.com.cert.pem # verify against CA cert chain openssl verify -CAfile intermediate/certs/ca-chain.cert.pem intermediate/certs/www.myhost.com.cert.pem # text version of certificate openssl x509 -in rootCA.crt -text # view pem certificates openssl x509 -in cert.pem -text -noout openssl x509 -in cert.cer -text -noout openssl x509 -in cert.crt -text -noout # you may see error if you are using # pem command to view the certificate unable to load certificate 12626 :error:0906D06C:PEM routines:PEM_read_bio:no start line:pem_lib.c:647:Expecting: TRUSTED CERTIFICATE # view der certificates openssl x509 -in certificate.der -inform der -text -noout # convert der (.crt, .cer, .der) to pem openssl x509 -inform der -in cert.cer -out cert.pem # pem to der openssl x509 -in cert.crt -outform der -out cert.der openssl x509 -in cert.pem -outform der -out cert.der # pem to p7b openssl crl2pkcs7 -nocrl -certfile certificate.cer -out certificate.p7b -certfile CAcert.cer # pem to pfx openssl pkcs12 -export -out certificate.pfx -inkey privateKey.key -in certificate.crt -certfile CAcert.crt # pem to crt openssl x509 -outform der -in cert.pem -out cert.crt # der to pem openssl x509 -in cert.crt -inform der -outform pem -out cert.pem # p7b to pem openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer # p7b to pfx openssl pkcs7 -print_certs -in certificate.p7b -out certificate.cer openssl pkcs12 -export -in certificate.cer -inkey privateKey.key-out certificate.pfx -certfile CAcert.cer # pfx to pem openssl pkcs12 -in certificate.pfx -out certificate.cer -nodes # command will put all certs and private key into a single file # you will need to copy each certificate and private key including the # begin/end statements to its individual text files and save them as .cer # convert cert and private key to pkcs#12 format openssl pkcs12 \u2013export \u2013out sslcert.pfx \u2013inkey key.pem \u2013in sslcert.pem # convert pkcs12 to pem openssl pkcs12 \u2013in cert.p12 \u2013out cert.pem openssl pkcs12 -in keystore.pfx -out keystore.pem -nodes # convert pkcs12 to pem - private key only add -nocerts as option to above # convert pkcs12 to pem - cert only add -nokeys as option to above # check contents of pkcs12 format cert openssl pkcs12 \u2013info \u2013nodes \u2013in cert.p12 # der to text openssl x509 -in cert.der -inform der -text -noout # pem to text openssl x509 -in cert.pem -inform dem -text -noout # pem to pkcs12 (.pfx, .p12) # convert pem cert and private key to pkcs12 format openssl pkcs12 -export -out cert.pfx -inkey privatekey.key -in cert.crt -certfile CACert.crt # combination - combine multiple x509 assets into a single file","title":"Sign Server Certificate using Intermediate CA"},{"location":"developer/openssl/#client-certificate","text":"# generate client private key openssl genrsa -out client.key -aes256 -passout pass:changeit 4096 # generate client certificate request openssl req -new -key client.key -out client.csr -subj '/C=UA/O=My Company/CN=My Name/emailAddress=my_name@example.com' -passin pass:changeit # sign client certificate request with intermediate CA private key openssl x509 -req -in client.csr -CA intermediateCA.crt -CAkey intermediateCA.key -CAcreateserial -CAserial intermediateCA.srl -out client.crt -days 365 -sha256 -passin pass:changeit # create CA certificate chain file cat intermediateCA.crt rootCA.crt > CAchain.pem export client certificate to PKCS#12 file to be able to import it into the browser openssl pkcs12 -export -passout pass:changeit -in client.crt -inkey client.key -certfile CAchain.pem -out client.p12 -passin pass:changeit # verify server and client certs against # the cert chain and print their contents openssl verify -CAfile CAchain.pem server.crt openssl x509 -in server.crt -text openssl verify -CAfile CAchain.pen client.crt openssl x509 -in client.crt -test","title":"Client Certificate"},{"location":"developer/openssl/#digest","text":"# sha1 for a file openssl dgst -sha1 file.txt openssl dgst -out digest.txt file.txt # sha256 for a file openssl dgst -sha256 file.txt openssl dgst -sha256 file.txt -out digest.txt # dgst options # run with unknown command to get more details openssl dgst -help # -c for colons # -hex for hexdump # -binary # -sign: sign the digest with a private key # -verify: verify a signature using private key # sign the digest of file.txt using DSA or RSA private key openssl dgst -dss1 -sign dsakey.pem -out dsasign.bin file.txt openssl -sha1 -sign rsaprivate.pem out rsasign.bin file.txt # verify signature openssl dgst -dss1 -prverify dsakey.pem -signature dsasign.bin file.txt openssl -sha1 -verify rsapublic.pem -signature rsasign.bin file.txt","title":"Digest"},{"location":"developer/openssl/#encrypt-in-des3cbc-mode","text":"# encrypt in des3/cbc mode openssl enc -des3 -salt -in plaintext.doc -out ciphertext.bin openssl enc -des3-ede-ofb -d -in ciphertext.bin -out plaintext.doc -passin pass:changeit","title":"Encrypt in DES3/CBC mode"},{"location":"developer/openssl/#dsa-key-generation","text":"openssl ecparam -genkey -name secp256r1 | openssl ec -out ec.key -aes128","title":"DSA Key Generation"},{"location":"developer/openssl/#self-signed-certificates-generating-keystore-and-truststore","text":"# use openssl to generate private key and certificate # import into keystore and truststore # generate server private key and verify it openssl genrsa -aes256 -out private/server.key.pem -passout pass:s123 4096 chmod 400 private/server.key.pem openssl rsa -in private/server.key.pem \u2013check # generate csr and sign it openssl req -key server.key.pem -new -x509 -days 30 -sha256 -out server.cert.pem -passin pass:s123 # verify the certificate openssl x509 -noout -text -in server.cert.pem # verify the dates in the certificate openssl x509 -noout -dates -in server.cert.pem # verify the cert signing authority openssl x509 -noout -issuer -issuer_hast -in server.cert.pem # verify the cert's hash openssl x509 -noout -text -in server.cert.pem | grep 'Signature Algorithm' # convert server cert from pem to pkcs12 openssl pkcs12 -export -name server-cert -in server.cert.pem -inkey server.key.pem -out server.keystore.p12 # convert pkcs12 keystore into a jks keystore keytool -importkeystore -destkeystore server.keystore.jks -srckeystore server.keystore.p12 -srcstoretype pkcs12 -alias server-cert # import server's certificate into server truststore keytool -import -alias server-cert -file server.cert.pem -keystore server.truststore.jks # import client's certificate into server's truststore keytool -import -alias client-cert -file client.cert.pem -keystore server.truststore.jks # check which certificates are in the keystore keytool -list -v -keystore server.keystore.jks -storepass sss123 //this shows fingerprint # check which certificates are in the truststore keytool -list -v -keystore server.truststore.jks -storepass sss123 # generate client side openssl genrsa -aes256 -out private/client.key.pem -passout pass:c123 4096 openssl req -key client.key.pem -new -x509 -days 30 -sha256 -out client.cert.pem -passin pass:c123 openssl pkcs12 -export -name client-.cert -in client.cert.pem -inkey client.key.pem -out client.keystore.p12 openssl pkcs12 -export -name server-cert -in client.cert.pem -inkey client.key.pem -out client.keystore.p12 keytool -importkeystore -destkeystore client.keystore.jks -srckeystore client.keystore.p12 -srcstoretype pkcs12 -alias client-cert keytool -import -alias client-cert -file client.cert.pem -keystore client.truststore.jks # import server cert into client truststore keytool -import -alias server-cert -file server.cert.pem -keystore client.truststore.jks keytool -list -v -keystore client.keystore.jks -storepass ccc123 keytool -list -v -keystore client.truststore.jks -storepass ccc123","title":"Self-signed Certificates, Generating Keystore and Truststore"},{"location":"developer/openssl/#keytool","text":"Guide keystore stores private keys and certs corresponding to public keys and truststore store third-party certificates rm \\* .jks 2 \\> /dev/null rm \\* .pem 2 \\> /dev/null # Generate private key for RootCA keytool -genkeypair -alias rootCA -dname cn = MyCompanyRootCA -validity 10000 -keyalg RSA -keysize 4096 -ext bc:c -keystore rootCA.jks -keypass changeit -storepass changeit # Generate private key for IntermediateCA keytool -genkeypair -alias intermediateCA -dname cn = MyCompanyIntermediateCA -validity 10000 -keyalg RSA -keysize 4096 -ext bc:c -keystore intermediateCA.jks -keypass changeit -storepass changeit # Generate root certificate keytool -exportcert -rfc -keystore rootCA.jks -alias rootCA -storepass changeit \\> rootCA.pem # Generate a certificate for intermediateCA and signed by rootCA, use pipeline between two commands keytool -keystore intermediateCA.jks -storepass changeit -certreq -alias intermediateCA | keytool -keystore rootCA.jks -storepass changeit -gencert -alias rootCA -ext bc = 0 -ext san = dns:intermediateCA -rfc \\> intermediateCA.pem # Import intermediateCA cert chain into intermediateCA.jks keytool -keystore intermediateCA.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore intermediateCA.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem # Generate private keys for server keytool -genkeypair -alias server -dname cn = server -validity 10000 -keyalg RSA -keysize 4096 -keystore my-keystore.jks -keypass changeit -storepass changeit # Generate a certificate for server signed by intermediateCA keytool -keystore my-keystore.jks -storepass changeit -certreq -alias server | keytool -keystore intermediateCA.jks -storepass changeit -gencert -alias intermediateCA -ext ku:c = dig,keyEnc -ext san = dns:localhost -ext eku = sa,ca -rfc \\> server.pem # Import server cert chain into my-keystore.jks keytool -keystore my-keystore.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore my-keystore.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem keytool -keystore my-keystore.jks -storepass changeit -importcert -alias server -file server.pem # Generate truststore.jks keytool -keystore my-truststore.jks -storepass changeit -importcert -trustcacerts -noprompt -alias rootCA -file rootCA.pem keytool -keystore my-truststore.jks -storepass changeit -importcert -alias intermediateCA -file intermediateCA.pem keytool -keystore my-truststore.jks -storepass changeit -importcert -alias server -file server.pem","title":"keytool"},{"location":"developer/openssl/#ssh-gen","text":"Guide Guide # Creating an SSH Key Pair for User Authentication ssh-keygen # With different ciphers ssh-keygen -t rsa -b 4096 ssh-keygen -t dsa ssh-keygen -t ecdsa -b 521 ssh-keygen -t ed25519 ssh-keygen -f ~/tatu-key-ecdsa -t ecdsa -b 521 # Copy public key to server ssh-copy-id -i ~/.ssh/tatu-key-ecdsa user@host # Copy public key to clipboard pbcopy < ~/.ssh/id_rsa.pub","title":"ssh-gen"},{"location":"developer/ssh/","text":"SSH Check if SSH Key exists ls -al ~/.ssh # if you have already generated SSH keys, you should see the following files: # id_rsa, id_rsa.pub, and known_host Create a new key pair cd ~/.ssh ssh-keygen -t rsa -b 4096 -C your@email.com # accept the default filename # optionally create a passphrase or leave is blank # Two files will be created ls ~/.ssh # id_rsa is the private key you need to protect and never reveal to anyone # id_rsa.pub is the public key you can share # if ever need to add or change passphrase ssh-keygen -p Copying the public SSH key # Copies the content of id_rsa.pub to your clipboard pbcopy < ~/.ssh/id_rsa.pub # or copy the output to your clipboard cat ~/.ssh/id_rsa.pub Add your SSH key your ssh-agent ssh-agent is a program that starts when you log in and stores your private keys. For it to work properly, it needs to be running and have a copy of your private key. By running this, the default private key is used. # make sure ssh-agent is running eval \" $( ssh-agent -s ) \" # add your private key to ssh-agent ssh-add ~/.ssh/id_rsa # check your private key was added to ssh-agent ssh-add -l Manage multiple SSH keys Although its a good practice to have only one key pair per device, you may need to use more than one pair of key pair. The issue now is that you need to specify which key pair to use for which ssh connection. #create a new file nano ~/..ssh/config # contents Host github.com HostName github.com User mdeliw IdentityFile ~/.ssh/id_rsa IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host bitbucket-corporate HostName bitbucket.org User mdeliw IdentityFile ~/.ssh/id_rsa_corp IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host bitbucket-personal HostName bitbucket.org User mdeliw IdentityFile ~/.ssh/id_rsa_personal IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host myserver HostName ssh.username.com Port 1111 User username IdentityFile ~/.ssh/id_rsa_personal IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes # delete all keys from ssh-agent ssh-add -D # check all keys are deleted from ssh-agent ssh-add -l # use id_rsa_corp key git clone git@bitbucket-corporate:company/project.git # use id_rsa_personal key git clone git@bitbucket-personal:username/my-project.git # you can ssh into myserver without entering port and username ssh myserver","title":"SSH"},{"location":"developer/ssh/#ssh","text":"","title":"SSH"},{"location":"developer/ssh/#check-if-ssh-key-exists","text":"ls -al ~/.ssh # if you have already generated SSH keys, you should see the following files: # id_rsa, id_rsa.pub, and known_host","title":"Check if SSH Key exists"},{"location":"developer/ssh/#create-a-new-key-pair","text":"cd ~/.ssh ssh-keygen -t rsa -b 4096 -C your@email.com # accept the default filename # optionally create a passphrase or leave is blank # Two files will be created ls ~/.ssh # id_rsa is the private key you need to protect and never reveal to anyone # id_rsa.pub is the public key you can share # if ever need to add or change passphrase ssh-keygen -p","title":"Create a new key pair"},{"location":"developer/ssh/#copying-the-public-ssh-key","text":"# Copies the content of id_rsa.pub to your clipboard pbcopy < ~/.ssh/id_rsa.pub # or copy the output to your clipboard cat ~/.ssh/id_rsa.pub","title":"Copying the public SSH key"},{"location":"developer/ssh/#add-your-ssh-key-your-ssh-agent","text":"ssh-agent is a program that starts when you log in and stores your private keys. For it to work properly, it needs to be running and have a copy of your private key. By running this, the default private key is used. # make sure ssh-agent is running eval \" $( ssh-agent -s ) \" # add your private key to ssh-agent ssh-add ~/.ssh/id_rsa # check your private key was added to ssh-agent ssh-add -l","title":"Add your SSH key your ssh-agent"},{"location":"developer/ssh/#manage-multiple-ssh-keys","text":"Although its a good practice to have only one key pair per device, you may need to use more than one pair of key pair. The issue now is that you need to specify which key pair to use for which ssh connection. #create a new file nano ~/..ssh/config # contents Host github.com HostName github.com User mdeliw IdentityFile ~/.ssh/id_rsa IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host bitbucket-corporate HostName bitbucket.org User mdeliw IdentityFile ~/.ssh/id_rsa_corp IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host bitbucket-personal HostName bitbucket.org User mdeliw IdentityFile ~/.ssh/id_rsa_personal IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes Host myserver HostName ssh.username.com Port 1111 User username IdentityFile ~/.ssh/id_rsa_personal IdentitiesOnly yes AddKeysToAgent yes UseKeychain yes # delete all keys from ssh-agent ssh-add -D # check all keys are deleted from ssh-agent ssh-add -l # use id_rsa_corp key git clone git@bitbucket-corporate:company/project.git # use id_rsa_personal key git clone git@bitbucket-personal:username/my-project.git # you can ssh into myserver without entering port and username ssh myserver","title":"Manage multiple SSH keys"},{"location":"jainism/aarti/","text":"Background \u0a86\u0ab0\u0aa4\u0abf \u00c4 + Rati - Experience the spiritual joy (Rati) from (\u00c4) all directions. End of Art (misery) The practice of \u0a86\u0ab0\u0aa4\u0abf and \u0aae\u0a82\u0a97\u0ab3\u0aa6\u0abf\u0ab5\u0acb started around 12th Century AD by the inspiration of \u0a86\u0a9a\u0abe\u0ab0\u0aaf \u0ab9\u0ac7\u0aae\u0a9a\u0a82\u0aa6\u0acd\u0ab0\u0a9c\u0abf. He inspired the then Hindu \u0ab0\u0abe\u0a9c\u0abe \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab2 with teaching of non-violence and true meaning of religion. \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab2 started the practice of \u0a86\u0ab0\u0aa4\u0abf and \u0aa6\u0abf\u0ab5\u0acb. Hence the \u0aae\u0a82\u0a97\u0ab3\u0aa6\u0abf\u0ab5\u0acb names \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0ab2 in the song. The \u0a86\u0ab0\u0aa4\u0abf was written by \u0ab6\u0ac7\u0aa0 \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 of \u0aa7\u0ac1\u0aa6\u0ac7\u0ab5\u0abe (\u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe) in R\u00e4jasthan. (\u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe) is a Jain pilgrimage where the \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8 is the main \u0aaa\u0acd\u0ab0\u0aa4\u0abf\u0aae\u0abe in black marble. \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 worshipped and performed \u0a86\u0ab0\u0aa4\u0abf at the \u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe temple. He was deeply devoted to \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8, and in his old age he had to move to another village. He could not bare the separation, and at that time the \u0aa6\u0ac7\u0ab5 guarding the temple gave him a small piece of the actual \u0aae\u0ac1\u0ab0\u0acd\u0aa4\u0abf of \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8 to pray. We honor the extreme \u0aad\u0a95\u0acd\u0aa4\u0ac0 of \u0ab6\u0ac7\u0aa0 \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 by singing the \u0a86\u0ab0\u0aa4\u0abf. To free from the cycle of the material world, one needs to have bright light of [[Samitis and Guptis|five types of knowledge]]. To restrain negative activities of five senses and five characteristics of \u0ab8\u0a82\u0aae\u0aaf\u0a95\u0aa6\u0ab0\u0ab6\u0aa8. The light of the \u0a86\u0ab0\u0aa4\u0abf signifies the overcoming of fear through faith (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0aa6\u0ab0\u0ab6\u0aa8 - Right Belief) ignorance through knowledge (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Right Knowledge) negativity through virtue (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0a9a\u0abe\u0ab0\u0abf\u0aa4\u0acd\u0ab0 - Right Conduct) We light five Dipaks as symbol of [[Panch Maha Vratas|five great vows]] to practice the [[Samitis and Guptis|five Samitis]] and five types of knowledge to attain salvation. \u0aae\u0aa4\u0abf\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - knowledge gained through indriyas \u0ab6\u0acd\u0ab0\u0ac1\u0aa4\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Scriptural knowledge \u0a85\u0ab5\u0abe\u0aa7\u0ac0\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - knowledge of material world \u0aae\u0aa8\u0aaa\u0ab0\u0aaf\u0abe\u0aaf\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Mind reading capability \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Omniscience These two \u0a86\u0ab0\u0aa4\u0abf are done together - The first part consists of five lamps (\u0a9c\u0aaf \u0a9c\u0aaf / \u0a86\u0aa6\u0abf\u0aa8\u0abe\u0aa5 \u0a86\u0ab0\u0aa4\u0abf). The second part consists of a single lamp (\u0aae\u0a82\u0a97\u0ab2\u0aa6\u0abf\u0ab5\u0acb). Jai Jai Aarti \u0a9c\u0aaf \u0a9c\u0aaf \u0a86\u0ab0\u0aa4\u0abf \u0a86\u0aa6\u0ac0 \u0a9c\u0abf\u0aa8\u0a82\u0aa6\u0abe \u0aa8\u0abe\u0aad\u0abf\u0ab0\u0aaf\u0abe \u0aae\u0abe\u0ab0\u0ac1\u0aa6\u0ac7\u0ab5\u0abf \u0a95\u0acb \u0aa8\u0a82\u0aa6\u0abe With this \u00c4rati, I praise the victorius Tirthankar \u00c4din\u00e4th (also known as \u00c4deshwar or Rushabhdev), Son of King N\u00e4bhiray\u00e4 and Queen M\u00e4rudevi. \u0aaa\u0ac7\u0ab9\u0ab2\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0aaa\u0ac1\u0a9c\u0abe \u0a95\u0abf\u0a9c\u0ac7 \u0aa8\u0ab0\u0aad\u0ab5 \u0aaa\u0abe\u0aae\u0abf\u0aa8\u0ac7 \u0ab2\u0abe\u0ab9\u0acb \u0ab2\u0abf\u0a9c\u0ac7 First aarti is for worshipping Adinath. One can have such auspicious opportunity by having human life. \u0aa6\u0ac1\u0ab8\u0ab0\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0aa6\u0abf\u0aa8 \u0aa6\u0aaf\u0abe\u0ab2\u0abe \u0aa7\u0ac1\u0ab2\u0ac7\u0ab9\u0abe \u0aae\u0a82\u0aa1\u0aaa \u0aae\u0ac7 \u0a9c\u0a97 \u0a85\u0a9c\u0ab5\u0abe\u0ab3\u0abe Second aarti is for Adinath, who is merciful to the poor (ones not on the right path to overcome misery of the material world), and whose virtues enlighten even poorly lit places (entire world). \u0aa4\u0ac0\u0ab8\u0ab0\u0ac0 \u0a85\u0ab0\u0aa4\u0abf \u0aa4\u0acd\u0ab0\u0abf\u0aad\u0ac1\u0ab5\u0aa8 \u0aa6\u0ac7\u0ab5\u0abe \u0ab8\u0ac1\u0ab0 \u0aa8\u0ab0 \u0a87\u0aa8\u0aa6\u0acd\u0ab0 \u0a95\u0ab0\u0ac7 \u0aa4\u0acb\u0ab0\u0abf \u0ab8\u0ac7\u0ab5\u0abe Third aarti is for Adinath who knows past, present and future of all substances of the universe. To whom dieties, humans, and king of heavenly beings are eager to serve. \u0a93\u0aa5\u0ac0 \u0a85\u0ab0\u0aa4\u0abf \u0a9a\u0acc\u0a97\u0aa4\u0abf \u0a9a\u0ac2\u0ab0\u0ac7 \u0aae\u0aa8 \u0ab5\u0abe\u0aa8\u0a9a\u0ac0\u0aa4 \u0aab\u0ab3 \u0ab6\u0ac0\u0ab5 \u0ab8\u0ac1\u0a96 \u0aaa\u0ac1\u0ab0\u0ac7 Fourth aarti is to get rid of the cycle of four destinies (Human, Heavenly beings, hellish beings and animals). By doing so the goal of attaining everlasting happiness is succeeded. \u0aaa\u0a82\u0a9a\u0aae\u0abf \u0a85\u0ab0\u0aa4\u0abf \u0aaa\u0ac1\u0aa8\u0acd\u0aaf \u0a89\u0aaa\u0abe\u0aaf \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 \u0ab0\u0ac1\u0ab6\u0aad \u0a97\u0ac1\u0aa3 \u0a97\u0abe\u0aaf\u0abe Fifth aarti is for manifestation of good karma that gave Mulchand an opportunity to praise the great qualities of Rishabhdev. Mangal Divo \u0aae\u0a82\u0a97\u0ab2 means to eradicate \u0aaa\u0abe\u0aaa, to free our selves from \u0ab8\u0a82\u0ab8\u0abe\u0ab0, to remove the darkness of ignorance, to have an auspicious opportunity to practice Right Religion, and be on the path of Moksha as expounded by \u0aa5\u0ac0\u0ab0\u0aa5\u0a82\u0a95\u0ab0. One Dipak symbolizes \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8, and the true qualities of the souls are forever realized. \u201cI want to enlighten my inner Dipak just like this Mangal D\u00ebvo by attaining \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8. \u0aa6\u0abf\u0ab5\u0acb \u0ab0\u0ac7 \u0aa6\u0abf\u0ab5\u0acb \u0aaa\u0acd\u0ab0\u0aad\u0ac1 \u0aae\u0a82\u0a97\u0ab2\u0ac0\u0a95 \u0aa6\u0abf\u0ab5\u0acb \u0a86\u0ab0\u0aa4\u0abf \u0a89\u0aa4\u0abe\u0ab0\u0aa3 \u0aac\u0ab5\u0ac1 \u0a9a\u0ac0\u0ab0\u0a82\u0a9c\u0ac0\u0ab5\u0acb Lord! This is the auspicious lamp, may those who perform aarti live long. \u0ab8\u0acb\u0ab9\u0abe\u0aae\u0aa3\u0ac1 \u0a98\u0ac7\u0ab0 \u0aaa\u0ab0\u0acd\u0ab5 \u0aa6\u0abf\u0ab5\u0abe\u0ab3\u0abf, \u0a85\u0aae\u0acd\u0aac\u0ab0 \u0a96\u0ac7\u0ab2\u0ac7 \u0a85\u0aae\u0ab0\u0abe\u0aac\u0abe\u0ab3\u0ac0 Performing aarti is blissful as the occasion of Diwali in our houses and gods rejoice in the heavens. \u0aa6\u0ac0\u0aaa\u0abe\u0ab3 \u0aad\u0aa3\u0ac7 \u0a8f\u0aa3\u0ac7 \u0a95\u0ac1\u0ab3 \u0a85\u0a9c\u0ab5\u0ab2\u0ac7, \u0aad\u0abe\u0ab5\u0ac7 \u0aad\u0a97\u0aa4\u0ac7 \u0ab5\u0abf\u0aa7\u0acd\u0aa8 \u0aa8\u0abf\u0ab5\u0abe\u0ab0\u0abf Dep\u00e4l (poet) says by this the family (of the Devotee) is blessed and obstacles are overcome by worship by devotion. \u0aa6\u0ac0\u0aaa\u0ab3 \u0aad\u0aa3\u0ac7 \u0a8f\u0aa3\u0acb \u0a8f \u0a95\u0ab2\u0abf\u0a95\u0abe\u0ab2\u0ac7, \u0a86\u0ab0\u0aa4\u0ac0 \u0a89\u0aa4\u0abe\u0ab0\u0abf \u0ab0\u0abe\u0a9c\u0abe \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab3\u0ac7 Dep\u00e4l says in our times (Kalyug), King Kumarpal performed the aarti. \u0a85\u0aae \u0a98\u0ac7\u0ab0 \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95 \u0aa4\u0ac1\u0aae \u0a98\u0ac7\u0ab0 \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95, \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95 \u0a9a\u0aa4\u0ac1\u0ab0\u0ab5\u0ac0\u0aa7 \u0ab8\u0a82\u0a98 \u0aa8\u0ac7 \u0ab9\u0acb\u0a9c\u0acb Let there be bliss in our house, in your house and in the entire four folded Jain community including the S\u00e4dhus, S\u00e4dhvis, Shr\u00e4vaks, and the Shr\u00e4vik\u00e4s. Panch Parmesti Aarti \u0aaa\u0a82\u0a9a \u0aaa\u0ab0\u0aae\u0ac7\u0ab8\u0acd\u0aa5\u0abf \u0a86\u0ab0\u0aa4\u0abf: Five supreme beings are the fivefold hierarchy of the religious authorities: - Arihant - Ashiri (Siddhas) - \u00c4ch\u00e4ry\u00e4s - Up\u00e4dh\u00e4ya - Munis (Sadhus and Sadhvis) - A+A+A+U+M = OM \u0a87\u0ab9 \u0ab5\u0abf\u0aa7\u0abf \u0aae\u0a82\u0a97\u0ab2 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0abf\u0a9c\u0ac7, \u0aaa\u0a82\u0a9a \u0aaa\u0ab0\u0aae\u0aaa\u0aa6 \u0aad\u0a9c \u0ab8\u0ac1\u0a96 \u0ab2\u0ac0\u0a9c\u0ac7 This \u00c4rati is for five supreme beings. \u0aaa\u0ab9\u0ab2\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a9c\u0abf\u0aa8\u0ab0\u0abe\u0a9c\u0abe, \u0aad\u0ab5\u0aa6\u0aa7\u0abf \u0aaa\u0abe\u0ab0 \u0a89\u0aa4\u0abe\u0ab0 \u0a9c\u0abf\u0ab9\u0abe\u0a9c\u0abe First \u00c4rati is for Arihanta Bhagw\u00e4n who helps us swim the transmigratory ocean. \u0aa6\u0ac1\u0ab8\u0ab0\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0abf\u0aa6\u0acd\u0aa7\u0aa8 \u0a95\u0ac7\u0ab0\u0ac0, \u0ab8\u0ac1\u0aae\u0abf\u0ab0\u0aa4 \u0a95\u0ab0\u0aa4 \u0aae\u0abf\u0a9f\u0ac7 \u0aad\u0ab5 \u0aab\u0ac7\u0ab0\u0ac0 Second \u00c4rati is for Siddh\u00e4 Bhagw\u00e4n, remembering their qualities, one ends their four realms of existence. \u0aa4\u0abf\u0a9c\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0ac1\u0ab0 \u0aae\u0ac2\u0aa8\u0abf\u0a82\u0aa6\u0abe, \u0a9c\u0aa8\u0aae \u0aae\u0ab0\u0aa8 \u0aa6\u0ac1\u0a83\u0a96 \u0aa6\u0ac1\u0ab0 \u0a95\u0ab0\u0abf\u0a82\u0aa6\u0abe Third \u00c4rati is for \u00c4ch\u00e4rya Bhagw\u00e4n, remembering their qualities, one ends the misery of life and ends the cycle of life and death. \u0a9a\u0acc\u0aa5\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a89\u0ab5\u0a9c\u0abe\u0aaf\u0abe, \u0aa6\u0ab0\u0acd\u0ab6\u0aa8 \u0a95\u0ab0\u0aa4 \u0aaa\u0abe\u0aaa \u0aaa\u0ab2\u0abe\u0aaf\u0abe Fourth \u00c4rati is for Up\u00e4dhy\u00e4ya Bhagw\u00e4n. Looking at him, one washes their inauspicious intentions. \u0aaa\u0abe\u0a82\u0a9a\u0aae\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0abe\u0aa7\u0ac1 \u0aa4\u0abf\u0ab9\u0abe\u0ab0\u0abf, \u0a95\u0ac1\u0aae\u0aa4\u0abf \u0ab5\u0abf\u0aa8\u0abe\u0ab6\u0aa8 \u0a9c\u0ac0\u0ab5 \u0a85\u0aa7\u0abf\u0a95\u0abe\u0ab0\u0ac0 Fifth \u00c4rati is for Muniraj. When one remembers him, one's bad intentions vanish and one is on the way to Moksh\u00e4. \u0a9b\u0a9f\u0acd\u0aa0\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0 \u0a9c\u0abf\u0aa8\u0ab5\u0abe\u0aa8\u0abf, \u0aa7\u0abe\u0aa8\u0aa4 \u0ab8\u0acd\u0ab5\u0ab0\u0acd\u0aa3 \u0aae\u0ac1\u0a95\u0aa4\u0abf \u0ab8\u0ac1\u0a96\u0aa6\u0abe\u0aa8\u0ac0 Sixth \u00c4rati is for Holy Scriptures. Poet Ghanat says that this one obtains everlasting internal happiness. \u0ab8\u0abe\u0aa4\u0aae\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a9c\u0abf\u0aa8\u0ab5\u0abe\u0aa8\u0ac0, \u0aa7\u0abe\u0aa8\u0aa4 \u0ab8\u0acd\u0ab5\u0ab0\u0acd\u0aa3 \u0aae\u0ac1\u0a95\u0aa4\u0abf \u0ab8\u0ac1\u0a96\u0aa6\u0abe\u0aa8\u0ac0 \u0ab8\u0a82\u0a9c\u0abe \u0a95\u0ab0\u0a95\u0ac7 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0abf\u0a9c\u0ac7, \u0a85\u0aaa\u0aa8\u0acb \u0a9c\u0aa8\u0acd\u0aae \u0ab8\u0aab\u0ab3 \u0a95\u0ab0 \u0ab2\u0abf\u0a9c\u0ac7 \u0ab8\u0acb\u0aa8\u0ac7 \u0a95\u0abe \u0aa6\u0abf\u0aaa\u0a95 \u0ab0\u0aa4\u0acd\u0aa8\u0acb \u0a95\u0abf \u0aac\u0abe\u0aa4\u0ac0, \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0ab0\u0ac1 \u0aae\u0ac8\u0a82 \u0ab8\u0abe\u0ab0\u0abf \u0ab8\u0abe\u0ab0\u0abf \u0ab0\u0abe\u0aa4\u0ac0 \u0a9c\u0acb \u0a95\u0acb\u0a87 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0ab0\u0ac7 \u0a95\u0ab0\u0abe\u0ab5\u0ac7, \u0ab8\u0acb \u0aa8\u0ab0 \u0aa8\u0abe\u0ab0\u0abf \u0a86\u0aae\u0ab0 \u0aaa\u0aa6 \u0aaa\u0abe\u0ab5\u0ac7 Universal Forgiveness I forgive all souls, let all souls forgive me I am on friendly terms with all. I have no animosity towards anybody. \u0a96\u0aae\u0abe\u0a82\u0ab8\u0aa3\u0abe I do worship, bow, respect, and honor you. You are divine. You are remover of obstacles. You are like a God. You are an ocean of knowledge. I serve you. I bow my head to your feet. \u0aae\u0a82\u0a97\u0ab3 \u0aaa\u0abe\u0a9f There are four auspicious entities in the universe The Arihants are auspicious. The Siddhas are auspicious The sadhus are auspicious. The religion explained by the Omiscient is auspicious There are four supreme entities in the universer The Arihants are supreme. The Siddhas are supreme The Sadhus are supreme. The religion explained by the Omiscient is supreme I take refuge in the four entities in the universe I take refuge in the Arihant. I take refuge in the Siddhas I take refuge in the Sadhu. I take refuge in the religion explained by the Omiscient. \u0aa8\u0ab5\u0a95\u0abe\u0ab0 I bow to Arihantas, the perfect human beings who have reached enlightenment by overcoming their inner weakness, and who have attained infinte knowledge, perception, bliss, and power, and have shown the path, which brings the end to the cycle of birth, life, death, and suffering. I bow to siddhas, the liberated souls, who have attained the state of perfection and immortality, by eradicating all karmas. I bow to acharyas, who are head of the Jain congregation and preach the principles of religion and show the path of liberation, which is the unity of right faith, right knowledge, and right conduct. I bow to upadhyays who are ascetic teachers, and explain the Jain scriptures and show us the importance of the spiritual life over the material life I bow to all Sadhus and Sadhvis who strictly follow the five great vows of conduct and inspire us to live a simple life To these five types of souls, I offer my praise Such praise will help diminish my negative vibrations and sins Offering this praise is most auspicious of all benedictions ?","title":"Aarti"},{"location":"jainism/aarti/#background","text":"\u0a86\u0ab0\u0aa4\u0abf \u00c4 + Rati - Experience the spiritual joy (Rati) from (\u00c4) all directions. End of Art (misery) The practice of \u0a86\u0ab0\u0aa4\u0abf and \u0aae\u0a82\u0a97\u0ab3\u0aa6\u0abf\u0ab5\u0acb started around 12th Century AD by the inspiration of \u0a86\u0a9a\u0abe\u0ab0\u0aaf \u0ab9\u0ac7\u0aae\u0a9a\u0a82\u0aa6\u0acd\u0ab0\u0a9c\u0abf. He inspired the then Hindu \u0ab0\u0abe\u0a9c\u0abe \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab2 with teaching of non-violence and true meaning of religion. \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab2 started the practice of \u0a86\u0ab0\u0aa4\u0abf and \u0aa6\u0abf\u0ab5\u0acb. Hence the \u0aae\u0a82\u0a97\u0ab3\u0aa6\u0abf\u0ab5\u0acb names \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0ab2 in the song. The \u0a86\u0ab0\u0aa4\u0abf was written by \u0ab6\u0ac7\u0aa0 \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 of \u0aa7\u0ac1\u0aa6\u0ac7\u0ab5\u0abe (\u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe) in R\u00e4jasthan. (\u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe) is a Jain pilgrimage where the \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8 is the main \u0aaa\u0acd\u0ab0\u0aa4\u0abf\u0aae\u0abe in black marble. \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 worshipped and performed \u0a86\u0ab0\u0aa4\u0abf at the \u0a95\u0ac7\u0ab8\u0ab0\u0aaf\u0a9c\u0abf\u0abe temple. He was deeply devoted to \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8, and in his old age he had to move to another village. He could not bare the separation, and at that time the \u0aa6\u0ac7\u0ab5 guarding the temple gave him a small piece of the actual \u0aae\u0ac1\u0ab0\u0acd\u0aa4\u0abf of \u0a86\u0aa6\u0ac7\u0ab6\u0acd\u0ab5\u0ab0\u0aad\u0a97\u0ab5\u0abe\u0aa8 to pray. We honor the extreme \u0aad\u0a95\u0acd\u0aa4\u0ac0 of \u0ab6\u0ac7\u0aa0 \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 by singing the \u0a86\u0ab0\u0aa4\u0abf. To free from the cycle of the material world, one needs to have bright light of [[Samitis and Guptis|five types of knowledge]]. To restrain negative activities of five senses and five characteristics of \u0ab8\u0a82\u0aae\u0aaf\u0a95\u0aa6\u0ab0\u0ab6\u0aa8. The light of the \u0a86\u0ab0\u0aa4\u0abf signifies the overcoming of fear through faith (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0aa6\u0ab0\u0ab6\u0aa8 - Right Belief) ignorance through knowledge (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Right Knowledge) negativity through virtue (\u0ab8\u0a82\u0aae\u0aaf\u0a95\u0a9a\u0abe\u0ab0\u0abf\u0aa4\u0acd\u0ab0 - Right Conduct) We light five Dipaks as symbol of [[Panch Maha Vratas|five great vows]] to practice the [[Samitis and Guptis|five Samitis]] and five types of knowledge to attain salvation. \u0aae\u0aa4\u0abf\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - knowledge gained through indriyas \u0ab6\u0acd\u0ab0\u0ac1\u0aa4\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Scriptural knowledge \u0a85\u0ab5\u0abe\u0aa7\u0ac0\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - knowledge of material world \u0aae\u0aa8\u0aaa\u0ab0\u0aaf\u0abe\u0aaf\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Mind reading capability \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8 - Omniscience These two \u0a86\u0ab0\u0aa4\u0abf are done together - The first part consists of five lamps (\u0a9c\u0aaf \u0a9c\u0aaf / \u0a86\u0aa6\u0abf\u0aa8\u0abe\u0aa5 \u0a86\u0ab0\u0aa4\u0abf). The second part consists of a single lamp (\u0aae\u0a82\u0a97\u0ab2\u0aa6\u0abf\u0ab5\u0acb).","title":"Background"},{"location":"jainism/aarti/#jai-jai-aarti","text":"\u0a9c\u0aaf \u0a9c\u0aaf \u0a86\u0ab0\u0aa4\u0abf \u0a86\u0aa6\u0ac0 \u0a9c\u0abf\u0aa8\u0a82\u0aa6\u0abe \u0aa8\u0abe\u0aad\u0abf\u0ab0\u0aaf\u0abe \u0aae\u0abe\u0ab0\u0ac1\u0aa6\u0ac7\u0ab5\u0abf \u0a95\u0acb \u0aa8\u0a82\u0aa6\u0abe With this \u00c4rati, I praise the victorius Tirthankar \u00c4din\u00e4th (also known as \u00c4deshwar or Rushabhdev), Son of King N\u00e4bhiray\u00e4 and Queen M\u00e4rudevi. \u0aaa\u0ac7\u0ab9\u0ab2\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0aaa\u0ac1\u0a9c\u0abe \u0a95\u0abf\u0a9c\u0ac7 \u0aa8\u0ab0\u0aad\u0ab5 \u0aaa\u0abe\u0aae\u0abf\u0aa8\u0ac7 \u0ab2\u0abe\u0ab9\u0acb \u0ab2\u0abf\u0a9c\u0ac7 First aarti is for worshipping Adinath. One can have such auspicious opportunity by having human life. \u0aa6\u0ac1\u0ab8\u0ab0\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0aa6\u0abf\u0aa8 \u0aa6\u0aaf\u0abe\u0ab2\u0abe \u0aa7\u0ac1\u0ab2\u0ac7\u0ab9\u0abe \u0aae\u0a82\u0aa1\u0aaa \u0aae\u0ac7 \u0a9c\u0a97 \u0a85\u0a9c\u0ab5\u0abe\u0ab3\u0abe Second aarti is for Adinath, who is merciful to the poor (ones not on the right path to overcome misery of the material world), and whose virtues enlighten even poorly lit places (entire world). \u0aa4\u0ac0\u0ab8\u0ab0\u0ac0 \u0a85\u0ab0\u0aa4\u0abf \u0aa4\u0acd\u0ab0\u0abf\u0aad\u0ac1\u0ab5\u0aa8 \u0aa6\u0ac7\u0ab5\u0abe \u0ab8\u0ac1\u0ab0 \u0aa8\u0ab0 \u0a87\u0aa8\u0aa6\u0acd\u0ab0 \u0a95\u0ab0\u0ac7 \u0aa4\u0acb\u0ab0\u0abf \u0ab8\u0ac7\u0ab5\u0abe Third aarti is for Adinath who knows past, present and future of all substances of the universe. To whom dieties, humans, and king of heavenly beings are eager to serve. \u0a93\u0aa5\u0ac0 \u0a85\u0ab0\u0aa4\u0abf \u0a9a\u0acc\u0a97\u0aa4\u0abf \u0a9a\u0ac2\u0ab0\u0ac7 \u0aae\u0aa8 \u0ab5\u0abe\u0aa8\u0a9a\u0ac0\u0aa4 \u0aab\u0ab3 \u0ab6\u0ac0\u0ab5 \u0ab8\u0ac1\u0a96 \u0aaa\u0ac1\u0ab0\u0ac7 Fourth aarti is to get rid of the cycle of four destinies (Human, Heavenly beings, hellish beings and animals). By doing so the goal of attaining everlasting happiness is succeeded. \u0aaa\u0a82\u0a9a\u0aae\u0abf \u0a85\u0ab0\u0aa4\u0abf \u0aaa\u0ac1\u0aa8\u0acd\u0aaf \u0a89\u0aaa\u0abe\u0aaf \u0aae\u0ac1\u0ab3\u0a9a\u0a82\u0aa6 \u0ab0\u0ac1\u0ab6\u0aad \u0a97\u0ac1\u0aa3 \u0a97\u0abe\u0aaf\u0abe Fifth aarti is for manifestation of good karma that gave Mulchand an opportunity to praise the great qualities of Rishabhdev.","title":"Jai Jai Aarti"},{"location":"jainism/aarti/#mangal-divo","text":"\u0aae\u0a82\u0a97\u0ab2 means to eradicate \u0aaa\u0abe\u0aaa, to free our selves from \u0ab8\u0a82\u0ab8\u0abe\u0ab0, to remove the darkness of ignorance, to have an auspicious opportunity to practice Right Religion, and be on the path of Moksha as expounded by \u0aa5\u0ac0\u0ab0\u0aa5\u0a82\u0a95\u0ab0. One Dipak symbolizes \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8, and the true qualities of the souls are forever realized. \u201cI want to enlighten my inner Dipak just like this Mangal D\u00ebvo by attaining \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8. \u0aa6\u0abf\u0ab5\u0acb \u0ab0\u0ac7 \u0aa6\u0abf\u0ab5\u0acb \u0aaa\u0acd\u0ab0\u0aad\u0ac1 \u0aae\u0a82\u0a97\u0ab2\u0ac0\u0a95 \u0aa6\u0abf\u0ab5\u0acb \u0a86\u0ab0\u0aa4\u0abf \u0a89\u0aa4\u0abe\u0ab0\u0aa3 \u0aac\u0ab5\u0ac1 \u0a9a\u0ac0\u0ab0\u0a82\u0a9c\u0ac0\u0ab5\u0acb Lord! This is the auspicious lamp, may those who perform aarti live long. \u0ab8\u0acb\u0ab9\u0abe\u0aae\u0aa3\u0ac1 \u0a98\u0ac7\u0ab0 \u0aaa\u0ab0\u0acd\u0ab5 \u0aa6\u0abf\u0ab5\u0abe\u0ab3\u0abf, \u0a85\u0aae\u0acd\u0aac\u0ab0 \u0a96\u0ac7\u0ab2\u0ac7 \u0a85\u0aae\u0ab0\u0abe\u0aac\u0abe\u0ab3\u0ac0 Performing aarti is blissful as the occasion of Diwali in our houses and gods rejoice in the heavens. \u0aa6\u0ac0\u0aaa\u0abe\u0ab3 \u0aad\u0aa3\u0ac7 \u0a8f\u0aa3\u0ac7 \u0a95\u0ac1\u0ab3 \u0a85\u0a9c\u0ab5\u0ab2\u0ac7, \u0aad\u0abe\u0ab5\u0ac7 \u0aad\u0a97\u0aa4\u0ac7 \u0ab5\u0abf\u0aa7\u0acd\u0aa8 \u0aa8\u0abf\u0ab5\u0abe\u0ab0\u0abf Dep\u00e4l (poet) says by this the family (of the Devotee) is blessed and obstacles are overcome by worship by devotion. \u0aa6\u0ac0\u0aaa\u0ab3 \u0aad\u0aa3\u0ac7 \u0a8f\u0aa3\u0acb \u0a8f \u0a95\u0ab2\u0abf\u0a95\u0abe\u0ab2\u0ac7, \u0a86\u0ab0\u0aa4\u0ac0 \u0a89\u0aa4\u0abe\u0ab0\u0abf \u0ab0\u0abe\u0a9c\u0abe \u0a95\u0ac1\u0aae\u0abe\u0ab0\u0aaa\u0abe\u0ab3\u0ac7 Dep\u00e4l says in our times (Kalyug), King Kumarpal performed the aarti. \u0a85\u0aae \u0a98\u0ac7\u0ab0 \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95 \u0aa4\u0ac1\u0aae \u0a98\u0ac7\u0ab0 \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95, \u0aae\u0a82\u0a97\u0ab2\u0abf\u0a95 \u0a9a\u0aa4\u0ac1\u0ab0\u0ab5\u0ac0\u0aa7 \u0ab8\u0a82\u0a98 \u0aa8\u0ac7 \u0ab9\u0acb\u0a9c\u0acb Let there be bliss in our house, in your house and in the entire four folded Jain community including the S\u00e4dhus, S\u00e4dhvis, Shr\u00e4vaks, and the Shr\u00e4vik\u00e4s.","title":"Mangal Divo"},{"location":"jainism/aarti/#panch-parmesti-aarti","text":"\u0aaa\u0a82\u0a9a \u0aaa\u0ab0\u0aae\u0ac7\u0ab8\u0acd\u0aa5\u0abf \u0a86\u0ab0\u0aa4\u0abf: Five supreme beings are the fivefold hierarchy of the religious authorities: - Arihant - Ashiri (Siddhas) - \u00c4ch\u00e4ry\u00e4s - Up\u00e4dh\u00e4ya - Munis (Sadhus and Sadhvis) - A+A+A+U+M = OM \u0a87\u0ab9 \u0ab5\u0abf\u0aa7\u0abf \u0aae\u0a82\u0a97\u0ab2 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0abf\u0a9c\u0ac7, \u0aaa\u0a82\u0a9a \u0aaa\u0ab0\u0aae\u0aaa\u0aa6 \u0aad\u0a9c \u0ab8\u0ac1\u0a96 \u0ab2\u0ac0\u0a9c\u0ac7 This \u00c4rati is for five supreme beings. \u0aaa\u0ab9\u0ab2\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a9c\u0abf\u0aa8\u0ab0\u0abe\u0a9c\u0abe, \u0aad\u0ab5\u0aa6\u0aa7\u0abf \u0aaa\u0abe\u0ab0 \u0a89\u0aa4\u0abe\u0ab0 \u0a9c\u0abf\u0ab9\u0abe\u0a9c\u0abe First \u00c4rati is for Arihanta Bhagw\u00e4n who helps us swim the transmigratory ocean. \u0aa6\u0ac1\u0ab8\u0ab0\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0abf\u0aa6\u0acd\u0aa7\u0aa8 \u0a95\u0ac7\u0ab0\u0ac0, \u0ab8\u0ac1\u0aae\u0abf\u0ab0\u0aa4 \u0a95\u0ab0\u0aa4 \u0aae\u0abf\u0a9f\u0ac7 \u0aad\u0ab5 \u0aab\u0ac7\u0ab0\u0ac0 Second \u00c4rati is for Siddh\u00e4 Bhagw\u00e4n, remembering their qualities, one ends their four realms of existence. \u0aa4\u0abf\u0a9c\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0ac1\u0ab0 \u0aae\u0ac2\u0aa8\u0abf\u0a82\u0aa6\u0abe, \u0a9c\u0aa8\u0aae \u0aae\u0ab0\u0aa8 \u0aa6\u0ac1\u0a83\u0a96 \u0aa6\u0ac1\u0ab0 \u0a95\u0ab0\u0abf\u0a82\u0aa6\u0abe Third \u00c4rati is for \u00c4ch\u00e4rya Bhagw\u00e4n, remembering their qualities, one ends the misery of life and ends the cycle of life and death. \u0a9a\u0acc\u0aa5\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a89\u0ab5\u0a9c\u0abe\u0aaf\u0abe, \u0aa6\u0ab0\u0acd\u0ab6\u0aa8 \u0a95\u0ab0\u0aa4 \u0aaa\u0abe\u0aaa \u0aaa\u0ab2\u0abe\u0aaf\u0abe Fourth \u00c4rati is for Up\u00e4dhy\u00e4ya Bhagw\u00e4n. Looking at him, one washes their inauspicious intentions. \u0aaa\u0abe\u0a82\u0a9a\u0aae\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0ab8\u0abe\u0aa7\u0ac1 \u0aa4\u0abf\u0ab9\u0abe\u0ab0\u0abf, \u0a95\u0ac1\u0aae\u0aa4\u0abf \u0ab5\u0abf\u0aa8\u0abe\u0ab6\u0aa8 \u0a9c\u0ac0\u0ab5 \u0a85\u0aa7\u0abf\u0a95\u0abe\u0ab0\u0ac0 Fifth \u00c4rati is for Muniraj. When one remembers him, one's bad intentions vanish and one is on the way to Moksh\u00e4. \u0a9b\u0a9f\u0acd\u0aa0\u0ac0 \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0 \u0a9c\u0abf\u0aa8\u0ab5\u0abe\u0aa8\u0abf, \u0aa7\u0abe\u0aa8\u0aa4 \u0ab8\u0acd\u0ab5\u0ab0\u0acd\u0aa3 \u0aae\u0ac1\u0a95\u0aa4\u0abf \u0ab8\u0ac1\u0a96\u0aa6\u0abe\u0aa8\u0ac0 Sixth \u00c4rati is for Holy Scriptures. Poet Ghanat says that this one obtains everlasting internal happiness. \u0ab8\u0abe\u0aa4\u0aae\u0abf \u0a86\u0ab0\u0aa4\u0abf \u0ab6\u0acd\u0ab0\u0ac0\u0a9c\u0abf\u0aa8\u0ab5\u0abe\u0aa8\u0ac0, \u0aa7\u0abe\u0aa8\u0aa4 \u0ab8\u0acd\u0ab5\u0ab0\u0acd\u0aa3 \u0aae\u0ac1\u0a95\u0aa4\u0abf \u0ab8\u0ac1\u0a96\u0aa6\u0abe\u0aa8\u0ac0 \u0ab8\u0a82\u0a9c\u0abe \u0a95\u0ab0\u0a95\u0ac7 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0abf\u0a9c\u0ac7, \u0a85\u0aaa\u0aa8\u0acb \u0a9c\u0aa8\u0acd\u0aae \u0ab8\u0aab\u0ab3 \u0a95\u0ab0 \u0ab2\u0abf\u0a9c\u0ac7 \u0ab8\u0acb\u0aa8\u0ac7 \u0a95\u0abe \u0aa6\u0abf\u0aaa\u0a95 \u0ab0\u0aa4\u0acd\u0aa8\u0acb \u0a95\u0abf \u0aac\u0abe\u0aa4\u0ac0, \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0ab0\u0ac1 \u0aae\u0ac8\u0a82 \u0ab8\u0abe\u0ab0\u0abf \u0ab8\u0abe\u0ab0\u0abf \u0ab0\u0abe\u0aa4\u0ac0 \u0a9c\u0acb \u0a95\u0acb\u0a87 \u0a86\u0ab0\u0aa4\u0abf \u0a95\u0ab0\u0ac7 \u0a95\u0ab0\u0abe\u0ab5\u0ac7, \u0ab8\u0acb \u0aa8\u0ab0 \u0aa8\u0abe\u0ab0\u0abf \u0a86\u0aae\u0ab0 \u0aaa\u0aa6 \u0aaa\u0abe\u0ab5\u0ac7","title":"Panch Parmesti Aarti"},{"location":"jainism/aarti/#universal-forgiveness","text":"I forgive all souls, let all souls forgive me I am on friendly terms with all. I have no animosity towards anybody.","title":"Universal Forgiveness"},{"location":"jainism/aarti/#_1","text":"I do worship, bow, respect, and honor you. You are divine. You are remover of obstacles. You are like a God. You are an ocean of knowledge. I serve you. I bow my head to your feet.","title":"\u0a96\u0aae\u0abe\u0a82\u0ab8\u0aa3\u0abe"},{"location":"jainism/aarti/#_2","text":"There are four auspicious entities in the universe The Arihants are auspicious. The Siddhas are auspicious The sadhus are auspicious. The religion explained by the Omiscient is auspicious There are four supreme entities in the universer The Arihants are supreme. The Siddhas are supreme The Sadhus are supreme. The religion explained by the Omiscient is supreme I take refuge in the four entities in the universe I take refuge in the Arihant. I take refuge in the Siddhas I take refuge in the Sadhu. I take refuge in the religion explained by the Omiscient.","title":"\u0aae\u0a82\u0a97\u0ab3 \u0aaa\u0abe\u0a9f"},{"location":"jainism/aarti/#_3","text":"I bow to Arihantas, the perfect human beings who have reached enlightenment by overcoming their inner weakness, and who have attained infinte knowledge, perception, bliss, and power, and have shown the path, which brings the end to the cycle of birth, life, death, and suffering. I bow to siddhas, the liberated souls, who have attained the state of perfection and immortality, by eradicating all karmas. I bow to acharyas, who are head of the Jain congregation and preach the principles of religion and show the path of liberation, which is the unity of right faith, right knowledge, and right conduct. I bow to upadhyays who are ascetic teachers, and explain the Jain scriptures and show us the importance of the spiritual life over the material life I bow to all Sadhus and Sadhvis who strictly follow the five great vows of conduct and inspire us to live a simple life To these five types of souls, I offer my praise Such praise will help diminish my negative vibrations and sins Offering this praise is most auspicious of all benedictions","title":"\u0aa8\u0ab5\u0a95\u0abe\u0ab0"},{"location":"jainism/aarti/#_4","text":"","title":"?"},{"location":"jainism/logassa-stotra/","text":"\u0ab2\u0acb\u0a97\u0ab8\u0acd\u0ab8 \u0a89\u0a9c\u0acd\u0a9c\u0acb\u0a85-\u0a97\u0ab0\u0ac7, \u0aa7\u0aae\u0acd\u0aae-\u0aa4\u0abf\u0aa4\u0acd\u0aa5-\u0aaf\u0ab0\u0ac7 \u0a9c\u0abf\u0aa3\u0ac7 \u0a85\u0ab0\u0abf\u0ab9\u0a82\u0aa4\u0ac7 \u0a95\u0abf\u0aa4\u0a87\u0ab8\u0acd\u0ab8\u0a82, \u0a9a\u0a89\u0ab5\u0abf\u0ab8\u0acd\u0ab8\u0a82 \u0aaa\u0abf \u0a95\u0ac7\u0ab5\u0ab2\u0ac0 \u0ab2\u0acb\u0a97\u0ab8\u0acd\u0ab8 - \u0ab2\u0acb\u0a95 \u0aa8\u0ac7 (\u0ab8\u0aae\u0ab0\u0aa4 \u0ab8\u0a82\u0ab8\u0abe\u0ab0\u0a95\u0acd\u0ab7\u0ac7\u0aa4\u0acd\u0ab0\u0aa8\u0ac7), \u0ab2\u0acb\u0a95 \u0aae\u0abe \u0ab8\u0acd\u0aa5\u0abf\u0aa4 \u0aa6\u0acd\u0ab0\u0ab5\u0acd\u0aaf\u0acb \u0aa8\u0abe \u0ab8\u0acd\u0ab5\u0ab0\u0ac1\u0aaa - in the entire universe, or nature of all obejcts existing in the Universe \u0a89\u0a9c\u0acd\u0a9c\u0acb\u0a85-\u0a97\u0ab0\u0ac7 - \u0a95\u0ac7\u0ab5\u0ab3\u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0aa5\u0ac0 \u0aaa\u0acd\u0ab0\u0a95\u0abe\u0ab6\u0ac0\u0aa4 \u0a95\u0ab0\u0aa8\u0abe\u0ab0, \u0aaa\u0acd\u0ab0\u0a97\u0a9f \u0a95\u0ab0\u0aa8\u0abe\u0ab0 (\u0a97\u0ab0\u0ac7) - enlighteners shedding divine light \u0aa7\u0aae\u0acd\u0aae-\u0aa4\u0abf\u0aa4\u0acd\u0aa5-\u0aaf\u0ab0\u0ac7 - \u0a8f\u0ab5\u0abe \u0aa7\u0ab0\u0acd\u0aae\u0ab0\u0acd\u0aa4\u0ac0\u0aa5\u0aa8\u0abe \u0ab8\u0acd\u0aa5\u0abe\u0aaa\u0aa8\u0abe\u0ab0\u0abe, \u0aa7\u0ab0\u0acd\u0aae \u0ab0\u0ac1\u0aaa\u0ac0 (\u0aa7\u0aae\u0acd\u0aae) \u0aa4\u0abf\u0ab0\u0acd\u0aa5 \u0aa8\u0acb (\u0aa4\u0abf\u0aa4\u0acd\u0aa5) \u0aaa\u0acd\u0ab0\u0ab5\u0acd\u0ab0\u0aa4\u0aa8 \u0a95\u0ab0\u0aa8\u0abe\u0ab0 (\u0aaf\u0ab0\u0ac7)- Founders of the divine laws. The establishers of religious order (path of salvation in the form of religion) \u0a9c\u0abf\u0aa3\u0ac7 - \u0ab0\u0abe\u0a97 - \u0aa6\u0acd\u0ab5\u0ac7\u0ab6 \u0aa8\u0abe \u0ab5\u0abf\u0a9c\u0ac7\u0aa4\u0abe - The conguerer of attachment and hatred \u0a85\u0ab0\u0abf\u0ab9\u0a82\u0aa4\u0ac7 - \u0a95\u0ab0\u0acd\u0aae\u0ab0\u0ac1\u0aaa \u0ab6\u0aa4\u0acd\u0ab0\u0ac1\u0aa8\u0ac7 \u0ab9\u0aa3\u0aa8\u0abe\u0ab0\u0abe \u0a85\u0ab0\u0abf\u0ab9\u0a82\u0aa4\u0acb\u0aa8\u0ac0, \u0aa4\u0acd\u0ab0\u0ac8\u0ab2\u0acb\u0a95\u0acd\u0aaf \u0aaa\u0ac1\u0a9d\u0acd\u0aaf\u0acb \u0a95\u0ac0 - Lord Arihantas, the destroyer of Karma foes, worth worshipable in three worlds \u0a95\u0abf\u0aa4\u0acd\u0aa4\u0a87\u0ab8\u0acd\u0ab8\u0a82 - \u0a95\u0ac0\u0ab0\u0acd\u0aa4\u0aa8 (\u0ab8\u0acd\u0aa4\u0ac1\u0aa4\u0abf) \u0a95\u0ab0\u0abf\u0ab6 - I gloriously praise, I will eulogize \u0a9a\u0a89\u0ab5\u0abf\u0ab8\u0acd\u0ab8\u0a82 - \u0a9a\u0acb\u0ab5\u0abf\u0ab8 \u0aa4\u0ac0\u0ab0\u0acd\u0aa5\u0a82\u0a95\u0ab0 - all the 24 \u0aaa\u0abf - \u0aa4\u0aa5\u0abe - and all others \u0a95\u0ac7\u0ab5\u0ab2\u0ac0 - \u0a95\u0ab5\u0ab3 \u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0ac0\u0a93 \u0aa8\u0ac7 - Omniscent Lords, Kevalis \u0a89\u0ab8\u0aad-\u0aae\u0a9c\u0abf\u0a85\u0a82 \u0a9a \u0ab5\u0a82\u0aa6\u0ac7, \u0ab8\u0a82\u0aad\u0ab5-\u0aae\u0aad\u0abf\u0aa3\u0a82\u0aa6\u0aa3\u0a82 \u0a9a \u0ab8\u0ac1\u0aae\u0a87\u0a82 \u0a9a \u0aaa\u0a89\u0aae-\u0aaa\u0acd\u0aaa\u0ab9\u0a82 \u0ab8\u0ac1\u0aaa\u0abe\u0ab8\u0a82, \u0a9c\u0abf\u0aa3\u0a82 \u0a9a \u0a9a\u0a82\u0aa6-\u0aaa\u0acd\u0aaa\u0ab9\u0a82 \u0ab5\u0a82\u0aa6\u0ac7 \u0a89\u0ab8\u0aad - \u0a8b\u0ac1\u0ab7\u0aad\u0aa6\u0ac7\u0ab5\u0aa8\u0ac7 - I bow to Rushabhdev Swami (1) \u0aae\u0a9c\u0abf\u0a85\u0a82 -\u0a85\u0a9c\u0ac0\u0aa4\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Ajinath Swami (2) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0ab5\u0a82\u0aa6\u0ac7 - \u0ab5\u0a82\u0aa6\u0aa8 \u0a95\u0ab0\u0ac1 \u0a9b\u0ac1\u0a82 - I bow down to \u0ab8\u0a82\u0aad\u0ab5 - \u0ab8\u0a82\u0aad\u0ab5\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Sambhavnath Swami (3) \u0aae\u0aad\u0abf\u0aa3\u0a82\u0aa6\u0aa3\u0a82 - \u0a85\u0aad\u0abf\u0aa8\u0a82\u0aa6\u0aa8 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Abhinandan Swami (4) \u0a9a - \u0a85\u0aa8\u0ac7 - and to \u0ab8\u0ac1\u0aae\u0a87\u0a82 - \u0ab8\u0ac1\u0aae\u0aa4\u0abf\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Sumatinath Swami (5) \u0a9a - \u0a85\u0aa8\u0ac7 - and to \u0aaa\u0a89\u0aae-\u0aaa\u0acd\u0aaa\u0ab9\u0a82 - \u0aaa\u0aa7\u0acd\u0aae\u0aaa\u0acd\u0ab0\u0aad\u0ac1 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Padmaprabhu Swami (6) \u0ab8\u0ac1\u0aaa\u0abe\u0ab8\u0a82 - \u0ab8\u0ac1\u0aaa\u0abe\u0ab6\u0acd\u0ab0\u0acd\u0ab5\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Suparshavanath Swami (7) \u0a9c\u0abf\u0aa3\u0a82 - \u0a9c\u0abf\u0aa8 \u0aa8\u0ac7 - The conquerors of attachment and hatred \u0a9a - \u0a85\u0aa8\u0ac7 - and to \u0a9a\u0a82\u0aa6\u0aaa\u0acd\u0aaa\u0ab9\u0a82 - \u0a9a\u0a82\u0aa6\u0acd\u0ab0\u0aaa\u0acd\u0ab0\u0aad\u0ac1 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Chandraprabhu Swami (8) \u0ab5\u0a82\u0aa6\u0ac7 - \u0ab5\u0a82\u0aa6\u0aa8 \u0a95\u0ab0\u0ac1\u0a82 \u0a9b\u0ac1\u0a82 - I bow down to \u0ab8\u0ac1\u0ab5\u0abf\u0ab9\u0abf\u0a82 \u0a9a \u0aaa\u0ac1\u0aab\u0acd\u0aab\u0aa6\u0a82\u0aa4\u0a82 \u0ab8\u0ac0\u0a85\u0ab2 \u0ab8\u0abf\u0a9c\u0acd\u0a9c\u0a82\u0ab8 \u0ab5\u0abe\u0ab8\u0ac1\u0aaa\u0ac2\u0a9c\u0acd\u0a9c\u0a82 \u0a9a \u0ab5\u0abf\u0aae\u0ab2 \u0aae\u0aa3\u0a82\u0aa4\u0a82 \u0a9a \u0a9c\u0abf\u0aa3\u0a82 \u0aa7\u0aae\u0acd\u0aae\u0a82 \u0ab8\u0a82\u0aa4\u0abf\u0a82 \u0a9a \u0ab5\u0a82\u0aa6\u0abe\u0aae\u0abf \u0ab8\u0ac1\u0ab5\u0abf\u0ab9\u0abf\u0a82 - \u0ab8\u0ac1\u0ab5\u0abf\u0aa7\u0abf\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Suvidhinath Swami (9) \u0a9a - \u0a85\u0aa8\u0ac7 - and whose second name is \u0aaa\u0ac1\u0aab\u0acd\u0aab\u0aa6\u0a82\u0aa4\u0a82 - \u0aaa\u0ac1\u0ab7\u0acd\u0aaa\u0aa6\u0a82\u0aa4 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0a9b\u0ac7 \u0aa4\u0ac7\u0aae\u0aa8\u0ac7\u0964- Pushpadanta Swami \u0ab8\u0ac0\u0a85\u0ab2 -\u0ab6\u0ac0\u0aa4\u0ab3\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Shitalnath Swami (10) \u0ab8\u0abf\u0a9c\u0acd\u0a9c\u0a82\u0ab8 - \u0ab6\u0acd\u0ab0\u0ac7\u0aaf\u0abe\u0a82\u0ab6\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Shreyansanath Swami (11) \u0ab5\u0abe\u0ab8\u0ac1\u0aaa\u0ac2\u0a9c\u0acd\u0a9c\u0a82 - \u0ab5\u0abe\u0ab8\u0ac1\u0aaa\u0ac2\u0a9c\u0acd\u0aaf \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Vasupujjam Swami (12) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0ab5\u0abf\u0aae\u0ab2 - \u0ab5\u0abf\u0aae\u0ab2\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Vimalnath Swami (13) \u0aae\u0aa3\u0a82\u0aa4\u0a82 - \u0a85\u0aa8\u0a82\u0aa4\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0aae\u0abf \u0aa8\u0ac7 - Ananthnath Swami (14) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0a9c\u0abf\u0aa3\u0a82 - \u0a9c\u0abf\u0aa8 \u0aa8\u0ac7 - who have conquered attachment and hatred \u0aa7\u0aae\u0acd\u0aae\u0a82 - \u0aa7\u0ab0\u0acd\u0aae\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Dharmanath Swami (15) \u0ab8\u0a82\u0aa4\u0abf\u0a82 - \u0ab6\u0abe\u0a82\u0aa4\u0abf\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Shantinath Swami (16) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0ab5\u0a82\u0aa6\u0abe\u0aae\u0abf - \u0ab5\u0a82\u0aa6\u0aa8 \u0a95\u0ab0\u0ac1 \u0a9b\u0ac1\u0a82 - I bow down to \u0a95\u0ac1\u0a82\u0aa8\u0acd\u0aa5\u0ac1\u0a82 \u0a85\u0ab0\u0a82 \u0a9a \u0aae\u0ab2\u0acd\u0ab2\u0abf\u0a82 \u0ab5\u0a82\u0aa6\u0ac7 \u0aae\u0ac1\u0aa8\u0abf\u0ab8\u0ac1\u0ab5\u0acd\u0ab5\u0aaf\u0a82 \u0aa8\u0aae\u0abf \u0a9c\u0abf\u0aa3\u0a82 \u0a9a \u0ab5\u0a82\u0aa6\u0abe\u0aae\u0abf \u0ab0\u0abf\u0aa0\u0acd\u0aa0\u0aa8\u0ac7\u0aae\u0abf\u0a82 \u0aaa\u0abe\u0ab8\u0a82 \u0aa4\u0ab9\u0a83 \u0ab5\u0aa7\u0acd\u0aa6\u0aae\u0abe\u0aa3\u0a82 \u0a9a \u0a95\u0ac1\u0a82\u0aa8\u0acd\u0aa5\u0ac1\u0a82 - \u0a95\u0ac1\u0a82\u0aa5\u0ac1\u0a82\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Kunthunath Swami (17) \u0a85\u0ab0\u0a82 - \u0a85\u0ab0\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Arnath Swami (18) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0aae\u0ab2\u0acd\u0ab2\u0abf\u0a82 - \u0aae\u0ab2\u0acd\u0ab2\u0abf\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf\u0ac7 \u0aa8\u0ac7 - Mallinath Swami (19) \u0ab5\u0a82\u0aa6\u0ac7 - \u0ab5\u0a82\u0a97\u0aa8 \u0a95\u0ab0\u0ac1\u0a82 \u0a9b\u0ac1 - I bow down to \u0aae\u0ac1\u0aa8\u0abf\u0ab8\u0ac1\u0ab5\u0acd\u0ab5\u0aaf\u0a82 - \u0aae\u0ac1\u0aa8\u0abf\u0ab8\u0ac1\u0ab5\u0acd\u0ab0\u0aa4 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Munnisuvrata Swami (20) \u0aa8\u0aae\u0abf - \u0aa8\u0aae\u0abf\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Naminath Swami (21) \u0a9c\u0abf\u0aa3\u0a82 - \u0a9c\u0abf\u0aa8 \u0aa8\u0ac7\u0964- the conquerers of attachment and hatred \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0ab5\u0a82\u0aa6\u0abe\u0aae\u0abf - \u0ab5\u0a82\u0aa6\u0aa8 \u0a95\u0ab0\u0ac1 \u0a9b\u0ac1 - I bow down to \u0ab0\u0abf\u0aa0\u0acd\u0aa0\u0aa8\u0ac7\u0aae\u0abf\u0a82 - \u0a85\u0ab0\u0abf\u0ab7\u0acd\u0aa0\u0ac7\u0aae\u0abf (\u0aa8\u0ac7\u0aae\u0abf\u0aa8\u0abe\u0aa5) \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Aristanemi i.e. Neminath Swami (22) \u0aaa\u0abe\u0ab8\u0a82 - \u0aaa\u0abe\u0ab0\u0acd\u0ab6\u0acd\u0ab0\u0acd\u0ab5\u0aa8\u0abe\u0aa5 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Parsvanath Swami (23) \u0aa4\u0ab9\u0a83 - \u0aa4\u0aa5\u0abe, \u0aa4\u0ac7\u0aae\u0a9c - and also to \u0ab5\u0aa7\u0acd\u0aa6\u0aae\u0abe\u0aa3\u0a82 - \u0ab5\u0ab0\u0acd\u0aa7\u0aae\u0abe\u0aa8 \u0ab8\u0acd\u0ab5\u0abe\u0aae\u0abf \u0aa8\u0ac7 - Mahavir Swami (24) \u0a9a - \u0a85\u0aa8\u0ac7 - and \u0a8f\u0ab5\u0a82 \u0aae\u0a8f \u0a85\u0aad\u0abf\u0aa5\u0ac1\u0a86 \u0ab5\u0abf\u0ab9\u0ac1\u0aaf \u0ab0\u0aaf \u0aae\u0ab2\u0abe \u0aaa\u0ab9\u0abf\u0aa3 \u0a9c\u0ab0 \u0aae\u0ab0\u0aa3\u0abe \u0a9a\u0a89\u0ab5\u0ac0\u0ab8\u0a82 \u0aaa\u0abf \u0a9c\u0abf\u0aa8\u0ab5\u0ab0\u0abe \u0aa4\u0abf\u0aa5\u0acd\u0aa5\u0aaf\u0ab0\u0abe \u0aae\u0abf \u0aaa\u0ab8\u0ac0\u0a82\u0aaf\u0a82\u0aa4\u0ac1 \u0a8f\u0ab5\u0a82 - \u0a8f \u0aaa\u0acd\u0ab0\u0aae\u0abe\u0aa3\u0ac7 - in this way \u0aae\u0a8f - \u0aae\u0abe\u0ab0\u0abe\u0aa5\u0ac0 - by me \u0a85\u0aad\u0abf\u0aa5\u0ac1\u0a86 - \u0ab8\u0acd\u0aa4\u0ac1\u0aa4\u0abf \u0a95\u0ab0\u0abe\u0aaf\u0ac7\u0ab2\u0abe - are praised or eulogized \u0ab5\u0abf\u0ab9\u0ac1\u0aaf \u0ab0\u0aaf \u0aae\u0ab2\u0abe - \u0a95\u0ab0\u0acd\u0aae \u0ab0\u0a9c\u0aa5\u0ac0 \u0ab0\u0ab9\u0abf\u0aa4 - those who have removed or are free from (\u0ab5\u0abf\u0ab9\u0ac1\u0aaf), karma dust (\u0ab0\u0aaf - dust, newly binding) and the karma dirt (\u0aae\u0ab2\u0abe - filth, bound before) \u0aaa\u0ab9\u0abf\u0aa3 \u0a9c\u0ab0 \u0aae\u0ab0\u0aa3\u0abe - \u0a95\u0acd\u0ab7\u0aaf \u0a95\u0ab0\u0acd\u0aaf\u0abe \u0a9b\u0ac7 \u0a9c\u0ab0\u0abe \u0a85\u0aa8\u0ac7 \u0aae\u0ab0\u0aa3 \u0a9c\u0ac7\u0aae\u0aa3\u0acb - who have subdued or destroyed (\u0aaa\u0ab9\u0abf\u0aa3), the old age (\u0a9c\u0ab0), and death (\u0aae\u0ab0\u0aa3\u0abe) \u0a9a\u0a89\u0ab5\u0ac0\u0ab8\u0a82 - \u0a9a\u0acb\u0ab5\u0ac0\u0ab8 \u0aa4\u0ac0\u0ab0\u0acd\u0aa5\u0a95\u0ab0 - all the 24 \u0aaa\u0abf - \u0aa4\u0aa5\u0abe - and all other \u0a9c\u0abf\u0aa8\u0ab5\u0ab0\u0abe - Omiscient Jinas \u0aa4\u0abf\u0aa5\u0acd\u0aa5\u0aaf\u0ab0\u0abe - \u0aa4\u0ac0\u0ab0\u0acd\u0aa5\u0a82\u0a95\u0ab0\u0acb \u0aae\u0abe\u0ab0\u0abe \u0a89\u0aaa\u0ab0 - The propagators (\u0aaf\u0ab0\u0abe) of the religious order (\u0aa4\u0abf\u0aa5\u0acd\u0aa5) \u0aae\u0abf \u0aaa\u0ab8\u0ac0\u0a82\u0aaf\u0a82\u0aa4\u0ac1 - \u0aaa\u0acd\u0ab0\u0ab8\u0aa8\u0acd\u0aa8 \u0aa5\u0abe\u0a93 - be pleased (\u0aaa\u0ab8\u0ac0\u0a82\u0aaf\u0a82\u0aa4\u0ac1) over me. \u0a95\u0abf\u0aa4\u0acd\u0aa4\u0abf\u0aaf \u0ab5\u0a82\u0aa6\u0abf\u0aaf \u0aae\u0ab9\u0abf\u0aaf \u0a9c\u0ac7 \u0a8f \u0ab2\u0acb\u0a97\u0ab8\u0acd\u0ab8 \u0a89\u0aa4\u0acd\u0aa4\u0aae\u0abe \u0ab8\u0abf\u0aa7\u0acd\u0aa6\u0abe \u0a86\u0ab0\u0ac1\u0a97\u0acd\u0a97 \u0aac\u0acb\u0ab9\u0abf\u0ab2\u0abe\u0aad\u0a82 \u0ab8\u0aae\u0abe\u0ab9\u0abf \u0ab5\u0ab0 \u0aae\u0ac1\u0aa4\u0acd\u0aa4\u0aae\u0a82 \u0aa6\u0abf\u0a82\u0aa4\u0ac1 \u0a95\u0abf\u0aa4\u0acd\u0aa4\u0abf\u0aaf - \u0a87\u0aa8\u0acd\u0aa6\u0acd\u0ab0\u0aa6\u0abf\u0aa5\u0ac0 \u0a95\u0ac0\u0ab0\u0acd\u0aa4\u0aa8 \u0a95\u0ab0\u0abe\u0aaf\u0ac7\u0ab2\u0abe - (I have) praised you (by speech) - \u0a95\u0ac0\u0ab0\u0acd\u0aa4\u0aa8 \u0ab5\u0a82\u0aa6\u0abf\u0aaf - \u0a87\u0aa8\u0acd\u0aa6\u0acd\u0ab0\u0aa6\u0abf\u0aa5\u0ac0 \u0ab5\u0a82\u0aa6\u0abe\u0aaf\u0ab2\u0abe - bowed down (to you physically) - \u0ab5\u0a82\u0aa6\u0aa8 \u0aae\u0ab9\u0abf\u0aaf - \u0a87\u0aa8\u0acd\u0aa6\u0acd\u0ab0\u0aa6\u0abf\u0aa5\u0ac0 \u0aaa\u0ac1\u0a9c\u0abe\u0aaf\u0ac7\u0ab2\u0abe - (you mentally), worshipped - \u0aaa\u0ac1\u0a9c\u0aa8 \u0a9c\u0ac7 \u0a8f - \u0a8f\u0ab5\u0abe \u0a9c\u0ac7 - who are in, those who \u0ab2\u0acb\u0a97\u0ab8\u0acd\u0ab8 - \u0ab2\u0acb\u0a95\u0aa8\u0ac7 \u0ab5\u0abf\u0ab7\u0ac7 - in the Universe \u0a89\u0aa4\u0acd\u0aa4\u0aae\u0abe - \u0aaa\u0acd\u0ab0\u0aa7\u0abe\u0aa8 - the best, are great \u0ab8\u0abf\u0aa7\u0acd\u0aa6\u0abe - \u0ab8\u0abf\u0aa7\u0acd\u0aa6 \u0aad\u0a97\u0ab5\u0a82\u0aa4\u0acb - Liberated Souls, emancipated \u0a86\u0ab0\u0ac1\u0a97\u0acd\u0a97 - \u0a86\u0ab0\u0acb\u0a97\u0acd\u0aaf \u0aae\u0abe\u0a9f\u0ac7, \u0ab6\u0ac1\u0aa7\u0acd\u0aa6 - (may deliver my soul) heath (i.e. may free my soul from diseases of Karma) \u0aac\u0acb\u0ab9\u0abf\u0ab2\u0abe\u0aad\u0a82 - \u0ab8\u0abe\u0a9a\u0ac0 \u0ab8\u0aae\u0a9c\u0aa3, \u0aac\u0acb\u0aa7\u0abf\u0ab2\u0abe\u0aad - (may bestow upon me) the benefits of clear and right faith, seed of attaining perfect spiritual knowledge / right faith for spiritual health \u0ab8\u0aae\u0abe\u0ab9\u0abf \u0ab5\u0ab0 \u0aae\u0ac1\u0aa4\u0acd\u0aa4\u0aae\u0a82 - \u0a89\u0aa4\u0acd\u0aa4\u0aae\u0aad\u0abe\u0ab5, \u0a89\u0aa4\u0acd\u0aa4\u0aae\u0aaa\u0acd\u0ab0\u0a95\u0abe\u0ab0 \u0aa8\u0ac0 \u0ab8\u0aae\u0abe\u0aa7\u0abf \u0ab5\u0aa7\u0abe\u0ab0 \u0aa8\u0abf\u0ab0\u0acd\u0aae\u0ab3 - and deep meditation in the Supreme position (of the liberated souls). state of contemplation (\u0ab8\u0aae\u0abe\u0ab9\u0abf\u0ab5\u0ab0\u0aae), highest (\u0a89\u0aa4\u0acd\u0aa4\u0aae\u0a82) \u0aa6\u0abf\u0a82\u0aa4\u0ac1 - \u0a86\u0aaa\u0acb, \u0aaa\u0acd\u0ab0\u0aa6\u0abe\u0aa8 \u0a95\u0ab0\u0acb - may They give me, may bestow \u0a9a\u0a82\u0aa6\u0ac7\u0ab8\u0ac1 \u0aa8\u0abf\u0aae\u0acd\u0aae\u0ab2 \u0aaf\u0ab0\u0abe \u0a86\u0a87\u0a9a\u0acd\u0a9a\u0ac7\u0ab8\u0ac1 \u0a85\u0ab9\u0abf\u0aaf\u0a82 \u0aaa\u0aaf\u0abe\u0ab8 \u0aaf\u0ab0\u0abe \u0ab8\u0abe\u0a97\u0ab0\u0ab5\u0ab0 \u0a97\u0a82\u0aad\u0ac0\u0ab0\u0abe \u0ab8\u0abf\u0aa7\u0acd\u0aa6\u0abe \u0ab8\u0abf\u0aa7\u0acd\u0aa7\u0abf\u0a82 \u0aae\u0aae \u0aa6\u0abf\u0ab8\u0a82\u0aa4\u0ac1 \u0a9a\u0a82\u0aa6\u0ac7\u0ab8\u0ac1 \u0aa8\u0abf\u0aae\u0acd\u0aae\u0ab2 \u0aaf\u0ab0\u0abe - \u0a9a\u0a82\u0aa6\u0acd\u0ab0 \u0a95\u0ab0\u0aa4\u0abe \u0ab5\u0aa7\u0abe\u0ab0\u0ac7 \u0aa8\u0abf\u0ab0\u0acd\u0aae\u0ab3 - more than Moon (\u0a9a\u0a82\u0aa6\u0ac7\u0ab8\u0ac1) you are purer, more (\u0aaf\u0ab0\u0abe) clear (\u0aa8\u0abf\u0aae\u0acd\u0aae\u0ab2) the moon \u0a86\u0a87\u0a9a\u0acd\u0a9a\u0ac7\u0ab8\u0ac1 \u0a85\u0ab9\u0abf\u0aaf\u0a82 \u0aaa\u0aaf\u0abe\u0ab8 \u0aaf\u0ab0\u0abe - \u0ab8\u0ac1\u0ab0\u0acd\u0aaf\u0aa5\u0ac0 (\u0a86\u0a87\u0a9a\u0acd\u0a9a\u0ac7\u0ab8\u0ac1 ) \u0ab5\u0aa7\u0abe\u0ab0\u0ac7 (\u0a85\u0ab9\u0abf\u0aaf\u0a82) \u0aaa\u0acd\u0ab0\u0a95\u0abe\u0ab6 \u0a95\u0ab0\u0aa8\u0abe\u0ab0 (\u0aaa\u0aaf\u0abe\u0ab8\u0aaf\u0ab0\u0abe) - than Sun more enlightening light giver, more luminous; \u0ab8\u0abe\u0a97\u0ab0\u0ab5\u0ab0 \u0a97\u0a82\u0aad\u0ac0\u0ab0\u0abe - \u0ab8\u0abe\u0a97\u0ab0, \u0ab5\u0ab0 (\u0ab6\u0acd\u0ab0\u0ac7\u0ab7\u0acd\u0a9f) \u0aa5\u0ac0 \u0ab5\u0aa7\u0abe\u0ab0\u0ac7 (\u0a97\u0a82\u0aad\u0ac0\u0ab0), \u0ab8\u0acd\u0ab5\u0aaf\u0a82\u0aad\u0ac1-\u0ab0\u0aae\u0ab3 \u0ab8\u0aae\u0ac1\u0aa6\u0acd\u0ab0 - like great ocean you are deeply calm \u0ab8\u0abf\u0aa7\u0acd\u0aa6\u0abe - \u0ab9\u0ac7 \u0ab8\u0abf\u0aa7\u0acd\u0aa6 \u0aad\u0a97\u0ab5\u0a82\u0aa4\u0acb - Oh Lord Siddhas \u0ab8\u0abf\u0aa7\u0acd\u0aa7\u0abf\u0a82 - \u0ab8\u0abf\u0aa7\u0acd\u0aa6\u0abf \u0a85\u0ab0\u0acd\u0aa5\u0abe\u0aa4\u0acd \u0aae\u0ac1\u0a95\u0acd\u0aa4\u0abf - Liberation (emancipation) \u0aae\u0aae \u0aa6\u0abf\u0ab8\u0a82\u0aa4\u0ac1 - \u0aae\u0aa8\u0ac7 \u0a86\u0aaa\u0acb, \u0aae\u0aa8\u0ac7 \u0aaa\u0acd\u0ab0\u0aa6\u0abe\u0aa8 \u0a95\u0ab0\u0acb - upon me may be bestowed More blemishless than the moons, more illuminating than the suns, Deeper than the oceans, may the Siddhas grant me liberation. Reference: http://jinavachan.blogspot.com/2018/02/logassa-sutra-logasa-sutra-meaning-and.html","title":"Logassa"},{"location":"jainism/panch-maha-vratas/","text":"\u0a85\u0ab9\u0abf\u0a82\u0aae\u0ab8\u0abe - voilence-free \u0ab8\u0aa4\u0acd\u0aaf - falsehood-free \u0a85\u0ab8\u0acd\u0aa4\u0ac7\u0aaf / \u0a85\u0a9a\u0acc\u0ab0\u0acd\u0aaf - theft-free \u0aad\u0acd\u0ab0\u0a82\u0aae\u0a9a\u0ab0\u0aaf\u0abe - unchastity \u0a85\u0aaa\u0ab0\u0abf\u0a97\u0acd\u0ab0\u0ab9 - attachment-free The fourth was added by Mahavir, and the rest are by Parshwanath. A smaller representation is \u0a85\u0aa3\u0ac1\u0ab5\u0acd\u0ab0\u0aa4. There are seven \u0ab6\u0abf\u0ab2\u0abe\u0ab5\u0acd\u0ab0\u0aa4 (supplementary vows) that protect \u0a85\u0aa3\u0ac1\u0ab5\u0acd\u0ab0\u0aa4 ( described in two parts) First part - Three \u0a97\u0ac1\u0aa3\u0ab5\u0acd\u0ab0\u0aa4 - raise the value of the main five vows 1. \u0aa6\u0ac0\u0a95 \u0ab5\u0acd\u0ab0\u0aa4 - lifelong limit worldly activity to fixed points in all 10 directions 2. \u0a89\u0aaa\u0aad\u0acb\u0a97-\u0aaa\u0ab0\u0abf\u0aad\u0acb\u0a97 \u0ab5\u0acd\u0ab0\u0aa4 - every day limit one's enjoyment of consumable (\u0aaa\u0ab0\u0abf\u0aad\u0acb\u0a97) and non-consumable (\u0a89\u0aaa\u0aad\u0acb\u0a97) things 3. \u0a85\u0aa8\u0ab0\u0acd\u0aa5-\u0aa1\u0a82\u0aa1 \u0ab5\u0acd\u0ab0\u0aa4 - not to commit purposeless sins, Second part - Four \u0ab6\u0ac0\u0a95\u0acd\u0ab7\u0abe\u0ab5\u0acd\u0ab0\u0aa4 - disciplinary vows help prepare for an ascetic life 1. \u0ab8\u0abe\u0aae\u0abe\u0aaf\u0ac0\u0a95 \u0ab5\u0acd\u0ab0\u0aa4 - devote particular time everyday to contemplate self 2. \u0aa6\u0ac7\u0ab6-\u0ab5\u0a95\u0ab8\u0abf\u0a95\u0abe \u0ab5\u0acd\u0ab0\u0aa4 - limit the above also for a limited space or area, 3. \u0aaa\u0acb\u0ab6\u0aa7\u0abe \u0ab5\u0acd\u0ab0\u0aa4 - fast on four days of the month, i.e two 8th and the two 14th days of the lunar fortnight, 4. \u0a85\u0aa4\u0abf\u0aa5\u0ac0 \u0ab8\u0a82\u0ab5\u0ac0\u0aad\u0abe\u0a97 \u0ab5\u0acd\u0ab0\u0aa4 - take one's food only after feeding the ascetics, or, in their absence, the pious householders.\u0a9a\u0ab9\u0ab0\u0acb\u0aae\u0ac7 For layman, the above constitues 12 vows - 5 \u0a85\u0aa3\u0ac1 \u0ab5\u0acd\u0ab0\u0aa4 - 7 \u0ab6\u0abf\u0ab2\u0abe \u0ab5\u0acd\u0ab0\u0aa4: - 3 \u0a97\u0ac1\u0aa3 \u0ab5\u0acd\u0ab0\u0aa4 - 4 \u0ab6\u0ac0\u0a95\u0acd\u0ab7\u0abe \u0ab5\u0acd\u0ab0\u0aa4 Jin meditates upon \u0aea \u0aad\u0abe\u0ab5 (virtues) based on the observance of \u0aae\u0ab9\u0abe\u0ab5\u0acd\u0ab0\u0aa4 1. \u0aae\u0ac8\u0aa4\u0acd\u0ab0\u0ac0 - friends of all 2. \u0aaa\u0acd\u0ab0\u0aae\u0acb\u0aa6 - delight at sight of better qualified individuals on the path 3. \u0a95\u0ab0\u0ac1\u0aa3\u0abe - compassion for all 4. \u0aae\u0aa7\u0acd\u0aaf\u0ab8\u0acd\u0aa5 - tolerance (total indifference) of all ill-events In general times, and additionally certain gunas have to be cultivated - Ashta-Mula-Gunas - Five milky fruits; udumbara-pancaka-virati - \u0aae\u0aa7\u0acd\u0aaf \u0ab5\u0abf\u0ab0\u0aa4\u0abf - wine - \u0aae\u0abe\u0aae\u0ab8\u0abe \u0ab5\u0abf\u0ab0\u0aa4\u0abf- meat - \u0aae\u0aa7\u0ac1 \u0ab5\u0abf\u0ab0\u0aa4\u0abf - honey On top of the 12 vows, additionally to embrace death voluntarily - the last moments of life is the \u0ab8\u0ab2\u0ac7\u0a95\u0aa8\u0abe process (\u0ab8\u0aae\u0abe\u0aa7\u0ac0 \u0aae\u0ab0\u0aa8) - Embrace death voluntarily on the arrival of unavoidable calamity, distress, old age and disease, with a view to increase spiritual merit, being in peace at all times during the process - Overcome all the passions and abandon all the worldly attachments by gradually abstaining from the food and the water and simultaneously meditating on the true nature of the Self until the soul parts the body. - Avoid the five transgressions 1. wishing death would come a little later 2. wishing for a speedier death 3. entertaining fear about facing death 4. remembering friends and relatives at the time of death 5. wishing for a certain reward as a result of this vow","title":"Panch Maha Vratas"},{"location":"jainism/samitis-guptis/","text":"Five Samitis and Three Guptis Besides the [[Panch Maha Vratas]] that form the 12 vows for the layman, Jainism observes five rules of code of conducts (Samitis) to purify the actions and make them faultless and three rules of avoidance of misconduct (Guptis) which are prohibitions against sinful activities. Collectively the 8 virtues are known as \u0a85\u0ab8\u0acd\u0aa5-\u0aaa\u0acd\u0ab0\u0ab5\u0a9a\u0aa8-\u0aae\u0aa4. \u0aeb \u0ab8\u0aae\u0abf\u0aa4\u0abf: 1. \u0a87\u0ab0\u0abf\u0aaf\u0abe - regulation of walking carefully so as not to cause any pain or death of any living being. 2. \u0aad\u0abe\u0ab8\u0abe - regulation of speaking by using sinless and concise speed, and to avoid the eight faults during conversation: anger, pride, deceit, greed, laughter, fear, gossip, and slander. 3. \u0a8f\u0ab6\u0aa8\u0acd\u0aa8\u0abe - regulation of begging. Monks should search and obtain foods and other articles necessary for use, and to use them in a faultless manner. 4. \u0a86\u0aa6\u0aa8 \u0aa8\u0ac0\u0a95\u0acd\u0ab7\u0ac7\u0aaa\u0aa8 - regulation of taking or keeping an article of use very carefully so as not to endanger the life of small creatures and insects. 5. \u0a89\u0aa4\u0ab8\u0ab0\u0acd\u0a97 / \u0aaa\u0ab0\u0abf\u0ab8\u0acd\u0aa5\u0abe\u0aaa\u0aa8\u0abf\u0a95\u0abe - regulation of disposal of waste things, such as mucus, urine, stools and other items in a solitary and out of the way place in a proper manner so as not to cause any inconvenience to anybody. This waste helps the growth of germs, and is also the indirect cause of their death. The above \u0ab5\u0acd\u0ab0\u0aa4 is observed in three ways or \u0a97\u0ac1\u0aaa\u0acd\u0aa4\u0abf 1. \u0aae\u0aa8\u0acb - regulation of mind from impure thoughts and always be forgiving and devote the mind to pious meditation. 2. \u0ab5\u0a9a\u0aa8 - regulation of speech to not utter harmful, harsh, careless, foul, senseless, embarrassing, or bad language. 3. \u0a95\u0abe\u0aaf\u0abe - regulation of bodily activity and guard its movement, so as not to hurt others. Each \u0ab5\u0acd\u0ab0\u0aa4 is to be upheld in three ways: 1. \u0a95\u0ab0\u0ab5\u0ac1 \u2013 by oneself 2. \u0a95\u0ab0\u0abe\u0ab5\u0ac1 \u2013 by getting others to do so 3. \u0a85\u0aa8\u0ac1\u0aae\u0acb\u0aa6\u0ab5\u0ac1 \u2013 by supporting other","title":"Samitis and Guptis"},{"location":"jainism/samitis-guptis/#five-samitis-and-three-guptis","text":"Besides the [[Panch Maha Vratas]] that form the 12 vows for the layman, Jainism observes five rules of code of conducts (Samitis) to purify the actions and make them faultless and three rules of avoidance of misconduct (Guptis) which are prohibitions against sinful activities. Collectively the 8 virtues are known as \u0a85\u0ab8\u0acd\u0aa5-\u0aaa\u0acd\u0ab0\u0ab5\u0a9a\u0aa8-\u0aae\u0aa4. \u0aeb \u0ab8\u0aae\u0abf\u0aa4\u0abf: 1. \u0a87\u0ab0\u0abf\u0aaf\u0abe - regulation of walking carefully so as not to cause any pain or death of any living being. 2. \u0aad\u0abe\u0ab8\u0abe - regulation of speaking by using sinless and concise speed, and to avoid the eight faults during conversation: anger, pride, deceit, greed, laughter, fear, gossip, and slander. 3. \u0a8f\u0ab6\u0aa8\u0acd\u0aa8\u0abe - regulation of begging. Monks should search and obtain foods and other articles necessary for use, and to use them in a faultless manner. 4. \u0a86\u0aa6\u0aa8 \u0aa8\u0ac0\u0a95\u0acd\u0ab7\u0ac7\u0aaa\u0aa8 - regulation of taking or keeping an article of use very carefully so as not to endanger the life of small creatures and insects. 5. \u0a89\u0aa4\u0ab8\u0ab0\u0acd\u0a97 / \u0aaa\u0ab0\u0abf\u0ab8\u0acd\u0aa5\u0abe\u0aaa\u0aa8\u0abf\u0a95\u0abe - regulation of disposal of waste things, such as mucus, urine, stools and other items in a solitary and out of the way place in a proper manner so as not to cause any inconvenience to anybody. This waste helps the growth of germs, and is also the indirect cause of their death. The above \u0ab5\u0acd\u0ab0\u0aa4 is observed in three ways or \u0a97\u0ac1\u0aaa\u0acd\u0aa4\u0abf 1. \u0aae\u0aa8\u0acb - regulation of mind from impure thoughts and always be forgiving and devote the mind to pious meditation. 2. \u0ab5\u0a9a\u0aa8 - regulation of speech to not utter harmful, harsh, careless, foul, senseless, embarrassing, or bad language. 3. \u0a95\u0abe\u0aaf\u0abe - regulation of bodily activity and guard its movement, so as not to hurt others. Each \u0ab5\u0acd\u0ab0\u0aa4 is to be upheld in three ways: 1. \u0a95\u0ab0\u0ab5\u0ac1 \u2013 by oneself 2. \u0a95\u0ab0\u0abe\u0ab5\u0ac1 \u2013 by getting others to do so 3. \u0a85\u0aa8\u0ac1\u0aae\u0acb\u0aa6\u0ab5\u0ac1 \u2013 by supporting other","title":"Five Samitis and Three Guptis"},{"location":"jainism/uvasa-stotra/","text":"Composer : Shree Bhadrabahu Swami. Period : 2100 years ago. Purpose : Pay respect to 23rd tirthankar Bhagwan Parshvanath and seek his help in making all Upsargs vanish Meaning : Removal (har) of Upsarg (pain) Story : Varamihir, a powerful Jain monk could not bear to see his brother getting the Acharya position. Varahmihir after his death became a \u2018Vyantar dev\u2019 and started giving Upsarg (pain) to the Jains on earth. His actions born mainly out of jealousy and anger towards his brother Bhadrabahu Swami, brought a lot of ruin to Jains. People approached Bhadrabahu Swami for help. \u0a89\u0ab5\u0ab8\u0a97\u0acd\u0a97\u0ab9\u0ab0\u0a82 \u0aaa\u0abe\u0ab8\u0a82 \u0ab5\u0a82\u0aa6\u0abe\u0aae\u0abf \u0a95\u0aae\u0acd\u0aae\u0a98\u0aa3 \u0aae\u0ac1\u0a95\u0acd\u0a95\u0a82 \u0a89\u0aaa\u0ab8\u0ab0\u0acd\u0a97 \u0ab9\u0ab0\u0aa8\u0abe\u0ab0 \u0a8f\u0ab5\u0abe \u0a95\u0ab0\u0acd\u0aae \u0ab8\u0aae\u0ac2\u0ab9\u0aa5\u0ac0 \u0aae\u0ac1\u0a95\u0acd\u0aa4, \u0aaa\u0abe\u0ab0\u0acd\u0a95\u0acd\u0ab7\u0acd\u0ab5\u0aa8\u0abe\u0aa5\u0aa8\u0ac7 \u0ab5\u0a82\u0aa6\u0ac1\u0a82 \u0a9b\u0ac1\u0a82 I bow to Lord Parshwanath, who is free from all types of Karma. \u0ab5\u0abf\u0ab8\u0ab9\u0ab0 \u0ab5\u0abf\u0ab8 \u0aa8\u0abf\u0aa8\u0acd\u0aa8\u0abe\u0ab8\u0a82 \u0aae\u0a82\u0a97\u0ab2 \u0a95\u0ab2\u0acd\u0aaf\u0abe\u0aa3 \u0a86\u0ab5\u0abe\u0ab8\u0a82 \u0ab5\u0abf\u0ab7\u0aa8\u0acb \u0aa8\u0abe\u0ab6 \u0a95\u0ab0\u0aa8\u0abe\u0ab0, \u0aae\u0a82\u0a97\u0ab2 \u0a85\u0aa8\u0ac7 \u0a95\u0ab2\u0acd\u0aaf\u0abe\u0aa3\u0aa8\u0abe \u0a86\u0ab5\u0abe\u0ab8 \u0ab0\u0ac1\u0aaa \u0a9b\u0acb Who is destroyer of poisonous defilements and who is the abode of bliss and well-being. \u0ab5\u0abf\u0ab8\u0ab9\u0ab0 \u0aab\u0ac1\u0ab2\u0abf\u0a82\u0a97\u0aae\u0a82\u0aa4\u0a82, \u0a95\u0a82\u0aa0\u0ac7 \u0aa7\u0abe\u0ab0\u0ac7\u0a88 \u0a9c\u0acb \u0ab8\u0aaf\u0abe \u0aae\u0aa3\u0ac1\u0a93 \u0a9c\u0ac7 \u0aae\u0aa8\u0ac1\u0ab7\u0acd\u0aaf \u0ab8\u0aa6\u0abe \u0ab5\u0abf\u0ab7\u0ab9\u0ab0 \u0aab\u0ac1\u0ab2\u0abf\u0a82\u0a97 \u0aa8\u0abe\u0aae\u0aa8\u0abe \u0aae\u0a82\u0aa4\u0acd\u0ab0\u0aa8\u0ac7, \u0a95\u0a82\u0aa0\u0a82\u0aae\u0abe\u0a82 \u0aa7\u0abe\u0ab0\u0aa3 \u0a95\u0ab0\u0ac7 \u0a9b\u0ac7 If one holds in his neck the charm of Visahar Fullinga Mantra. This is an 18 letter Mantra associate with the name of P\u00e4rshwan\u00e4th considered effective against pain and affliction. The Mantra is Namiuna P\u00e4sa Visahara Vasaha Jina Fullinga . \u0aa4\u0a9c\u0acd\u0ab8 \u0a97\u0ab9 \u0ab0\u0acb\u0a97 \u0aae\u0abe\u0ab0\u0abf, \u0aa6\u0ac1\u0a9f\u0acd\u0aa0 \u0a9c\u0ab0\u0abe\u0a9c\u0a82\u0aa4\u0abf \u0a89\u0ab5\u0ab8\u0abe\u0aae\u0a82 \u0aa4\u0ac7\u0aa8\u0abe \u0a97\u0acd\u0ab0\u0ab9\u0ab0\u0acb\u0a97 - \u0aae\u0ab9\u0abe\u0aae\u0abe\u0ab0\u0ac0 \u0aa6\u0ac1\u0ab7\u0acd\u0a9f \u0a9c\u0ab5\u0ab0 - \u0aa4\u0abe\u0ab5 \u0ab5\u0acd\u0aaf\u0aa5\u0abe \u0ab6\u0abe\u0a82\u0aa4 \u0aa5\u0abe\u0aaf \u0a9b\u0ac7 \u2026the planetory evil effects, disease, epidemics and acute fever will calm down. \u0a9a\u0abf\u0a9f\u0acd\u0aa0\u0a89 \u0aa6\u0ac1\u0ab0\u0ac7 \u0aae\u0a82\u0aa4\u0acb, \u0aa4\u0ac1\u0a9c\u0acd\u0ab8 \u0aaa\u0aa3\u0abe\u0aae\u0ac7 \u0aac\u0ab9\u0ac2 \u0aab\u0ab2\u0acb \u0ab9\u0acb\u0a87 \u0aae\u0a82\u0aa4\u0acd\u0ab0\u0aa8\u0ac1\u0a82 \u0ab8\u0acd\u0aae\u0ab0\u0aa3 \u0aa4\u0acb \u0aa6\u0ac1\u0ab0 \u0ab0\u0ab9\u0acb, \u0aa4\u0aae\u0acb\u0aa8\u0ac7 \u0aaa\u0acd\u0ab0\u0aa3\u0abe\u0aae \u0aaa\u0aa3 \u0a98\u0aa3\u0ac1 \u0aab\u0ab3 \u0aa6\u0ac7\u0aa8\u0abe\u0ab0 \u0ab9\u0acb\u0aaf \u0a9b\u0ac7 Let aside that charm, obeisance to you also would be highly fruitful. The darkness disappears with the rise of the sun. But prior to sunrise there is the twilight of the morning, which removes the darkness of the night. Similarly, the Mantra would, no doubt, remove the pain and distress, but even the obeisance to the Lord can avert such affliction. \u0aa8\u0ab0 \u0aa4\u0abf\u0ab0\u0abf\u0aaf\u0ac7\u0ab8\u0ac1 \u0ab5\u0abf \u0a9c\u0ac0\u0ab5\u0abe, \u0aaa\u0abe\u0ab5\u0a82\u0aa4\u0abf \u0aa8 \u0aa6\u0ac1\u0a95\u0acd\u0a96 \u0aa6\u0acb\u0a97\u0a9a\u0acd\u0a9a\u0a82 \u0aae\u0aa8\u0ac1\u0ab7\u0acd\u0aaf \u0a85\u0aa8\u0ac7 \u0aa4\u0abf\u0ab0\u0acd\u0aaf\u0a82\u0a9a \u0a9c\u0ac0\u0ab5\u0acb \u0aa6\u0ac1\u0a83\u0a96 \u0aa6\u0ab0\u0abf\u0aa6\u0acd\u0ab0\u0aa4\u0abe\u0aa8\u0ac7 \u0aaa\u0aa3 \u0aaa\u0abe\u0aae\u0aa4\u0abe \u0aa8\u0aa5\u0ac0 \u2026 thereby humans and animals too would not get misery or evil state. \u0aa4\u0ac1\u0ab9 \u0ab8\u0aae\u0acd\u0aae\u0aa4\u0ac7 \u0ab2\u0aa7\u0acd\u0aa6\u0ac7, \u0a9a\u0abf\u0a82\u0aa4\u0abe\u0aae\u0aa3\u0abf \u0a95\u0aaa\u0acd\u0aaa\u0aaa\u0abe\u0aaf\u0ab5\u0aac\u0acd\u0aad\u0ab9\u0abf\u0aaf\u0ac7 \u0a9a\u0abf\u0a82\u0aa4\u0abe\u0aae\u0aa3\u0abf \u0a85\u0aa8\u0ac7 \u0a95\u0ab2\u0acd\u0aaa\u0ab5\u0acd\u0ab0\u0ac1\u0a95\u0acd\u0ab7\u0aa5\u0ac0 \u0ab5\u0aa7\u0abe\u0ab0\u0ac7 \u0aae\u0ab9\u0abf\u0aae\u0abe\u0ab5\u0abe\u0ab3\u0ac1, \u0ab8\u0aae\u0acd\u0aaf\u0a97\u0aa6\u0ab0\u0acd\u0ab6\u0aa8 \u0aaa\u0acd\u0ab0\u0abe\u0aa4\u0acd\u0aaa \u0a95\u0ab0\u0ac7 \u0a9b\u0ac7 Superior to the desire yielding jewel and the desire yielding tree, one gains the right perception laid by you. \u0aaa\u0abe\u0ab5\u0a82\u0aa4\u0abf \u0a85\u0ab5\u0abf\u0a97\u0acd\u0a98\u0ac7\u0aa8\u0aa3\u0a82, \u0a9c\u0ac0\u0ab5\u0abe \u0a85\u0aaf\u0ab0\u0abe\u0aae\u0ab0\u0a82 \u0aa0\u0abe\u0aa3\u0a82 \u0ab5\u0abf\u0aa7\u0acd\u0aa8\u0ab0\u0ab9\u0abf\u0aa4 \u0a9c\u0ac0\u0ab5\u0acb \u0a85\u0a9c\u0ab0 - \u0a85\u0aae\u0ab0 \u0ab8\u0acd\u0aa5\u0abe\u0aa8\u0aa8\u0ac7 \u0aaa\u0acd\u0ab0\u0abe\u0aa4\u0acd\u0aaa \u0a95\u0ab0\u0ac7 \u0a9b\u0ac7 Souls easily attain the unaging, immortal state. \u0a87\u0a85 \u0ab8\u0a82\u0aa5\u0ac1\u0a93 \u0aae\u0ab9\u0abe\u0aaf\u0ab6, \u0aad\u0a95\u0acd\u0aa4\u0acd\u0aa4\u0abf\u0aac\u0acd\u0aad\u0ab0 \u0aa8\u0abf\u0aac\u0acd\u0aad\u0ab0\u0aa3 \u0ab9\u0abf\u0aaf\u0a8f\u0aa3 \u0ab9\u0ac7 \u0aae\u0ab9\u0abe\u0aaf\u0ab6\u0ab8\u0acd\u0ab5\u0ac0 \u0aaa\u0acd\u0ab0\u0aad\u0ac1! \u0aad\u0a95\u0acd\u0aa4\u0abf\u0aa5\u0ac0 \u0aaa\u0ac1\u0ab0\u0acd\u0aa3 \u0aad\u0ab0\u0ac7\u0ab2 \u0ab9\u0acd\u0ab0\u0aa6\u0aaf \u0ab5\u0aa1\u0ac7 \u0a86 \u0ab8\u0acd\u0aa4\u0ac1\u0aa4\u0abf \u0a95\u0ab0\u0aa4\u0abe Oh. Highly esteemable Lord, I have thus prayed to you with the heart flowing with devotion. \u0aa4\u0abe \u0aa6\u0ac7\u0ab5 \u0aa6\u0abf\u0a9c\u0acd\u0a9c \u0aac\u0acb\u0ab9\u0abf\u0a82, \u0aad\u0ab5\u0ac7 \u0aad\u0ab5\u0ac7 \u0aaa\u0abe\u0ab8 \u0a9c\u0abf\u0aa8\u0a9a\u0a82\u0aa6 \u0ab9\u0ac7 \u0aa6\u0ac7\u0ab5! \u0aaa\u0abe\u0ab0\u0acd\u0a95\u0acd\u0ab7\u0acd\u0ab5\u0aa8\u0abe\u0aa5 \u0a9c\u0abf\u0aa8\u0a9a\u0a82\u0aa6\u0acd\u0ab0 ! \u0aac\u0acb\u0aa7\u0abf\u0aac\u0ac0\u0a9c \u0a9c\u0aa8\u0acd\u0aae\u0acb\u0a9c\u0aa8\u0acd\u0aae \u0a86\u0aaa\u0acb Omniscient Parshwa Lord, bestow the wisdom to me in every life","title":"Uvasa"}]}